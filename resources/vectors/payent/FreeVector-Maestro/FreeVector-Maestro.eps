%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: FreeVector-Maestro.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.0%AI9_PrintingDataBegin%%For: wdc%%CreationDate: 5/4/11%%BoundingBox: 0 0 842 596%%HiResBoundingBox: 0 0 841.8897 595.2750%%CropBox: 0 0 841.8897 595.2750%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.0 x199 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2011-05-04T14:17:44+02:00</xap:CreateDate>
         <xap:ModifyDate>2011-05-04T14:17:44+02:00</xap:ModifyDate>
         <xap:MetadataDate>2011-05-04T14:17:44+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>184</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7PirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdiqQar578raYSk98skw/wB0wVlavgePwj6Tmbh7PzZOUdvPZwc/aWDHsZb+&#xA;W7Grv85tNViLTTpph2MrrF/xES5nw7En/FID7f1Oun7QQH0xJ9+360C350XPI8dKQL2BmJP38Bl3&#xA;8hj+f9n7Wj/RCf5n2/sRVt+c9mzf6Tpcka+McqyH7mWPKpdhy6S+z+1th7QR/igR7jf6mQ6X+Y/l&#xA;PUGCC7+qyt0S5X0/+H3T/hswsvZmaHS/d+Ldhh7WwZNuKj57fsZMjo6h0YMrCqsDUEexzAIp2ILe&#xA;BXYq07oil3YKqirMTQAe5xJpIBJoMW1b8zvJumlka9F1KvWO1Hq9P8oUT/hsolqYjzd9pPZrW5t+&#xA;DhHfLb7Of2MZuvz109T/AKLpMso7GWVYtv8AYrLlf5ryd1i9iMh+vLEe6JP6Qg1/Pe45DloyFe4F&#xA;wQfv9M5H80e5yT7Dx/1U/wCl/wCPJjZ/nno7lReabcQVpyMbJKB9/p5IarvDh5vYnMPoyRl7wR+t&#xA;lWjefvKWrkJa6hGszGggmrE5PgA9OX0Vy2OeJ8nQ6vsLV6fecDw943H2fpZDlzp3Yq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYqkXmfzhpPl6Cty3q3TisNpGRzb3P8q+5+iuZmk0U8x25d7hazX48&#xA;A9X1d3V5F5i896/rjPHLN9Xs26WkJKpT/LPV/p29s6bTdn48W4Fy7y8pq+08ubYmo9w/G7HszXXu&#xA;xV2KuxV2KpvoPmvXNDkBsbgiGtWtn+KJvmvb5ihzG1Gjx5h6hv39XL02uy4T6Tt3dHrflLz/AKXr&#xA;wW3elpqVN7djs9BuY27/AC65zWs7Onh35x7/ANb1eh7Thn2+mfd+pS85/mRpHlwNbJ/pmqU2tUNA&#xA;lRsZW7fLrmny5xHYbl7Tsf2dzaz1H0Yu/v8Ad+vk8Y8xec/MPmCQm/um+r1qlpH8EK+Hwjr82qcw&#xA;pTMub6R2f2Pp9IP3cfV/OO8vn+pI8i7N2KuxV2KuxVlXlj8x/MegusazG8sRsbSckgD/ACG+0n6v&#xA;bJwySjydF2l7PabVC64J/wA6P6R1+/ze0+VfOei+ZLYvZScLlBWe0koJE96ftL7jM7FmEve+a9qd&#xA;j59HKpi4nlIcj+o+SfZa6l2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVi3nnzrB5etBDBxk1SdawRHcI&#xA;vT1H9q9B3zY6DQnNKz9A/FOt7R7RGnjQ3meX63iV3d3V5cyXN1K01xKeUkjmpJzrIQERQFAPF5Mk&#xA;pyMpGyVLJMXYq7FXYq7FXYq7FVj3Yt5FYMRICGUpsykbg17ZqNZ2zgwz4JXI9ar9b2XYfsPr+0MP&#xA;j4zDHC/SZmQvzFRlt5oK7mWaZpqsZJCWkLbksTUmtT1zitWcJneLiEe49PtOz7z2Dh1uLTjHrDjl&#xA;kjsJQvceYMY0fdso5jO6dirsVdirsVdirsVROn6je6deR3llM0FzEeSSKaH5HxHiMWnUaeGaBhMc&#xA;US998g+ebbzNYcZeMWq24H1qAbAjp6iVJ+E/hmfhzcWx5vk/bvYktFksb4pfSf0Hz+9leXugdirs&#xA;VdirsVdirsVdirsVdirsVQGu6xbaPpVxqFxukK1VK0LudlUfM5dp8ByzER1adTnjigZno+fdV1O8&#xA;1TUJr67fnPO3Jj2A7KPYDYZ2uHFHHERjyDwWfNLLMzlzKFyxqdirsVdirsVdirsVd2JpUgbLUCv0&#xA;nMTXaieLHxQiZy6Ab/c7XsXQ4dVqBjzZI4cfOUifu7yWvWnHSE/8jV/pnPntDVnc4P8AYSe/Hs52&#xA;OBQ7Q+2P63etP3hJHgZV/pkJa3UyFHTij/Qk2YuwuyschKPaJEomweIfrS+eJkepTgrElRXl9FRn&#xA;O5cM8ZqUTH3vrnZvaODVY7xZI5eHaRjXP3dLUsqdi7FXYq7FXYq7FXYqjtD1m90bVINRsn4zQNWn&#xA;Zl/aRvZhiCQbDi63Rw1OI45j0y/FvpXQ9ZtNZ0m21K0NYbhOXHqVboyH3U7Zs8c+IW+L67Rz02WW&#xA;KfOJ/sPxR2TcR2KuxV2KuxV2KuxV2KuxV2KvJ/ze11ptQg0aJv3VqBNcAd5XHwg/6qGv+yzpOxtP&#xA;UTkPM7D3fj7nlu3tTchjHIbn3/2fe88zdugdirsVdirsVdirsVdiqnJ9YqPSZVHeoB3+kHNNrdPr&#xA;J5LxTjGHx/UXtuwe0Ow8Gn4dZhyZcxJJIAoDoB+8j79xzKz/AE7+dP8AgR/zTmJ+R7R/1WPzP/Eu&#xA;6/lv2X/5RMv2f9VXf6d/On/Aj/mnH8j2j/qsfmf+JX+W/Zf/AJRMv2f9VVksV1Ih5shC1bYAHYew&#xA;zA1/ZurMDPJITEPffn0D0Hs57Udh49QMWlw5MMsxEbNcN/w3+8l12G3VB5zr6q7FXYq7FXYq7FXY&#xA;q7FXqP5JeYXju7nQZm/dTKbi1B7OtA6j/WXf6MyNNOpV3vDe2fZ4MI6gcx6Ze7p9v3vYMznzt2Ku&#xA;xV2KuxV2KuxV2KuxV2KvnLXNQbUdYvb4mv1iZ3X2Un4R9C0zutPj4McY9wfPtTl8TJKXeX0L+S/l&#xA;jSj5Asrm9sLeee7kmm5yxI7cfUKLuwJ6JXOa7U1EvGIBIqnquydPH8uCQLNsn8x+WPL7eXtUVNLt&#xA;Q7Wk4UpDGrAmJqUYAEH3GYmDUT44+o8x1c3Pp4GEhwjkej5p/LvyyfMnm/T9NZeVtz9a89oIvicf&#xA;7L7P051etz+FiMuvT3vG6DT+NmEenM+59T/4a8uf9Wqz/wCkeL/mnOP8fJ/OPze38CH80fJ49/zk&#xA;NDpVjBotjY2UFvLM800rQxpG1ECqoPECtS5+7N52KZSMiSTyef7e4YiMQALt5vZfl156vYhLb6Hd&#xA;mM/ZZ4jHUeI58a5tZa3DE0ZB1EOz88hYgXX35deebGAz3OiXaxD7TrGZKAd24cqD3OMNbhkaEgs+&#xA;z88RZgWO/h75dkyRhEykaAaNPgnmyRxwHFORoAdSU10fyb5m1xTLpVleXkW5M0RrFUHcc6BK+1c4&#xA;0aLRS/ypPw/Y+uZPabtTBUJaPDChyO33yRmofln550+A3F1pV+kKirOpEgUUrVuHKn04nQaMc8sv&#xA;l+xhD2v7SkaGlwE/D/imNcI/+Wlv+Ry5H8nof9WPy/Y7D+Wu3P8AlAh/pT/xSf6R+X3nDWYBPpun&#xA;XtxbvThOCFjYH+V24qfoOSGg0R5ZT8v2OFk9rO1MUqlpMMZDv2P+6VZ/yY/MuMsRoUzICQpDwsSO&#xA;2weuaOWKQPK30TT+0ujnCJlMRkQLG+x6jl0Zb/zj35WR/OGtDVrVXk0y3NvLazIrhJnlAPIGo5L6&#xA;TDJYICUtw6z2t11abH4ctpyux3V+1kf/ADkF5bu57LR7Py95fknrJNPdzWFqzcAiqqK5hQ/a5sdz&#xA;2yefEARwj7HW+yWsjGWSWbKBsABKXzqz5B4ponknzZrto93o+lz3ttHIYnliWqiQAMV+dGBzHAJ5&#xA;Avb6ntPT4JcOSYjKr37lkPk/zZNqf6LTR739I8Q5tGgkWQIejMrKCF9ztjRuurKXaOnEPEOSHB38&#xA;QpS1Ty1r2laoNJv7KWHUmClbQDnIQ/2aBOXXAdubLBrcOXH4kJAw7+n2pxbflV+YtzAs8WgXfpsK&#xA;jmgjan+q5Vvww8Mu4/Jw59u6KJo5Y/f9yRatoWtaPP8AV9VsZ7GYkhUuI2j5cepXkByG/UYCKc/T&#xA;6rFmF45RkPI2r+VtTbS/MenX4PEQzoZCf5GPF/8AhCcIlRto7T03j6aeP+dE/Pp9r6czaviDsVdi&#xA;rsVdirsVdirsVdiqC1uUw6NfzKaGO2lcH3VCcuwC8kR5hqzy4ccj3AvnHO5fPH2D5UtY9G8maXBI&#xA;SFs7GIzHvVYwzmnzrnEaiXHlke+T6BpoeHiiO6IRFncHVvK0Fz9s6hYrJ8Pf1oQdun82RlHgyEd0&#xA;vuLKEuPGD/Oj94ea/wDOPHlj6ro955hmSkt+31e1J/3zEfjI/wBaTb/Y5te2s9yEB03+Lp+wtPww&#xA;OQ/xcvcP2vTtP1VL3UtSt4t4tPeO3du3rGMSuK+yyJmpnj4YxJ/i3+DuYZOKUgP4dvjz/U8W/NfV&#xA;dKf829Jj1eUx6VpcUL3NFLkkM05Wigt8fwr/AEzfdnY5flpcP1Sv9Tz3aeWP5uPGfTED9f6mR3f/&#xA;ADkX5SjZltrC9uAOjssUanftV2P4Zix7EynmYhypdvYRyEj8v1sx8i+fNJ846dNd2EckD27iO4gm&#xA;A5KSKqQVJBBGYOr0csEqPV2Gj1sNRHij0Yr5m/KbRtZ/MOzvfREWnvA9xq8KfCsrqwWMUHQy1PL2&#xA;U9zmRHWXppY5b3sPx5NI0phrIZsZ4ZR327+jKfN/nDQPI2hwzTw0jJENjYW6qvLiOijZVVR1OYuj&#xA;0cs0uGOwDk6/XjEOPITIk/Eob8vvzL0rznHdLbQSWl3acTLbyENVHqFZWHXpvtlus0MsFWbBadD2&#xA;hDUA0KIYR5p/LXQ5vzf0XjaxDT9VWW7vrbgOLSWwLPt4SEpyHzORxabAdPORj6wednr9jsp9vdoQ&#xA;zQxwzSGLhO23Tz59z1LzFrtj5c0G51a6jdrSyRSYoFBahYIoUbDqw9hlGnwHJMQj1cfUZxjgZy3p&#xA;5b/0M35eScpNo12qD9pHjY0+RK/ryjWE4MpxkXX6rem7G9nsnaGkhqcchETvY30kY/oRH/OOiSXe&#xA;meYdfmTjNqmonm3jwX1DQ9SA05zG0g5lz/a8iGTFhB2hj/Z/vUf+ZH50aJ5bu9R8uta3E+pC2ISW&#xA;L0/TWSaKsYcluQ+0Cfh6Yc2bnFo7G9m8upjDNcRDi63dA79Ew/IrTXsfy00wuKPdNNckezyMF+9F&#xA;GS0w9N97je1GYT106/hofIfrTPW/O3kDytqky6jfxwarftGZoo0knnaihIwyRLIyjiPhBp95wnJC&#xA;BPe42m7M1eqxjgiTjjdcgO886V/K3k+z026u9bu4xN5g1SRp7y6cAvGr/YgjP7KRpRNutMcWKvUf&#xA;qLXru0JZIxxRNYcYoDv/AKR8yd2L+b/z88q+XtYl0mO3n1G5tmKXbwlFjRx1QMx+Jl77U98jPUgG&#xA;gLdr2f7KajUYxkJEIy5XzLLUHljz75TimkgF5pGpR8kWVaOpqVNKbo6MCKqdiMs9OSLqD4+g1BAP&#xA;Dkgen43BfJXnnytN5W803+iSMzpbODBKwoXicB428Psneneua+UaNF9d7L1w1WnjlH8XPyPV9E6V&#xA;MZ9Ms5z1lgjc1/ykBzZYjcQfJ8Z1UOHLKPdIj7UVk3HdirsVdirsVdirsVdiqX+Yo/U8v6nHuedp&#xA;OtB13jYZfpjWWJ/pD72jVRvFIf0T9zwLQrD9I63p+n05fW7mGCnSvqSBeo+edpmnwwMu4F4PBDjy&#xA;Rj3kB9V/mNqH6O8ia3cKQhFpJEh6UaYektPpfbOO0UOLNEef7XuNdPgwTP8ARX/l5N6vkTQGqDSw&#xA;t02/yIwv8MdaKzT/AKxToTeCH9UfcrzvpXk/yizIvDT9HtfgUndhGtFFf5nb8TkQJZ8v9KRZExwY&#xA;v6MAkv5QrdSeSodRvDW71a4ub6c+LSysK9+qqMv7SoZeEcogD7HH7Ms4RKXORJ+ZYVp/5dW/njz7&#xA;5g1/Vnf9DW969pDChKtcPbARH4huI1CAbbnxFMz5606fDCEfqMb91uuhoBqc88k/oEq99bfJk+v3&#xA;35ReSeMF1p1kl2y1W1htkmuCh7sSNht+22+YmGGq1G4Jr37ObmnpNNsREH3bp95D8weW9f0qbUNA&#xA;sjZWonMEitDHAWdFVq0jJBFH65j6vDkxyEZmzXfbk6PPjyxMoChfdSaWV3HcatqUan4rQwwSD3Mf&#xA;rfqmGUzjUY+d/q/Q3xkDI+Vfr/Swq+1DygdS1GLz89p663kraRaXwRzHZcUjV0A5UErxM/j0qMv0&#xA;sdSYkwBAv+Hr72HaP5KJiDISPCCeLpI8wLA25d+/VE6R5p/JzR5JJdKvNNspJVCyPAoQsoNaGgy3&#xA;Jp9VPaQkXExajSY/pMB7mDfmP+aWn2vnny5q+gyx6pb6dFN9bETEArOeDJyO1eK1G3hkPymsETGE&#xA;PSau66fF2mkz9kTBnqMxhlj9FCUhv38MT94en+XfP3k3zXbiGzu4pJZlIk064AWahHxKY2+378aj&#xA;KsmlzYt5RMfx3hxIarBlJjCcZ/Pf4SAP2MO/Mb8jPK2o6Td3+h240zVoI2ljWIkQSlAW9NoyeK8u&#xA;gK0p75r9VEzJmTcv1PXez3bs9HwYKHgXy/m8Rux8TdJ1+RumtY/lppXKnO69W5anhJK3D/hAuDTD&#xA;0+9p9p83ia6f9Gh8h+t85fmlqS6j+Yev3KklRdvCpPcW9Ie3b93tmHM3I+99J7Dw+Ho8Uf6IPz3/&#xA;AEvrLyvYxaN5S0uzY8UsbKFJGPikY5k/TU5n49oD3PkmuynNqJy/nTP3vlTypdHzB+aumXl65rfa&#xA;rHcSFzUms3qBK+9Aua+O5F976vr4fl+z5xh/DjI+yr/S+utUuZLXTLu5jFZIIJJEHuiFh+rNlkNR&#xA;J8nyDBASyRiepAfC8ssksryysXkkYs7nqWY1JOat93jEAUOQfW/5IafNZfllo6zAh51luAp7JLK7&#xA;J18UIObDTj0PkPtNmE9dkrpQ+QF/a8X/AOcjXjb8xKJ9pbKASf61XP8AxEjMXP8AWXtvY8H8l/nn&#xA;9D1PREZNGsEb7S20Kn5iMDM3D9A9wfNdabzzP9OX3o3LHFdirsVdirsVdirsVdiq2SNJI3jcVRwV&#xA;YeIIocING1IsU8g/KfRZX/NCwtJRvYSzPPt0NujU/wCHAzre0Mw/LGQ/iA+14zs3ARqhE/wk/Y9Z&#xA;/wCcgNRFt5EFtU8r67iioPBOUpr9MYzTdjwvNfcHd9t5OHBX84j9af8A5Uyep+Xmht4W/Hb/ACXZ&#xA;f4Zj9oD9/L3uX2ab08Pcwj/nInzP6GmWXl2F6SXjfWbsD/fUZpGp9mff/Y5n9i4Lkch6bB1nb2oq&#xA;Axjrufd/b9z0fy3bRaJ5N06F9ksLCMy9t0iDOfpNTmrzy8TKT3ydxgj4eKI/mx/Qx/8AJXVYdR8i&#xA;wsGU3Udzc/XFU7iSWd5tx/qyDMntTGY5j3UK+VOJ2TlE8APWzfztj/nf8j77zJ5tudZj1ZILa89M&#xA;yJJG0kkfBFSi0Khh8O24zJ0vaoxYhDhshxdZ2Oc2Uz4qB8noXlHyvYeWNBt9IsmZ44atJM9OUkjG&#xA;ruae/Qdhms1OollmZF2ul08cMBCPR5p5I/Mixi/MnzJp+oSrDa6pekWM7n4RLAfQVS3QeoiinuKZ&#xA;ttXoScEJR5xG/wAd3UaPtCI1M4y2EpbfDb7WZfmJ+WOl+c4YXknax1K2BSC9RFk+AmvCRGpyWu4o&#xA;QffNH4mQCoTlH3EvUaTJghO8uGGYd0hv8D0ef2X/ADjVOLlTe+YudsD8SQ2iq7D2ZnYL/wACcHi6&#xA;j/VZ/M/rdpPW9m16dFiB89/96PvVLT8jNC1e81dbW9ubGDT7oWVq/GOX1DHBG0ruGAqfVdvskDtT&#xA;vhOXP0zSP+cdvI8nFx6jSRrj0eL4xq+7h/o1tve9q+g/847S6frlpfXXmD6xa2kqTelFaiGRzGQy&#xA;jn6j8NxuRX+IHiZzzyTr3n9bfm1nZ5gRj0eKE+kudef0h6P598zWHlzyrf6jdyBGETx20ZIDSTOp&#xA;CIvvX8N8qzzEYlxuytFPU6iMIjrv5DqUT5QsobHypo9nA3KKCyt0R+vICJfi28euHD9A9zV2hkM9&#xA;RkkeZnL73h3mv8jTpWsWmpS6qL1dV1iC3jsvq9C31mYu/JubD4YwxPw9u2YU8BiBvz2e60HtP4uO&#xA;UBDh8PETfF/NHu6mur2j8wtSfTfI+u3sZpJFZTCM+DuhRT/wTZmZzUC8V2RhGXVY4nkZh8baXqE+&#xA;m6naajb09eymjuIq9OcTh1/EZrn2fPhGXHKB5SBHz2faXljzLpPmfQ4NU0+RZbe4T95FUExvT443&#xA;HivTNljmJi3xPW6LJpcpxzFEfb5hgR/5xx8iNq7Xplu/qhkMn6ODoIgCa8OQX1OH+yr75T+VF89n&#xA;oB7Yavw+Go8VfVW/v51b0PV9X0by5o0l9fypZ6bZRgdKABRRURR1J6Koy+UhAeTzmn0+XU5RCA4p&#xA;yP4J/SXyDr2r3XnTzzLeupR9VukjijG5SMkRxrvXdUArmtkTI31L7Bp8MdDo+H/U4EnzPM/a+jFV&#xA;VUKooqigHsM2oFPi5Nmy3ih2KuxV2KuxV2KuxV2KuxV5P5xu9c8n+dJNZ0Wb6pJqMRKzenHIKkgS&#xA;rSRXFaqG6d86bs/g1GDgnvwn+x5TtPj02o8SBrjH9rG/MnnvzX5lhhg1u++txW7F4V9KGOjMKE/u&#xA;kSu3jmxwaTHiJMBV+91mo1uXMAJmwPIfoRWifmh560TTIdL0vU/q9jb8vRh9C3fjzcu3xPGzGrMT&#xA;ucry6DDkkZSjZPmf1s8PaOfHERjKojyH6kn1zzDrGu6k2patcG6vWCqZCqKOKCigIgVAPoy/Fhjj&#xA;jwxFBx82onllxTNlkF7+b/5i3tnPZ3Orl7e5jeGZBb2ykpIpVhyWIMNj1BrmNHs3BEgiO48z+ty5&#xA;9q6iQIMtj5D9SSeXPNfmDy5dm60a8e1keglUUaNwOgdGBVvu2zIz6eGUVMW42n1WTCbgaZJqX51/&#xA;mHfQGH9ILaoRRmto0jc/7OhZf9iRmLDsvBE3V+9zMnbGokKuvchNP/Nv8wtPs4rO01YpbwghFaC3&#xA;c7kkku8bMxJNSScnPs7BI2Y7+8/ra4dqaiIoS29w/UxKWWSWV5ZG5SSMWdj3JNSczQK2cEkk2WQ6&#xA;X+Z3nXRIUt7PW5o4V/u4pQJ1UdKKJVkCj2GcvqzodPkMZQnfPYmt+71PonZXZfa/amAZsWTEYj08&#xA;oiQI/nVDnVG7JKNm/O38wZkKPrxAPdLeFD/wSRKcxzruzz/BP8f57sY+xfboN8eL7P8AiEt0n8zf&#xA;N2k+r9S12dfWkaaUSEzAyMas1JVcVPfIR1XZw5Y5/M/8W5Of2W9octcU8OwrYQG3wxhM5Pzz/MX0&#xA;2A1ypIIAFtbA1I8fRGR1Gu0ZxkY4S462v/pIs+zfYrtUaiB1E8fgiQ4q5kd309eTDNe8z+YNfuBc&#xA;azfzX0q7J6rVVf8AVQUVfoGc+Te5fWdLocOnFYoiI8k50T81/wAwtEsY7HTdZkjtIV4wxSJFOEUd&#xA;FX1kkIA7AZOOSUeRcLU9g6PPMznjBkfMj7iGr781PP8Af31nfXervLcWEnr2lY4RGkvErz9IIIye&#xA;LEbrgMyTZKcXYWjxwlCMKExR3Nke+7b1781/P+vaVNpWrar9ZsLjj60PoW0fLg4dfijjRtmUHrkp&#xA;ZZEUSjS9g6PT5BkxwqY5Hikee3UsSyt26beXvNfmPy7ctcaJqEtlI+0gjIKPTpzjYMjU9xhBINhx&#xA;NXoMOpjw5YiQ/HXmzYf85DfmQIuHr2palPV+rry+fXj+GT8aff8Ac6P/AEI6K7qX+mYb5g85+afM&#xA;U8c+s6lNdvEaxKSERD/MkaBUU+4GQkSebutJ2bp9OCMUBG/xzO70fyB5i1rzdqUa6jbWotdIcXRu&#xA;o4is7ykSpDG8hZiVX15CB7DLdPG5DyeP9otPi0WEiBlxZfTRO1ekyNd54QPi9QzYPn7sVdirsVdi&#xA;rsVdirsVdirsVY7578tfp7QpIolBvbf99aHxYDdP9mNvnTM7s/VeDks/Sdi4HaWk8fEQPqG4/Hm8&#xA;HZWVirAqymjKdiCOxzsQXhiKaxV2KuxV2KuxV2KuxV3ORVbgTUCoUGlcwtcBGBn4YyEdPLy2LuOx&#xA;IjLqI4ZZpaeEz9Q5A9L9Udul3spfWrz/AHzJ/wAN/TNB/KY/5Rvx/pH0T/Qfj/6Kcfs/6rO+tXn+&#xA;+ZP+G/pj/KY/5Rvx/pF/0H4/+inH7P8Aqshrq7klAjYFeJqQTU16d/DNN2hrRnkOGAgB0H9ge+9l&#xA;/Zv+ToylLMc8slVI3Qj3AcUufO+uyHzXvVuxV2KuxV2KuxV2Kro43kkWONS8jkKijckk0AAxRKQA&#xA;s8g+ivIHlqLy/oEdoSrX0h9W+KkGkjD7PyUCmZ+CHCPN8e7e7ROr1Bn/AADaPu7/AIsly90jsVdi&#xA;rsVdirsVdirsVdirsVdirzL8yvIru8mu6ZHUn4r+3XqT/v1R/wAS+/xzf9l9oVWOfwP6P1POdr9m&#xA;3eWA/rD9P63mOdA807FXYq7FXYq7FXYq7FWmMm3AR+/Pl/A5pdcNcJ3hIMD/AFdvm9n2Cew5Ya1o&#xA;yQyg84mREh7gNiOvz8ghcXE0VFIj5EVBXlUfec5/VdqayBOOcqPlw/eOX3vo/Yfsh2Lqox1GGGSU&#xA;AduOwJV5GrH2dO9A9c0j6W7FXYq7FXYq7FXYq7FXrv5W/l5JCq69qqGOZlrp8DD4kDD++YHof5R9&#xA;OZODDe5+H63z72n7fEv8HxGx/Ge/+j+v5Mw8u+WLrTL/AOsyyqVETRsqOzcyWBBIZV4gca9WNSd/&#xA;E4NMYSsvPdodpwz4+EDrfIbfb+oUOXdJMzHSOxV2KuxV2KuxV2KuxV2KuxV2KuxV515z/LBLppNQ&#xA;0JVjuGq0tlsqOTvWMnZT7dPlm80PavD6cnLv/W6DtDsYTueLY93f7nltzbXNrO8FzE0M8Zo8bgqw&#xA;PuDnQxmJCwbDzE4SiakKKnkmLsVdirsVdiraIzsEQFnYgKoFSSegAxJpQL2D0Tyf+VtxO8d9rqmG&#xA;3FGSx6SP/wAZP5R7dflmj1vawHpx7nv/AFPQ6DsYkiWXYfzf1oTzx+Ud1DJJqHl8NPA3xSWBNZF8&#xA;fTJ+2Pbr884/Nhldjf7/ANr7V2F7UYxCOHNUOHYSG0a6WOn3e55jJHJG7RyKUdTRkYUII7EHMZ7m&#xA;MgRY5LcUuxV2KuxV2Kq9lY3l9cpbWcL3FxIaJFGpZj9Axas2aGKJlMiMR1L1/wAi/lNDYNFqWvBZ&#xA;rxfiistmjjPYv2dh93zzLxafrL5PnnbftUcoOLT7Q6y6n3dw+16XmW8U7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYqlus+XdG1mIR6jbLMVBCSfZkWv8rihGZGDU5MRuJpx9RpceYVMWwPVfybPIvpN&#xA;+Ap6Q3QO3/PRAf8AiGbjD23/AD4/L9X7XR5+wOuOXwP6/wBjGrv8tPONuTSyE6j9uKRGr9BIb8Mz&#xA;4dqYJfxV8HXT7H1Ef4b9xCC/wR5trT9FXH/A5b+fwfzg0/ybqP5hRNt+XXnG4Ipp7Rr3aV40p9Bb&#xA;l+GQl2ngH8X3tkOydRL+GviGRaX+Tl87K2p30cKdTHbgux9uTcQPuOYOXtuI+iN+92GHsCR+uVe5&#xA;neheT9A0QBrK2Hr0obmT45T/ALI/Z/2NM0+o1uXL9R27ujvNNoMWH6Rv39U6zEct2KpF5h8k+W9f&#xA;Ba/tB9YpQXUXwSjw+Ifa/wBlXKp4YydroO2tTpdscvT/ADTuPx7qeeav+R16jM+k6gkydorkFGHt&#xA;zQMD9wzGlppDlu9fpPbWB2zQI847/Ya+8sZu/wArfPFux/3HGZezxSRuD9HLl+GVHFIdHd4vabQz&#xA;/wApXvBH6KQ3/KvPOtafoif/AIX+uDgl3H5N38v6L/VYo6z/ACn873J+KyW2X+aaWMfgpZvwyQwz&#xA;PRxs3tToYcp8XuB/YGV6N+RsalZNZ1DnShaC1FB/yMcVp/sRl0dKepdBrPbUnbDD4y/UP1vRNF8u&#xA;aJokHo6ZaJbg/bcCrt/rO1WP35kwxRjyeP1vaOfUy4ssjL7h7hyTLJuE7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FU3/AMMal4x/8Ef6Yq7/AAxqXjH/AMEf6Yq7/DGpeMf/AAR/pirv8Mal4x/8Ef6Y&#xA;q7/DGpeMf/BH+mKu/wAMal4x/wDBH+mKu/wxqXjH/wAEf6Yq7/DGpeMf/BH+mKu/wxqXjH/wR/pi&#xA;rv8ADGpeMf8AwR/pirv8Mal4x/8ABH+mKu/wxqXjH/wR/pirv8Mal4x/8Ef6Yq7/AAxqXjH/AMEf&#xA;6Yq7/DGpeMf/AAR/pirv8Mal4x/8Ef6Yq7/DGpeMf/BH+mKu/wAMal4x/wDBH+mKu/wxqXjH/wAE&#xA;f6Yq7/DGpeMf/BH+mKu/wxqXjH/wR/pirv8ADGpeMf8AwR/pirv8Mal4x/8ABH+mKu/wxqXjH/wR&#xA;/pirv8Mal4x/8Ef6Yq7/AAxqXjH/AMEf6Yq7/DGpeMf/AAR/pirv8Mal4x/8Ef6Yq7/DGpeMf/BH&#xA;+mKu/wAMal4x/wDBH+mKu/wxqXjH/wAEf6Yq7/DGpeMf/BH+mKv/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:48F5D66A77EB11E08E7F8D5864A4AA3D</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:48F5D66B77EB11E08E7F8D5864A4AA3D</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:48F5D66977EB11E08E7F8D5864A4AA3D</stRef:instanceID>
            <stRef:documentID>uuid:48F5D66877EB11E08E7F8D5864A4AA3D</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:Type>Document</illustrator:Type>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -595.275 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 595.275 li841.89 595.275 li841.89 0 licpclp[1 0 0 1 0 0 ] concat841.887 595.278 mo0 595.278 li0 0 li841.887 0 li841.887 595.278 lifalse sop/0 [/DeviceCMYK] /CSA add_res0.0767705 0.0687735 0.0679738 0.0907651 cmykf536.987 468.646 mo546.029 468.416 li554.958 467.726 li563.714 466.63 li572.354 465.076 li580.878 463.119 li589.229 460.756 li597.352 457.992 li605.357 454.824 li613.135 451.31 li620.682 447.451 li628.053 443.246 li635.138 438.638 li642.05 433.741 li648.674 428.558 li655.067 423.029 li661.174 417.21 li666.933 411.105 li672.463 404.71 li677.705 398.087 li682.6 391.233 li687.15 384.091 li691.354 376.718 li695.271 369.171 li698.786 361.396 li701.896 353.39 li704.661 345.268 li707.021 336.917 li708.981 328.449 li710.536 319.751 li711.63 310.996 li712.322 302.068 li712.552 293.025 li712.322 284.039 li711.63 275.169 li710.536 266.471 li708.981 257.831 li707.021 249.421 li704.661 241.127 li701.896 233.005 li698.786 225.057 li695.271 217.339 li691.354 209.793 li687.15 202.478 li682.6 195.335 li677.705 188.481 li672.463 181.857 li666.933 175.521 li661.174 169.416 li655.067 163.655 li648.674 158.126 li642.05 152.942 li635.138 148.046 li628.053 143.495 li620.682 139.291 li613.135 135.374 li605.357 131.86 li597.352 128.75 li589.229 125.985 li580.878 123.624 li572.354 121.665 li563.714 120.11 li554.958 119.016 li546.029 118.324 li536.987 118.094 li527.943 118.324 li519.016 119.016 li510.261 120.11 li501.62 121.665 li493.096 123.624 li484.802 125.985 li476.622 128.75 li468.674 131.86 li460.898 135.374 li453.352 139.291 li446.037 143.495 li438.896 148.046 li432.041 152.942 li425.416 158.126 li419.08 163.655 li413.032 169.416 li407.214 175.521 li401.685 181.857 li396.501 188.481 li391.605 195.335 li387.055 202.478 li382.85 209.793 li378.991 217.339 li375.535 225.057 li372.367 233.005 li369.602 241.127 li367.298 249.421 li365.339 257.831 li363.785 266.471 li362.69 275.169 li361.999 284.039 li361.769 293.025 li361.999 302.068 li362.69 310.996 li363.785 319.751 li365.339 328.449 li367.298 336.917 li369.602 345.268 li372.367 353.39 li375.535 361.396 li378.991 369.171 li382.85 376.718 li387.055 384.091 li391.605 391.233 li396.501 398.087 li401.685 404.71 li407.214 411.105 li413.032 417.21 li419.08 423.029 li425.416 428.558 li432.041 433.741 li438.896 438.638 li446.037 443.246 li453.352 447.451 li460.898 451.31 li468.674 454.824 li476.622 457.992 li484.802 460.756 li493.096 463.119 li501.62 465.076 li510.261 466.63 li519.016 467.726 li527.943 468.416 li536.987 468.646 licp0 1 0.91 0 cmykef304.514 468.646 mo313.557 468.416 li322.485 467.726 li331.24 466.63 li339.881 465.076 li348.405 463.119 li356.699 460.756 li364.878 457.992 li372.827 454.824 li380.604 451.31 li388.149 447.451 li395.464 443.246 li402.606 438.638 li409.461 433.741 li416.085 428.558 li422.42 423.029 li428.526 417.21 li434.286 411.105 li439.815 404.71 li445 398.087 li449.896 391.233 li454.447 384.091 li458.651 376.718 li462.511 369.171 li466.023 361.396 li469.135 353.39 li471.898 345.268 li474.203 336.917 li476.161 328.449 li477.717 319.751 li478.811 310.996 li479.503 302.068 li479.732 293.025 li479.503 284.039 li478.811 275.169 li477.717 266.471 li476.161 257.831 li474.203 249.421 li471.898 241.127 li469.135 233.005 li466.023 225.057 li462.511 217.339 li458.651 209.793 li454.447 202.478 li449.896 195.335 li445 188.481 li439.815 181.857 li434.286 175.521 li428.526 169.416 li422.42 163.655 li416.085 158.126 li409.461 152.942 li402.606 148.046 li395.464 143.495 li388.149 139.291 li380.604 135.374 li372.827 131.86 li364.878 128.75 li356.699 125.985 li348.405 123.624 li339.881 121.665 li331.24 120.11 li322.485 119.016 li313.557 118.324 li304.514 118.094 li295.471 118.324 li286.542 119.016 li277.788 120.11 li269.147 121.665 li260.623 123.624 li252.271 125.985 li244.149 128.75 li236.143 131.86 li228.367 135.374 li220.821 139.291 li213.448 143.495 li206.363 148.046 li199.452 152.942 li192.827 158.126 li186.434 163.655 li180.386 169.416 li174.568 175.521 li169.039 181.857 li163.798 188.481 li158.901 195.335 li154.352 202.478 li150.146 209.793 li146.229 217.339 li142.715 225.057 li139.605 233.005 li136.84 241.127 li134.479 249.421 li132.521 257.831 li130.965 266.471 li129.871 275.169 li129.179 284.039 li128.95 293.025 li129.179 302.068 li129.871 310.996 li130.965 319.751 li132.521 328.449 li134.479 336.917 li136.84 345.268 li139.605 353.39 li142.715 361.396 li146.229 369.171 li150.146 376.718 li154.352 384.091 li158.901 391.233 li163.798 398.087 li169.039 404.71 li174.568 411.105 li180.386 417.21 li186.434 423.029 li192.827 428.558 li199.452 433.741 li206.363 438.638 li213.448 443.246 li220.821 447.451 li228.367 451.31 li236.143 454.824 li244.149 457.992 li252.271 460.756 li260.623 463.119 li269.147 465.076 li277.788 466.63 li286.542 467.726 li295.471 468.416 li304.514 468.646 licp0.93 0.29 0 0.05 cmykef399.15 184.853 mo488.026 184.853 li488.026 175.06 li407.733 175.06 li399.15 184.853 licp0 1 0.91 0 cmykef385.211 205.588 mo488.026 205.588 li488.026 195.854 li391.432 195.854 li385.211 205.588 licpef374.786 226.67 mo488.026 226.67 li488.026 216.878 li379.567 216.878 li374.786 226.67 licpef367.989 247.405 mo488.026 247.405 li488.026 237.671 li370.985 237.671 li367.989 247.405 licpef363.554 268.199 mo488.026 268.199 li488.026 258.407 li365.339 258.407 li363.554 268.199 licpef362.633 308.462 mo488.026 308.462 li488.026 298.669 li361.769 298.669 li362.633 308.462 licpef365.627 330.408 mo488.026 330.408 li488.026 320.615 li363.843 320.615 li365.627 330.408 licpef371.56 348.205 mo488.026 348.205 li488.026 338.414 li368.566 338.414 li371.56 348.205 licpef380.431 369.863 mo488.026 369.863 li488.026 360.072 li375.708 360.072 li380.431 369.863 licpef392.93 391.808 mo488.026 391.808 li488.026 382.017 li386.363 382.017 li392.93 391.808 licpef408.597 412.89 mo487.162 412.89 li487.162 403.099 li400.015 403.099 li408.597 412.89 licpef683.693 400.679 mo684.213 399.125 li685.076 397.685 li686.172 396.417 li687.439 395.38 li688.878 394.574 li690.433 394.056 li692.104 393.882 li693.831 394.056 li695.445 394.574 li696.885 395.38 li698.151 396.417 li699.189 397.685 li699.995 399.125 li700.514 400.679 li698.729 400.679 li698.383 399.585 li697.748 398.375 li696.942 397.338 li695.963 396.533 li694.811 395.898 li693.486 395.496 li692.104 395.38 li690.722 395.496 li689.396 395.898 li688.245 396.533 li687.208 397.338 li686.401 398.375 li685.768 399.585 li685.424 400.679 li683.693 400.679 licpef689.109 400.679 mo689.109 398.605 li692.393 398.605 li693.141 398.664 li693.775 398.721 li694.35 398.894 li694.811 399.125 li695.156 399.412 li695.445 399.757 li695.617 400.162 li695.675 400.679 li694.178 400.679 li694.12 400.392 li694.005 400.162 li693.831 399.931 li693.602 399.757 li693.314 399.642 li693.025 399.585 li692.737 399.527 li692.393 399.527 li690.606 399.527 li690.606 400.679 li689.109 400.679 licpef683.58 402.177 mo683.693 400.736 li683.693 400.679 li685.424 400.679 li685.365 400.967 li685.25 402.177 li683.58 402.177 licpef689.109 402.177 mo689.109 400.679 li690.606 400.679 li690.606 401.889 li692.104 401.889 li692.622 401.889 li693.083 401.889 li693.428 401.832 li693.717 401.716 li693.889 401.601 li694.063 401.371 li694.178 401.082 li694.178 400.679 li695.675 400.679 li695.617 401.198 li695.502 401.659 li695.33 402.003 li695.156 402.177 li689.109 402.177 licpef698.9 402.177 mo698.786 400.967 li698.729 400.679 li700.514 400.679 li700.514 400.736 li700.686 402.177 li698.9 402.177 licpef683.58 402.177 mo683.521 402.464 li683.693 404.193 li684.213 405.806 li685.076 407.189 li686.172 408.456 li687.439 409.433 li688.878 410.183 li690.433 410.643 li692.104 410.816 li693.831 410.643 li695.445 410.183 li696.885 409.433 li698.151 408.456 li699.189 407.189 li699.995 405.806 li700.514 404.193 li700.686 402.464 li700.686 402.177 li698.9 402.177 li698.9 402.464 li698.786 403.962 li698.383 405.345 li697.748 406.554 li696.942 407.591 li695.963 408.456 li694.811 409.089 li693.486 409.492 li692.104 409.607 li690.722 409.492 li689.396 409.089 li688.245 408.456 li687.208 407.591 li686.401 406.554 li685.768 405.345 li685.365 403.962 li685.25 402.464 li685.25 402.177 li683.58 402.177 licpef689.109 402.177 mo689.109 405.748 li690.606 405.748 li690.606 402.81 li692.104 402.81 li693.889 405.748 li695.388 405.748 li693.256 402.81 li693.775 402.753 li694.292 402.695 li694.695 402.523 li695.042 402.292 li695.156 402.177 li689.109 402.177 licpef499.028 278.279 mo497.877 278.222 li496.725 278.106 li495.688 277.934 li494.651 277.818 li493.614 277.646 li492.578 277.473 li491.482 277.3 li490.331 277.127 li489.122 277.012 li487.854 276.897 li486.414 276.782 li484.859 276.724 li483.131 276.724 li481.229 276.782 li479.099 276.897 li476.795 277.069 li475.125 277.3 li473.57 277.646 li472.13 278.106 li470.862 278.625 li469.711 279.259 li468.674 279.95 li467.81 280.756 li467.119 281.563 li466.6 282.484 li466.255 283.463 li466.081 284.442 li466.081 285.479 li466.313 286.573 li466.716 287.668 li467.349 288.763 li468.154 289.856 li469.825 291.354 li471.784 292.564 li474.088 293.601 li476.564 294.465 li479.156 295.33 li481.864 296.193 li484.628 297.171 li487.278 298.324 li489.755 299.707 li492.117 301.376 li494.19 303.507 li495.919 306.042 li497.244 309.154 li498.107 312.839 li498.396 317.216 li498.107 322.401 li497.474 326.26 li496.438 329.716 li495.112 332.827 li493.442 335.591 li491.482 338.009 li489.352 340.084 li486.99 341.87 li484.456 343.424 li481.807 344.693 li479.042 345.729 li476.219 346.593 li473.396 347.226 li470.575 347.687 li467.81 347.975 li465.159 348.148 li462.568 348.205 li458.997 348.205 li455.771 348.148 li452.834 348.091 li450.127 348.033 li447.65 347.917 li445.461 347.802 li443.388 347.628 li441.544 347.4 li439.815 347.169 li438.203 346.88 li436.706 346.593 li435.208 346.19 li433.825 345.787 li432.443 345.384 li431.061 344.865 li429.62 344.346 li433.192 326.26 li433.998 326.433 li434.979 326.721 li436.188 327.009 li437.513 327.355 li439.067 327.642 li440.795 328.045 li442.639 328.392 li444.597 328.737 li446.67 329.025 li448.859 329.312 li451.106 329.542 li453.467 329.773 li455.83 329.889 li458.248 329.947 li460.667 329.947 li463.144 329.832 li465.448 329.428 li467.349 328.794 li468.789 327.873 li469.94 326.835 li470.805 325.626 li471.439 324.359 li471.956 323.092 li472.303 321.826 li472.475 320.5 li472.417 319.347 li472.13 318.253 li471.669 317.332 li471.034 316.41 li470.229 315.604 li469.25 314.855 li468.154 314.164 li466.945 313.531 li465.62 312.897 li464.182 312.263 li462.683 311.687 li461.186 311.111 li459.573 310.478 li457.961 309.843 li456.289 309.154 li454.677 308.462 li453.064 307.712 li451.451 306.849 li449.896 305.927 li448.398 304.948 li447.016 303.854 li445.69 302.587 li444.481 301.261 li443.388 299.764 li442.408 298.152 li441.602 296.366 li440.911 294.465 li440.45 292.333 li440.162 290.03 li440.104 287.495 li440.276 284.788 li440.45 283.118 li440.68 281.505 li440.911 279.95 li441.256 278.452 li441.602 277.012 li442.005 275.572 li442.523 274.247 li443.042 272.922 li443.675 271.713 li444.31 270.503 li445.058 269.409 li445.864 268.314 li446.729 267.278 li447.65 266.298 li448.63 265.377 li449.724 264.513 li450.875 263.706 li452.084 262.957 li453.409 262.267 li454.792 261.575 li456.232 260.999 li457.787 260.423 li459.4 259.962 li461.128 259.501 li462.972 259.099 li464.872 258.753 li466.83 258.465 li468.904 258.233 li471.092 258.062 li473.396 257.946 li475.758 257.831 li478.236 257.831 li481.287 257.831 li484.053 257.889 li486.529 257.946 li488.833 258.062 li490.85 258.176 li492.692 258.292 li494.362 258.465 li495.803 258.58 li497.128 258.753 li498.279 258.926 li499.375 259.041 li500.295 259.214 li501.102 259.328 li501.852 259.443 li502.542 259.56 li503.177 259.617 li499.028 278.279 licp0 0 0 0 cmykef499.028 278.279 mo499.034 278.171 li497.885 278.114 li496.739 277.999 li495.705 277.827 li495.702 277.827 li494.666 277.711 li493.632 277.539 li492.596 277.366 li491.499 277.193 li490.347 277.021 li490.344 277.02 li489.132 276.905 li487.864 276.789 li486.42 276.674 li484.861 276.616 li483.129 276.616 li481.226 276.674 li479.093 276.789 li476.784 276.962 li475.106 277.193 li473.542 277.541 li472.093 278.005 li470.815 278.527 li469.655 279.166 li468.607 279.865 li467.731 280.681 li467.03 281.5 li466.501 282.439 li466.15 283.436 li465.975 284.423 li465.973 284.433 li465.973 285.479 li465.973 285.491 li466.208 286.603 li466.618 287.714 li467.258 288.822 li468.074 289.929 li469.76 291.441 li471.733 292.659 li474.048 293.701 li476.529 294.567 li479.122 295.432 li481.829 296.295 li484.588 297.272 li487.23 298.421 li489.697 299.798 li492.047 301.459 li494.106 303.576 li495.824 306.095 li497.141 309.187 li498 312.855 li498.287 317.217 li498 322.389 li497.368 326.236 li496.336 329.679 li495.016 332.777 li493.354 335.529 li491.402 337.936 li489.281 340.002 li486.929 341.78 li484.404 343.329 li481.764 344.593 li479.007 345.627 li476.191 346.489 li473.376 347.12 li470.56 347.58 li467.801 347.867 li465.155 348.04 li462.566 348.097 li458.997 348.097 li455.773 348.04 li452.836 347.983 li450.13 347.925 li447.655 347.81 li445.468 347.694 li443.399 347.521 li441.557 347.293 li439.832 347.063 li438.222 346.774 li436.73 346.488 li435.236 346.086 li433.855 345.683 li432.477 345.282 li431.099 344.764 li429.744 344.276 li433.277 326.389 li433.971 326.538 li434.948 326.825 li434.951 326.826 li436.162 327.114 li437.489 327.46 li439.046 327.748 li440.772 328.151 li442.619 328.498 li444.58 328.844 li446.655 329.132 li448.847 329.419 li451.095 329.65 li453.459 329.881 li455.825 329.997 li458.247 330.055 li460.67 330.055 li463.155 329.939 li465.475 329.533 li467.395 328.893 li468.855 327.959 li470.021 326.908 li470.897 325.682 li471.538 324.404 li472.058 323.127 li472.409 321.847 li472.583 320.504 li472.525 319.342 li472.524 319.331 li472.231 318.215 li471.762 317.277 li471.117 316.34 li470.3 315.522 li469.312 314.766 li468.208 314.07 li466.994 313.434 li465.665 312.799 li464.223 312.163 li462.721 311.586 li461.224 311.01 li459.613 310.377 li458 309.743 li456.33 309.054 li454.721 308.364 li453.113 307.616 li451.505 306.755 li449.953 305.835 li448.462 304.86 li447.087 303.772 li445.768 302.512 li444.565 301.193 li443.478 299.704 li442.504 298.101 li441.702 296.325 li441.015 294.435 li440.557 292.315 li440.27 290.022 li440.213 287.497 li440.384 284.798 li440.557 283.131 li440.787 281.52 li441.017 279.97 li441.361 278.476 li441.706 277.038 li442.107 275.606 li442.624 274.286 li443.14 272.967 li443.77 271.763 li444.402 270.559 li445.146 269.472 li445.949 268.381 li446.809 267.35 li447.727 266.375 li448.7 265.459 li449.788 264.599 li450.934 263.796 li452.137 263.051 li453.459 262.362 li454.836 261.674 li456.271 261.1 li457.821 260.526 li459.43 260.066 li461.153 259.606 li462.993 259.205 li464.89 258.859 li466.844 258.572 li468.914 258.341 li471.099 258.169 li473.402 258.054 li475.761 257.939 li478.236 257.939 li481.287 257.939 li484.05 257.997 li486.525 258.054 li488.828 258.169 li490.843 258.284 li492.683 258.4 li494.351 258.572 li495.791 258.688 li497.114 258.86 li498.263 259.033 li498.266 259.033 li499.359 259.147 li500.275 259.32 li500.277 259.32 li501.086 259.435 li501.835 259.55 li502.524 259.666 li502.528 259.667 li503.045 259.713 li498.923 278.256 li499.028 278.279 li499.034 278.171 li499.028 278.279 li499.134 278.303 li503.309 259.52 li502.556 259.452 li501.87 259.336 li501.118 259.221 li500.312 259.107 li499.395 258.934 li499.391 258.934 li498.293 258.819 li497.144 258.646 li495.814 258.473 li494.371 258.357 li492.702 258.184 li490.856 258.068 li488.839 257.954 li486.533 257.838 li484.055 257.781 li481.289 257.723 li478.236 257.723 li475.755 257.723 li473.391 257.838 li471.085 257.954 li468.894 258.126 li466.816 258.358 li464.855 258.646 li462.95 258.993 li461.103 259.396 li459.373 259.858 li457.754 260.32 li456.193 260.898 li454.748 261.477 li453.361 262.17 li452.031 262.863 li450.815 263.616 li449.659 264.426 li448.559 265.295 li447.574 266.222 li446.648 267.206 li445.779 268.248 li444.969 269.347 li444.217 270.447 li443.579 271.663 li442.944 272.877 li442.423 274.208 li441.902 275.537 li441.497 276.986 li441.151 278.427 li440.805 279.93 li440.573 281.489 li440.343 283.104 li440.169 284.779 li439.996 287.493 li440.054 290.038 li440.344 292.351 li440.807 294.495 li441.501 296.407 li442.312 298.202 li443.298 299.824 li444.398 301.33 li445.613 302.663 li446.945 303.936 li448.335 305.035 li449.84 306.019 li451.398 306.943 li453.016 307.809 li454.632 308.561 li456.246 309.253 li457.92 309.943 li459.534 310.578 li461.146 311.211 li462.644 311.788 li464.14 312.363 li465.575 312.995 li466.897 313.627 li468.1 314.257 li469.188 314.944 li470.157 315.686 li470.951 316.479 li471.576 317.386 li472.028 318.292 li472.31 319.364 li472.366 320.495 li472.197 321.804 li471.854 323.058 li471.341 324.314 li470.712 325.571 li469.859 326.763 li468.723 327.786 li467.302 328.696 li465.422 329.323 li463.132 329.724 li460.665 329.839 li458.249 329.839 li455.834 329.781 li453.475 329.665 li451.117 329.435 li448.871 329.205 li446.684 328.918 li444.614 328.63 li442.657 328.286 li440.818 327.94 li439.089 327.536 li437.536 327.249 li436.215 326.905 li435.006 326.617 li434.028 326.329 li434.024 326.328 li433.215 326.155 li433.108 326.132 li429.496 344.416 li431.024 344.966 li432.409 345.487 li433.795 345.89 li435.178 346.294 li436.682 346.699 li438.183 346.986 li439.799 347.276 li441.53 347.507 li443.376 347.736 li445.454 347.91 li447.645 348.025 li450.123 348.141 li452.832 348.199 li455.769 348.256 li458.995 348.313 li462.568 348.313 li465.164 348.256 li467.818 348.083 li470.59 347.794 li473.417 347.332 li476.246 346.698 li479.077 345.831 li481.849 344.792 li484.508 343.519 li487.051 341.959 li489.422 340.167 li491.562 338.082 li493.531 335.653 li495.209 332.876 li496.539 329.753 li497.579 326.284 li498.215 322.413 li498.504 317.216 li498.215 312.823 li497.347 309.12 li496.014 305.99 li494.274 303.439 li492.188 301.294 li489.812 299.615 li487.326 298.227 li484.667 297.071 li481.899 296.091 li479.189 295.227 li476.599 294.362 li474.128 293.5 li471.835 292.468 li469.89 291.268 li468.235 289.783 li467.439 288.703 li466.814 287.622 li466.417 286.543 li466.189 285.468 li466.189 284.452 li466.36 283.491 li466.698 282.529 li467.208 281.625 li467.888 280.831 li468.741 280.035 li469.767 279.351 li470.909 278.723 li472.167 278.208 li473.598 277.75 li475.144 277.406 li476.806 277.177 li479.107 277.005 li481.235 276.89 li483.133 276.832 li484.857 276.832 li486.407 276.89 li487.846 277.005 li489.112 277.12 li490.318 277.235 li491.466 277.407 li492.561 277.579 li493.596 277.752 li494.634 277.925 li494.636 277.925 li495.673 278.041 li496.707 278.213 li496.71 278.214 li497.866 278.329 li497.869 278.329 li499.023 278.387 li499.114 278.392 li499.134 278.303 li499.028 278.279 licpf517.979 239.745 mo541.135 239.745 li537.563 259.905 li551.791 259.905 li548.565 278.279 li533.992 277.991 li526.331 323.898 li526.216 324.877 li526.216 325.742 li526.331 326.491 li526.561 327.181 li526.908 327.757 li527.311 328.333 li527.828 328.794 li528.404 329.14 li529.096 329.486 li529.787 329.773 li530.594 330.003 li531.4 330.12 li532.322 330.292 li533.244 330.349 li534.222 330.408 li535.201 330.408 li537.045 330.408 li538.658 330.292 li540.154 330.062 li541.424 329.773 li542.401 329.486 li543.15 329.198 li543.611 328.967 li543.784 328.91 li541.424 344.634 li540.847 344.98 li540.213 345.268 li539.58 345.556 li538.947 345.843 li538.313 346.074 li537.62 346.304 li536.93 346.535 li536.123 346.765 li535.317 346.996 li534.453 347.169 li533.474 347.341 li532.438 347.514 li531.342 347.687 li530.19 347.861 li528.865 348.033 li527.482 348.205 li521.263 348.205 li517.979 347.975 li515.042 347.628 li512.45 347.169 li510.203 346.535 li508.302 345.843 li506.689 344.98 li505.364 344 li504.271 342.906 li503.406 341.697 li502.773 340.373 li502.369 338.932 li502.139 337.32 li502.081 335.648 li502.139 333.806 li502.313 331.905 li502.6 329.832 li517.979 239.745 licpef517.979 239.745 mo517.979 239.853 li541.006 239.853 li537.434 260.013 li551.662 260.013 li548.475 278.169 li533.901 277.881 li526.224 323.883 li526.109 324.865 li526.108 324.871 li526.108 325.742 li526.108 325.75 li526.224 326.507 li526.226 326.516 li526.458 327.215 li526.462 327.227 li526.816 327.813 li526.817 327.816 li527.222 328.395 li527.229 328.406 li527.756 328.875 li527.764 328.882 li528.349 329.233 li528.352 329.235 li529.047 329.582 li529.051 329.584 li529.746 329.873 li529.751 329.875 li530.564 330.107 li530.571 330.109 li531.383 330.226 li532.302 330.399 li532.309 330.4 li533.237 330.457 li534.215 330.516 li534.218 330.516 li535.201 330.516 li537.049 330.516 li538.67 330.4 li540.175 330.168 li541.451 329.877 li542.432 329.589 li542.436 329.588 li543.189 329.299 li543.194 329.297 li543.653 329.067 li543.818 329.012 li543.784 328.91 li543.677 328.894 li541.325 344.568 li540.796 344.884 li540.168 345.17 li539.535 345.458 li538.906 345.743 li538.276 345.972 li537.586 346.202 li536.898 346.431 li536.093 346.661 li535.292 346.891 li534.432 347.064 li533.455 347.235 li532.42 347.408 li531.325 347.58 li530.174 347.754 li528.851 347.926 li527.476 348.097 li521.266 348.097 li517.99 347.868 li515.058 347.522 li512.474 347.064 li510.236 346.432 li508.346 345.744 li506.747 344.888 li505.435 343.918 li504.353 342.836 li503.5 341.642 li502.875 340.334 li502.475 338.91 li502.246 337.31 li502.189 335.648 li502.246 333.813 li502.42 331.916 li502.706 329.848 li518.086 239.763 li517.979 239.745 li517.979 239.853 li517.979 239.745 li517.873 239.727 li502.493 329.816 li502.205 331.892 li502.031 333.799 li501.973 335.648 li502.031 337.329 li502.263 338.954 li502.672 340.411 li503.313 341.752 li504.188 342.976 li505.293 344.081 li506.631 345.071 li508.257 345.942 li510.17 346.638 li512.426 347.275 li515.026 347.735 li517.969 348.083 li521.259 348.313 li527.489 348.313 li528.879 348.14 li530.204 347.968 li531.358 347.794 li532.454 347.621 li533.491 347.448 li534.472 347.276 li535.339 347.101 li535.343 347.101 li536.153 346.869 li536.959 346.638 li536.961 346.638 li537.654 346.407 li538.347 346.176 li538.984 345.945 li538.988 345.943 li539.625 345.654 li540.258 345.366 li540.891 345.078 li540.897 345.076 li541.479 344.727 li541.523 344.701 li543.917 328.751 li543.577 328.865 li543.57 328.867 li543.107 329.099 li542.367 329.383 li541.396 329.668 li540.134 329.956 li538.646 330.185 li537.041 330.3 li535.201 330.3 li534.225 330.3 li533.251 330.241 li532.336 330.185 li531.42 330.013 li531.418 330.013 li530.616 329.898 li529.823 329.671 li529.14 329.387 li528.456 329.045 li527.892 328.707 li527.392 328.261 li526.999 327.699 li526.659 327.136 li526.436 326.465 li526.324 325.734 li526.324 324.884 li526.438 323.913 li534.083 278.101 li548.656 278.389 li551.92 259.797 li537.691 259.797 li541.264 239.637 li517.888 239.637 li517.873 239.727 li517.979 239.745 licpf377.205 309.671 mo376.917 311.111 li376.859 312.552 li376.976 314.107 li377.32 315.604 li377.781 317.16 li378.472 318.714 li379.278 320.212 li380.258 321.652 li381.353 323.034 li382.62 324.359 li383.944 325.511 li385.385 326.605 li386.939 327.527 li388.552 328.276 li390.28 328.853 li392.008 329.255 li394.082 329.542 li396.156 329.832 li398.287 330.062 li400.418 330.177 li402.606 330.234 li404.738 330.234 li406.985 330.12 li409.173 329.947 li411.419 329.601 li413.724 329.198 li416.027 328.623 li418.331 327.873 li420.636 327.009 li423.055 325.972 li425.416 324.705 li427.836 323.323 li424.264 343.771 li422.939 344.462 li421.614 345.095 li420.405 345.613 li419.138 346.074 li417.871 346.535 li416.604 346.88 li415.278 347.169 li413.839 347.457 li412.341 347.628 li410.728 347.802 li408.942 347.975 li407.042 348.033 li404.968 348.148 li402.664 348.148 li400.13 348.205 li397.366 348.205 li395.349 348.205 li393.275 348.091 li391.259 347.975 li389.186 347.745 li387.055 347.457 li384.981 347.111 li382.907 346.651 li380.834 346.19 li378.817 345.556 li376.802 344.923 li374.843 344.173 li372.885 343.31 li370.985 342.331 li369.141 341.294 li367.414 340.142 li365.685 338.875 li364.072 337.492 li362.517 335.995 li361.02 334.381 li359.694 332.654 li358.427 330.753 li357.275 328.794 li356.239 326.664 li355.317 324.417 li354.511 321.998 li353.877 319.463 li353.358 316.814 li353.014 313.933 li352.782 310.939 li352.782 307.828 li352.897 304.488 li353.186 301.031 li353.358 299.822 li353.531 298.439 li353.762 297.057 li354.05 295.56 li354.338 294.004 li354.741 292.391 li355.202 290.721 li355.663 288.993 li356.239 287.207 li356.872 285.479 li357.621 283.694 li358.427 281.908 li359.349 280.122 li360.328 278.337 li361.423 276.551 li362.575 274.823 li363.899 273.153 li365.282 271.482 li366.779 269.87 li368.45 268.372 li370.178 266.874 li372.079 265.492 li374.095 264.225 li376.283 263.015 li378.587 261.979 li381.064 260.999 li383.656 260.135 li386.421 259.443 li389.358 258.868 li392.469 258.465 li395.694 258.233 li399.15 258.118 li400.763 258.118 li402.376 258.233 li404.046 258.35 li405.717 258.522 li407.388 258.753 li409.115 259.099 li410.786 259.501 li412.456 259.962 li414.126 260.479 li415.797 261.114 li417.41 261.805 li418.966 262.612 li420.462 263.534 li421.961 264.513 li423.342 265.665 li424.725 266.874 li425.992 268.199 li427.201 269.639 li428.297 271.252 li429.275 272.922 li430.197 274.766 li431.003 276.724 li431.695 278.855 li432.213 281.102 li432.674 283.521 li432.963 286.055 li433.076 288.763 li433.076 291.642 li432.904 294.695 li432.615 297.921 li432.099 301.32 li431.406 304.89 li430.484 309.959 li370.639 309.959 li374.21 293.946 li410.095 293.946 li410.268 291.758 li410.268 289.741 li410.152 287.841 li409.807 286.113 li409.347 284.558 li408.77 283.118 li408.021 281.851 li407.157 280.698 li406.178 279.662 li405.083 278.798 li403.931 278.106 li402.722 277.53 li401.397 277.069 li400.015 276.724 li398.575 276.551 li397.077 276.494 li395.464 276.494 li393.967 276.724 li392.469 277.012 li391.087 277.473 li389.762 278.106 li388.495 278.855 li387.285 279.719 li386.19 280.698 li385.154 281.851 li384.233 283.06 li383.368 284.385 li382.562 285.825 li381.871 287.322 li381.294 288.935 li380.834 290.663 li380.431 292.449 li377.205 309.671 licpef377.205 309.671 mo377.099 309.65 li376.809 311.098 li376.751 312.554 li376.868 314.123 li377.216 315.631 li377.679 317.197 li378.375 318.762 li379.186 320.268 li380.171 321.716 li381.271 323.105 li382.545 324.437 li383.876 325.595 li385.325 326.695 li386.889 327.622 li388.512 328.376 li390.251 328.957 li391.988 329.362 li394.067 329.649 li396.143 329.939 li398.278 330.17 li400.413 330.285 li402.605 330.342 li404.741 330.342 li406.993 330.227 li409.185 330.054 li411.437 329.708 li413.746 329.303 li416.057 328.726 li418.367 327.974 li420.676 327.11 li423.101 326.07 li425.467 324.8 li427.69 323.53 li424.166 343.7 li422.891 344.366 li421.57 344.997 li420.365 345.512 li419.101 345.972 li417.838 346.432 li416.578 346.775 li415.255 347.064 li413.822 347.35 li412.328 347.521 li410.716 347.695 li408.936 347.867 li407.038 347.925 li404.966 348.04 li402.662 348.04 li400.128 348.097 li397.366 348.097 li395.351 348.097 li393.281 347.983 li391.268 347.867 li389.2 347.637 li387.07 347.35 li385.001 347.005 li382.931 346.545 li380.862 346.085 li378.85 345.453 li376.837 344.821 li374.884 344.073 li372.932 343.213 li371.036 342.235 li369.198 341.202 li367.476 340.054 li365.752 338.79 li364.145 337.412 li362.594 335.919 li361.102 334.311 li359.782 332.591 li358.519 330.696 li357.371 328.743 li356.337 326.62 li355.418 324.379 li354.615 321.967 li353.982 319.44 li353.465 316.797 li353.122 313.923 li352.89 310.935 li352.89 307.83 li353.005 304.494 li353.293 301.043 li353.465 299.836 li353.638 298.454 li353.868 297.076 li354.156 295.58 li354.443 294.027 li354.846 292.418 li355.306 290.749 li355.766 289.024 li356.341 287.242 li356.973 285.519 li357.721 283.736 li357.621 283.694 li357.72 283.738 li358.524 281.955 li359.444 280.173 li360.421 278.391 li361.514 276.61 li362.663 274.887 li363.983 273.221 li365.363 271.554 li366.855 269.947 li368.522 268.452 li368.45 268.372 li368.52 268.454 li370.245 266.958 li372.139 265.582 li374.15 264.318 li376.332 263.111 li378.63 262.078 li381.101 261.1 li383.686 260.239 li386.444 259.548 li389.376 258.975 li392.48 258.572 li395.7 258.341 li399.152 258.226 li400.759 258.226 li402.368 258.341 li404.037 258.457 li405.704 258.63 li407.37 258.859 li409.092 259.204 li410.759 259.606 li412.426 260.066 li414.091 260.582 li415.757 261.215 li417.363 261.902 li418.913 262.706 li420.405 263.625 li421.897 264.6 li423.271 265.747 li424.65 266.952 li425.912 268.271 li427.115 269.704 li428.206 271.31 li429.18 272.974 li430.099 274.811 li430.901 276.761 li431.591 278.884 li432.107 281.124 li432.567 283.537 li432.855 286.064 li432.968 288.765 li432.968 291.639 li432.797 294.688 li432.508 297.908 li431.992 301.301 li431.3 304.87 li430.394 309.851 li370.773 309.851 li374.297 294.054 li410.194 294.054 li410.376 291.762 li410.376 289.738 li410.26 287.827 li409.912 286.087 li409.449 284.522 li408.867 283.07 li408.111 281.791 li407.24 280.628 li406.251 279.582 li405.144 278.709 li403.982 278.011 li402.763 277.43 li401.428 276.966 li400.034 276.617 li398.584 276.443 li397.079 276.386 li395.456 276.386 li393.948 276.617 li392.442 276.907 li391.046 277.372 li389.711 278.011 li388.436 278.764 li387.217 279.635 li386.114 280.622 li385.07 281.782 li384.145 282.997 li383.276 284.329 li382.465 285.776 li381.771 287.281 li381.191 288.903 li380.729 290.637 li380.325 292.427 li377.099 309.651 li377.205 309.671 li377.311 309.691 li380.536 292.471 li380.939 290.689 li381.398 288.967 li381.971 287.363 li382.658 285.875 li383.461 284.441 li384.322 283.122 li385.237 281.92 li386.267 280.775 li387.353 279.804 li388.553 278.946 li389.813 278.202 li391.127 277.573 li392.497 277.117 li393.985 276.83 li395.472 276.602 li397.075 276.602 li398.567 276.659 li399.995 276.83 li401.366 277.173 li402.68 277.63 li403.88 278.202 li405.021 278.887 li406.105 279.741 li407.075 280.768 li407.931 281.911 li408.673 283.165 li409.245 284.593 li409.702 286.139 li410.045 287.855 li410.16 289.744 li410.16 291.754 li409.995 293.838 li374.123 293.838 li370.504 310.067 li430.574 310.067 li431.512 304.909 li432.205 301.339 li432.723 297.934 li433.012 294.703 li433.184 291.646 li433.184 288.761 li433.071 286.046 li432.781 283.504 li432.319 281.079 li431.799 278.826 li431.104 276.686 li430.296 274.721 li429.37 272.871 li428.388 271.194 li427.287 269.574 li426.073 268.127 li424.799 266.796 li423.412 265.583 li422.025 264.426 li420.52 263.442 li419.019 262.518 li417.456 261.707 li415.837 261.014 li414.162 260.377 li412.487 259.859 li410.813 259.397 li409.138 258.993 li407.406 258.646 li405.73 258.415 li404.056 258.242 li402.383 258.126 li400.767 258.01 li399.149 258.01 li395.688 258.126 li392.458 258.357 li389.341 258.761 li386.397 259.337 li383.626 260.031 li381.027 260.898 li378.545 261.879 li376.235 262.918 li374.04 264.132 li372.018 265.403 li370.11 266.789 li368.378 268.291 li366.703 269.793 li365.2 271.411 li363.816 273.085 li362.488 274.76 li361.332 276.493 li360.235 278.283 li359.253 280.071 li358.33 281.861 li357.522 283.651 li356.771 285.44 li356.137 287.172 li355.559 288.963 li355.098 290.693 li354.637 292.364 li354.232 293.981 li353.944 295.54 li353.655 297.038 li353.424 298.423 li353.251 299.807 li353.079 301.018 li352.79 304.481 li352.674 307.825 li352.674 310.943 li352.907 313.944 li353.252 316.831 li353.771 319.487 li354.407 322.028 li355.216 324.454 li356.14 326.708 li357.18 328.845 li358.336 330.811 li359.606 332.717 li360.937 334.451 li362.439 336.07 li364 337.572 li365.618 338.959 li367.352 340.231 li369.084 341.386 li370.934 342.426 li372.838 343.407 li374.802 344.273 li376.766 345.025 li378.785 345.659 li380.806 346.294 li382.884 346.756 li384.96 347.217 li387.039 347.563 li389.172 347.852 li391.25 348.083 li393.269 348.199 li395.345 348.313 li397.366 348.313 li400.131 348.313 li402.666 348.256 li402.664 348.148 li402.664 348.256 li404.971 348.256 li407.047 348.141 li408.949 348.083 li410.738 347.91 li412.352 347.736 li413.856 347.563 li415.299 347.275 li416.629 346.985 li417.903 346.638 li419.175 346.175 li420.445 345.713 li421.659 345.193 li422.988 344.559 li424.361 343.842 li427.982 323.115 li425.364 324.61 li423.008 325.875 li420.596 326.909 li418.296 327.77 li415.997 328.519 li413.701 329.092 li411.402 329.494 li409.16 329.839 li406.978 330.012 li404.735 330.126 li402.608 330.126 li400.422 330.069 li398.295 329.954 li396.17 329.724 li394.096 329.435 li392.028 329.149 li390.31 328.749 li388.592 328.175 li386.99 327.431 li385.445 326.515 li384.013 325.427 li382.694 324.28 li381.434 322.963 li380.345 321.588 li379.371 320.156 li378.569 318.667 li377.882 317.122 li377.425 315.577 li377.083 314.091 li376.967 312.55 li377.025 311.124 li377.311 309.693 li377.205 309.671 licpf345.179 329.832 mo341.896 348.205 li321.103 348.205 li321.333 346.478 li321.563 344.75 li321.794 343.195 li322.024 341.755 li322.255 340.544 li322.427 339.507 li322.658 338.816 li322.888 338.414 li321.794 339.681 li320.411 340.948 li318.856 342.158 li317.071 343.31 li315.17 344.404 li313.096 345.441 li310.907 346.363 li308.661 347.226 li306.299 347.975 li303.88 348.609 li301.461 349.07 li299.042 349.414 li296.623 349.588 li294.261 349.646 li291.957 349.472 li289.71 349.127 li286.773 348.436 li284.181 347.514 li281.819 346.419 li279.746 345.209 li277.903 343.886 li276.347 342.388 li274.965 340.833 li273.813 339.105 li272.834 337.376 li272.027 335.591 li271.394 333.748 li270.875 331.847 li270.53 330.003 li270.299 328.103 li270.184 326.26 li270.126 324.474 li270.357 321.249 li270.875 318.197 li271.624 315.259 li272.719 312.494 li274.043 309.902 li275.541 307.482 li277.327 305.236 li279.228 303.105 li281.358 301.205 li283.605 299.534 li286.024 297.978 li288.559 296.654 li291.208 295.501 li293.915 294.58 li296.68 293.889 li299.503 293.37 li299.618 293.37 li300.021 293.313 li300.655 293.255 li301.519 293.14 li302.498 293.025 li303.649 292.91 li304.917 292.737 li306.299 292.622 li307.682 292.506 li309.064 292.333 li310.504 292.218 li311.887 292.103 li313.154 291.988 li314.363 291.931 li315.458 291.873 li316.379 291.873 li317.358 291.873 li318.338 291.873 li319.317 291.873 li320.354 291.931 li321.333 291.931 li322.255 291.988 li323.176 291.988 li324.098 291.988 li324.904 292.046 li325.653 292.046 li326.287 292.103 li326.862 292.103 li327.323 292.161 li327.669 292.161 li327.899 292.161 li327.957 292.161 li328.13 291.585 li328.533 290.202 li328.821 288.589 li328.821 287.149 li328.706 286.113 li328.533 285.134 li328.245 284.212 li327.842 283.348 li327.381 282.542 li326.805 281.793 li326.229 281.102 li325.538 280.411 li324.789 279.834 li324.04 279.374 li323.176 278.913 li322.312 278.51 li321.391 278.222 li320.411 277.991 li319.432 277.818 li318.453 277.703 li316.091 277.646 li313.614 277.703 li311.022 277.761 li308.373 277.934 li305.724 278.106 li303.074 278.337 li300.424 278.625 li297.832 278.913 li295.355 279.316 li292.994 279.662 li290.862 280.065 li288.847 280.526 li287.061 280.986 li285.563 281.447 li284.354 281.908 li283.49 282.427 li289.423 262.842 li291.15 262.036 li292.994 261.287 li294.837 260.653 li296.795 260.135 li298.812 259.732 li300.885 259.386 li303.074 259.099 li305.32 258.868 li307.624 258.753 li309.986 258.638 li312.405 258.58 li314.939 258.58 li317.589 258.58 li320.239 258.58 li323.003 258.638 li325.883 258.695 li328.245 258.926 li330.722 259.271 li333.313 259.905 li335.906 260.653 li338.498 261.633 li341.091 262.842 li343.51 264.225 li345.814 265.837 li347.944 267.681 li349.845 269.697 li351.458 271.943 li352.725 274.42 li353.646 277.127 li354.166 280.065 li354.224 283.175 li353.762 286.573 li345.179 329.832 licpef345.179 329.832 mo345.073 329.813 li341.806 348.097 li321.226 348.097 li321.44 346.492 li321.671 344.764 li321.901 343.211 li322.131 341.774 li322.361 340.564 li322.532 339.533 li322.757 338.86 li322.982 338.467 li322.806 338.343 li321.716 339.606 li320.341 340.865 li318.794 342.069 li317.015 343.218 li315.119 344.309 li313.051 345.343 li310.867 346.263 li308.625 347.124 li306.269 347.871 li303.856 348.503 li301.444 348.963 li299.03 349.306 li296.617 349.48 li294.263 349.538 li291.97 349.365 li289.731 349.021 li286.804 348.332 li284.221 347.414 li281.869 346.324 li279.805 345.119 li277.972 343.803 li276.425 342.313 li275.05 340.767 li273.905 339.048 li272.93 337.327 li272.128 335.551 li271.497 333.716 li270.981 331.823 li270.637 329.987 li270.407 328.093 li270.292 326.255 li270.235 324.476 li270.464 321.262 li270.981 318.219 li271.727 315.293 li272.817 312.538 li274.138 309.955 li275.629 307.544 li277.409 305.305 li279.304 303.182 li281.427 301.288 li283.666 299.623 li286.079 298.072 li288.605 296.751 li291.247 295.602 li293.946 294.683 li296.703 293.994 li299.513 293.478 li299.618 293.478 li299.626 293.478 li300.033 293.42 li300.665 293.362 li300.666 293.362 li301.532 293.247 li302.509 293.132 li303.66 293.017 li303.662 293.017 li304.929 292.844 li306.308 292.729 li307.693 292.614 li309.075 292.441 li310.513 292.326 li311.896 292.211 li313.161 292.096 li314.368 292.039 li315.461 291.981 li316.379 291.981 li317.358 291.981 li318.338 291.981 li319.314 291.981 li320.348 292.038 li320.351 292.039 li321.33 292.039 li322.248 292.096 li322.251 292.096 li323.176 292.096 li324.094 292.096 li324.897 292.154 li324.9 292.154 li325.648 292.154 li326.277 292.211 li326.282 292.211 li326.855 292.211 li327.31 292.268 li327.316 292.269 li327.669 292.269 li327.899 292.269 li327.957 292.269 li328.037 292.269 li328.233 291.616 li328.638 290.227 li328.929 288.599 li328.929 287.143 li328.813 286.101 li328.813 286.097 li328.639 285.115 li328.638 285.108 li328.348 284.18 li328.346 284.173 li327.94 283.302 li327.938 283.298 li327.475 282.488 li327.471 282.482 li326.889 281.725 li326.312 281.032 li326.309 281.029 li325.609 280.329 li324.85 279.745 li324.097 279.282 li324.094 279.28 li323.227 278.818 li323.224 278.816 li322.358 278.412 li322.351 278.409 li321.423 278.119 li321.419 278.117 li320.436 277.886 li320.433 277.885 li319.451 277.712 li319.448 277.711 li318.466 277.596 li318.461 277.595 li316.091 277.537 li313.612 277.595 li311.018 277.653 li308.366 277.826 li305.715 277.999 li303.064 278.229 li300.413 278.518 li297.817 278.806 li295.34 279.209 li292.976 279.555 li290.84 279.959 li288.821 280.421 li287.031 280.882 li285.528 281.345 li284.307 281.81 li283.674 282.19 li289.512 262.92 li291.193 262.135 li293.032 261.388 li294.868 260.757 li296.82 260.24 li298.831 259.838 li300.901 259.493 li303.086 259.206 li305.329 258.976 li307.629 258.861 li309.99 258.746 li312.407 258.688 li314.939 258.688 li317.589 258.688 li320.238 258.688 li323.001 258.746 li325.877 258.803 li328.233 259.033 li330.701 259.377 li333.286 260.009 li335.872 260.756 li338.456 261.732 li341.041 262.938 li343.452 264.316 li345.747 265.923 li347.87 267.759 li349.761 269.766 li351.366 272 li352.625 274.462 li353.542 277.154 li354.058 280.075 li354.115 283.169 li353.655 286.556 li345.073 329.811 li345.073 329.813 li345.179 329.832 li345.285 329.853 li353.868 286.591 li354.332 283.182 li354.274 280.055 li353.751 277.1 li352.825 274.378 li351.55 271.887 li349.928 269.628 li348.019 267.603 li345.88 265.752 li343.568 264.134 li341.14 262.746 li338.54 261.533 li335.94 260.551 li333.341 259.8 li330.742 259.164 li328.258 258.818 li325.89 258.587 li323.006 258.53 li320.24 258.472 li317.589 258.472 li314.939 258.472 li312.404 258.472 li309.982 258.53 li307.619 258.645 li305.312 258.76 li303.061 258.991 li300.869 259.279 li298.792 259.626 li296.771 260.03 li294.805 260.55 li292.955 261.186 li291.107 261.937 li289.333 262.765 li283.386 282.395 li283.545 282.519 li284.401 282.005 li285.599 281.549 li287.09 281.09 li288.872 280.631 li290.885 280.171 li293.011 279.768 li295.372 279.423 li297.847 279.02 li300.436 278.732 li303.084 278.444 li305.732 278.214 li308.38 278.041 li311.027 277.869 li313.617 277.811 li316.091 277.754 li318.445 277.811 li319.416 277.925 li320.389 278.097 li321.362 278.326 li322.273 278.611 li323.128 279.01 li323.986 279.467 li324.728 279.923 li325.467 280.492 li326.149 281.174 li326.721 281.861 li327.291 282.601 li327.746 283.398 li328.144 284.251 li328.428 285.159 li328.599 286.128 li328.713 287.155 li328.713 288.58 li328.427 290.177 li328.026 291.555 li327.854 292.13 li327.957 292.161 li327.957 292.053 li327.899 292.053 li327.669 292.053 li327.33 292.053 li326.876 291.996 li326.869 291.995 li326.292 291.995 li325.663 291.938 li325.658 291.938 li324.908 291.938 li324.105 291.88 li324.101 291.88 li323.176 291.88 li322.258 291.88 li321.34 291.823 li321.336 291.823 li320.357 291.823 li319.323 291.765 li319.32 291.765 li318.338 291.765 li317.358 291.765 li316.379 291.765 li315.458 291.765 li315.455 291.765 li314.358 291.823 li313.149 291.88 li313.147 291.88 li311.877 291.995 li310.495 292.111 li309.053 292.226 li307.67 292.399 li306.29 292.514 li304.905 292.629 li303.637 292.802 li302.487 292.917 li302.486 292.918 li301.506 293.032 li301.505 293.033 li300.643 293.147 li300.011 293.205 li300.009 293.206 li299.611 293.262 li299.503 293.262 li299.493 293.262 li296.657 293.783 li293.884 294.476 li291.169 295.401 li288.512 296.556 li285.97 297.884 li283.543 299.445 li281.29 301.121 li279.151 303.028 li277.244 305.166 li275.453 307.42 li273.949 309.849 li272.62 312.449 li271.521 315.226 li270.77 318.174 li270.25 321.236 li270.018 324.472 li270.076 326.265 li270.192 328.113 li270.423 330.02 li270.77 331.871 li271.29 333.779 li271.927 335.631 li272.738 337.425 li273.721 339.161 li274.879 340.9 li276.269 342.463 li277.834 343.969 li279.687 345.3 li281.769 346.515 li284.14 347.614 li286.742 348.54 li289.69 349.234 li291.945 349.58 li294.258 349.754 li296.628 349.696 li299.054 349.521 li301.479 349.176 li303.904 348.714 li306.329 348.079 li308.697 347.328 li310.948 346.463 li313.141 345.539 li315.221 344.499 li317.127 343.402 li318.919 342.246 li320.481 341.03 li321.872 339.756 li322.97 338.484 li322.888 338.414 li322.794 338.36 li322.564 338.762 li322.559 338.771 li322.325 339.473 li322.322 339.481 li322.148 340.526 li321.918 341.736 li321.687 343.178 li321.457 344.734 li321.226 346.464 li320.979 348.313 li341.986 348.313 li345.285 329.851 li345.179 329.832 li345.285 329.853 li345.179 329.832 licpf325.308 308.173 mo325.25 307.712 li324.904 307.367 li324.328 307.08 li323.579 306.906 li322.601 306.792 li321.563 306.734 li320.354 306.734 li319.087 306.734 li317.762 306.849 li316.379 307.022 li315.055 307.195 li313.729 307.425 li312.462 307.656 li311.253 307.886 li310.216 308.173 li309.294 308.462 li308.776 308.577 li308.085 308.807 li307.221 309.095 li306.299 309.499 li305.32 309.902 li304.226 310.42 li303.131 311.054 li302.037 311.687 li300.942 312.494 li299.906 313.358 li298.927 314.279 li298.063 315.316 li297.256 316.41 li296.68 317.621 li296.22 318.945 li295.931 320.328 li295.816 323.15 li296.22 325.338 li296.911 327.066 li297.947 328.333 li299.214 329.198 li300.54 329.773 li301.979 330.062 li303.362 330.12 li305.896 330.062 li308.143 329.832 li310.274 329.428 li312.175 328.91 li313.903 328.333 li315.458 327.642 li316.84 326.835 li318.05 325.972 li319.144 325.108 li320.065 324.128 li320.872 323.207 li321.563 322.228 li322.14 321.249 li322.601 320.328 li322.946 319.406 li323.234 318.542 li323.522 317.275 li323.81 315.949 li324.098 314.568 li324.386 313.127 li324.616 311.745 li324.847 310.478 li325.077 309.268 li325.308 308.173 licp0.93 0.29 0 0.05 cmykef171.343 348.205 mo148.821 348.205 li167.771 239.745 li206.939 239.745 li210.798 304.314 li237.468 239.745 li278.133 239.745 li259.125 348.205 li236.604 348.205 li250.831 266.989 li249.967 266.989 li216.443 348.205 li191.214 348.205 li190.984 344.807 li190.466 335.764 li189.717 322.976 li188.854 308.289 li187.989 293.485 li187.24 280.411 li186.722 270.964 li186.491 266.989 li186.434 266.989 li186.204 266.989 li185.973 266.989 li185.685 266.989 li185.455 266.989 li185.339 266.989 li185.571 266.989 li171.343 348.205 licp0 0 0 0 cmykef171.343 348.205 mo171.343 348.097 li148.95 348.097 li167.862 239.853 li206.838 239.853 li210.691 304.32 li210.898 304.355 li237.54 239.853 li278.004 239.853 li259.034 348.097 li236.733 348.097 li250.959 266.881 li249.967 266.881 li249.895 266.881 li216.371 348.097 li191.315 348.097 li191.092 344.8 li190.574 335.758 li189.825 322.97 li188.962 308.282 li188.097 293.479 li187.348 280.404 li186.83 270.958 li186.593 266.881 li186.434 266.881 li186.204 266.881 li185.973 266.881 li185.685 266.881 li185.455 266.881 li185.339 266.881 li185.339 267.097 li185.442 267.097 li171.236 348.186 li171.343 348.205 li171.343 348.097 li171.343 348.205 li171.449 348.223 li185.699 266.881 li185.339 266.881 li185.339 267.097 li185.455 267.097 li185.685 267.097 li185.973 267.097 li186.204 267.097 li186.434 267.097 li186.491 267.097 li186.491 266.989 li186.383 266.995 li186.614 270.97 li187.132 280.417 li187.881 293.492 li188.746 308.295 li189.609 322.982 li190.358 335.77 li190.876 344.813 li191.113 348.313 li216.516 348.313 li250.039 267.097 li250.702 267.097 li236.476 348.313 li259.216 348.313 li278.261 239.637 li237.396 239.637 li210.878 303.838 li207.041 239.637 li167.681 239.637 li148.693 348.313 li171.433 348.313 li171.449 348.223 li171.343 348.205 licpf547.644 348.205 mo571.086 348.205 li579.092 301.376 li579.439 299.534 li579.842 297.748 li580.302 295.962 li580.878 294.292 li581.513 292.622 li582.318 291.066 li583.297 289.569 li584.393 288.129 li585.717 286.862 li587.216 285.71 li589 284.673 li590.958 283.751 li593.263 283.002 li595.854 282.427 li598.734 282.081 li601.959 281.851 li602.248 281.851 li602.594 281.908 li603.055 281.966 li603.516 281.966 li603.919 282.023 li604.264 282.081 li604.494 282.138 li604.609 282.138 li604.667 281.793 li604.896 280.813 li605.186 279.316 li605.646 277.415 li606.224 275.284 li606.856 272.98 li607.604 270.676 li608.469 268.487 li609.102 266.874 li609.852 265.319 li610.6 263.764 li611.406 262.324 li612.097 261.114 li612.674 260.135 li613.076 259.501 li613.192 259.271 li613.076 259.271 li612.789 259.156 li612.386 259.099 li611.81 258.983 li611.232 258.868 li610.542 258.811 li609.909 258.695 li609.333 258.695 li606.799 258.868 li604.494 259.156 li602.362 259.617 li600.404 260.135 li598.561 260.827 li596.891 261.575 li595.278 262.497 li593.839 263.476 li592.398 264.57 li591.073 265.78 li589.864 267.047 li588.597 268.43 li587.388 269.87 li586.234 271.425 li585.025 273.038 li583.815 274.708 li586.523 259.905 li563.081 259.617 li547.644 348.205 licpef547.644 348.205 mo547.644 348.313 li571.177 348.313 li579.198 301.397 li579.545 299.556 li579.947 297.773 li580.405 295.993 li580.979 294.329 li581.611 292.666 li582.412 291.121 li583.385 289.631 li584.473 288.201 li585.787 286.944 li587.276 285.8 li589.05 284.768 li590.998 283.852 li593.291 283.107 li595.873 282.533 li598.745 282.189 li601.963 281.959 li602.239 281.959 li602.576 282.014 li602.578 282.015 li603.041 282.073 li603.048 282.074 li603.508 282.074 li603.904 282.13 li604.242 282.187 li604.468 282.243 li604.481 282.246 li604.609 282.246 li604.701 282.246 li604.773 281.814 li605.002 280.838 li605.002 280.835 li605.291 279.34 li605.751 277.442 li606.328 275.312 li606.96 273.011 li607.706 270.713 li608.569 268.527 li609.201 266.917 li609.949 265.366 li610.696 263.814 li611.5 262.376 li612.19 261.168 li612.097 261.114 li612.19 261.169 li612.766 260.191 li613.167 259.559 li613.17 259.555 li613.289 259.319 li613.368 259.163 li613.097 259.163 li612.829 259.055 li612.817 259.051 li612.404 258.992 li611.831 258.877 li611.254 258.762 li611.247 258.761 li610.556 258.703 li609.929 258.589 li609.919 258.587 li609.333 258.587 li609.329 258.587 li606.788 258.761 li604.476 259.049 li602.337 259.512 li600.371 260.032 li598.519 260.727 li596.841 261.479 li595.221 262.406 li593.776 263.388 li592.329 264.487 li590.997 265.703 li589.785 266.974 li588.515 268.358 li587.303 269.802 li586.148 271.36 li584.938 272.975 li584.007 274.259 li586.653 259.798 li562.99 259.508 li547.515 348.313 li547.644 348.313 li547.644 348.205 li547.75 348.223 li563.172 259.726 li586.394 260.011 li583.709 274.689 li583.903 274.771 li585.113 273.101 li585.025 273.038 li585.112 273.102 li586.321 271.49 li587.472 269.937 li588.678 268.501 li589.944 267.12 li589.864 267.047 li589.942 267.122 li591.149 265.857 li592.468 264.653 li593.902 263.564 li595.336 262.589 li596.939 261.672 li598.602 260.927 li600.437 260.238 li602.388 259.722 li604.512 259.262 li606.809 258.976 li609.337 258.803 li609.899 258.803 li610.523 258.917 li610.528 258.918 li611.217 258.975 li611.788 259.089 li612.365 259.205 li612.367 259.205 li612.761 259.261 li613.036 259.371 li613.055 259.378 li613.192 259.378 li613.192 259.271 li613.096 259.222 li612.982 259.448 li612.583 260.077 li612.581 260.079 li612.002 261.061 li611.312 262.27 li610.504 263.714 li609.754 265.272 li609.002 266.831 li608.368 268.448 li607.503 270.64 li606.753 272.95 li606.119 275.256 li605.542 277.389 li605.08 279.293 li604.791 280.791 li604.562 281.768 li604.561 281.771 li604.518 282.03 li604.507 282.03 li604.29 281.976 li604.285 281.975 li603.937 281.916 li603.531 281.859 li603.523 281.858 li603.061 281.858 li602.609 281.801 li602.266 281.744 li602.257 281.743 li601.959 281.743 li601.955 281.743 li598.724 281.974 li595.836 282.32 li593.234 282.898 li590.918 283.65 li588.95 284.577 li587.155 285.62 li585.647 286.78 li584.312 288.057 li583.209 289.506 li582.225 291.012 li581.414 292.577 li580.776 294.255 li580.198 295.932 li579.737 297.722 li579.334 299.512 li578.985 301.358 li570.995 348.097 li547.644 348.097 li547.644 348.205 li547.75 348.223 li547.644 348.205 licpf649.076 258.695 mo651.669 258.753 li654.205 258.926 li656.682 259.156 li659.099 259.501 li661.404 259.962 li663.65 260.538 li665.781 261.172 li667.912 261.921 li669.928 262.785 li671.828 263.706 li673.729 264.686 li675.458 265.78 li677.186 266.989 li678.799 268.257 li680.295 269.582 li681.736 271.021 li683.119 272.519 li684.386 274.132 li685.537 275.745 li686.631 277.473 li687.669 279.259 li688.533 281.159 li689.396 283.06 li690.088 285.076 li690.722 287.092 li691.24 289.223 li691.7 291.412 li692.047 293.659 li692.276 295.905 li692.393 298.267 li692.45 300.686 li692.393 303.105 li692.219 306.042 li691.873 308.865 li691.471 311.572 li690.951 314.222 li690.377 316.756 li689.627 319.175 li688.82 321.537 li687.956 323.784 li686.92 325.914 li685.883 327.988 li684.674 329.947 li683.464 331.791 li682.139 333.576 li680.698 335.246 li679.201 336.8 li677.646 338.298 li676.033 339.681 li674.362 341.005 li672.578 342.214 li670.792 343.31 li668.891 344.346 li666.933 345.268 li664.975 346.132 li662.9 346.88 li660.826 347.572 li658.639 348.148 li656.45 348.609 li654.261 349.011 li651.956 349.3 li649.653 349.531 li647.291 349.646 li644.93 349.703 li642.567 349.646 li640.206 349.531 li637.959 349.3 li635.714 348.955 li633.525 348.552 li631.336 348.091 li629.263 347.514 li627.247 346.824 li625.229 346.074 li623.33 345.209 li621.486 344.289 li619.7 343.252 li617.974 342.158 li616.359 340.948 li614.747 339.681 li613.25 338.298 li611.867 336.859 li610.484 335.303 li609.275 333.691 li608.065 331.962 li607.028 330.177 li605.992 328.276 li605.128 326.318 li604.322 324.302 li603.63 322.17 li602.997 319.924 li602.479 317.621 li602.075 315.259 li601.787 312.781 li601.614 310.248 li601.558 307.597 li601.614 304.89 li601.787 302.126 li602.075 299.476 li602.479 296.884 li602.997 294.407 li603.573 291.988 li604.264 289.626 li605.013 287.38 li605.877 285.191 li606.799 283.06 li607.834 281.044 li608.987 279.144 li610.197 277.242 li611.464 275.515 li612.847 273.786 li614.286 272.231 li615.784 270.676 li617.396 269.236 li619.067 267.911 li620.795 266.644 li622.581 265.492 li624.481 264.455 li626.44 263.418 li628.456 262.554 li630.472 261.747 li632.604 261.057 li634.792 260.423 li637.039 259.905 li639.342 259.443 li641.705 259.156 li644.123 258.868 li646.6 258.753 li649.076 258.695 licpef649.076 258.695 mo649.074 258.803 li651.664 258.861 li654.198 259.034 li656.669 259.263 li659.08 259.608 li661.38 260.068 li663.621 260.642 li665.748 261.275 li667.873 262.022 li669.883 262.883 li671.779 263.802 li673.676 264.779 li675.398 265.87 li677.121 267.076 li678.73 268.34 li680.221 269.66 li681.658 271.096 li683.037 272.589 li684.299 274.196 li685.447 275.805 li686.539 277.529 li687.573 279.308 li688.435 281.204 li689.296 283.1 li689.986 285.111 li690.088 285.076 li689.985 285.109 li690.618 287.121 li691.135 289.249 li691.24 289.223 li691.135 289.245 li691.594 291.431 li691.94 293.672 li692.169 295.913 li692.285 298.272 li692.393 298.267 li692.285 298.27 li692.342 300.685 li692.285 303.1 li692.111 306.033 li691.766 308.852 li691.873 308.865 li691.766 308.849 li691.364 311.554 li690.845 314.201 li690.951 314.222 li690.846 314.198 li690.273 316.728 li689.524 319.142 li688.719 321.5 li687.857 323.74 li686.823 325.866 li685.788 327.935 li684.583 329.888 li683.375 331.73 li682.054 333.508 li680.618 335.173 li679.124 336.724 li677.574 338.219 li675.963 339.599 li676.033 339.681 li675.966 339.596 li674.298 340.918 li672.52 342.123 li670.737 343.217 li668.841 344.25 li666.887 345.17 li664.935 346.032 li662.864 346.779 li660.796 347.468 li658.613 348.043 li656.428 348.503 li654.244 348.904 li651.943 349.193 li649.646 349.423 li647.286 349.538 li644.93 349.595 li642.57 349.538 li640.214 349.423 li637.973 349.193 li635.73 348.848 li633.545 348.446 li631.361 347.986 li629.294 347.411 li627.282 346.722 li625.27 345.974 li623.375 345.111 li621.538 344.193 li619.756 343.16 li618.035 342.069 li616.424 340.861 li614.817 339.599 li613.326 338.221 li611.947 336.786 li610.568 335.235 li609.363 333.628 li608.156 331.904 li607.122 330.124 li606.089 328.228 li605.227 326.276 li604.424 324.265 li603.733 322.14 li603.102 319.898 li602.584 317.6 li602.182 315.244 li601.895 312.77 li601.722 310.243 li601.666 307.597 li601.722 304.895 li601.895 302.135 li602.182 299.49 li602.585 296.904 li603.103 294.429 li602.997 294.407 li603.102 294.432 li603.678 292.016 li604.367 289.658 li605.114 287.417 li605.976 285.234 li606.896 283.107 li607.928 281.097 li609.078 279.202 li610.286 277.303 li611.55 275.58 li612.929 273.856 li614.365 272.305 li614.286 272.231 li614.364 272.306 li615.859 270.754 li617.466 269.319 li619.133 267.997 li620.856 266.733 li622.636 265.585 li624.533 264.55 li626.487 263.516 li628.499 262.653 li630.508 261.849 li632.638 261.159 li634.819 260.527 li637.063 260.01 li639.359 259.55 li641.718 259.263 li644.132 258.976 li646.605 258.861 li649.079 258.803 li649.076 258.695 li649.074 258.803 li649.076 258.695 li649.074 258.587 li646.597 258.645 li644.114 258.76 li641.692 259.048 li639.325 259.336 li637.018 259.799 li634.765 260.318 li632.574 260.953 li630.435 261.645 li628.416 262.454 li626.394 263.321 li624.431 264.36 li622.526 265.399 li620.733 266.555 li619.002 267.825 li617.327 269.153 li615.709 270.598 li614.207 272.158 li612.765 273.716 li611.378 275.449 li610.108 277.181 li608.895 279.087 li607.74 280.991 li606.701 283.014 li605.777 285.149 li604.911 287.343 li604.161 289.594 li603.469 291.96 li602.892 294.383 li602.372 296.865 li601.968 299.462 li601.679 302.117 li601.506 304.885 li601.45 307.597 li601.506 310.252 li601.68 312.791 li601.968 315.274 li602.372 317.641 li602.892 319.951 li603.526 322.201 li604.221 324.34 li605.028 326.36 li605.895 328.323 li606.934 330.23 li607.974 332.021 li609.188 333.755 li610.401 335.372 li611.788 336.932 li613.174 338.375 li614.677 339.763 li616.293 341.033 li617.912 342.247 li619.644 343.345 li621.435 344.384 li623.282 345.306 li625.188 346.174 li627.209 346.925 li629.231 347.617 li631.31 348.196 li633.503 348.658 li635.694 349.061 li637.945 349.407 li640.198 349.638 li642.562 349.754 li644.93 349.811 li647.294 349.754 li649.661 349.638 li651.967 349.408 li654.277 349.118 li656.47 348.715 li658.664 348.253 li660.857 347.675 li662.935 346.983 li665.015 346.233 li666.976 345.367 li668.94 344.442 li670.847 343.403 li672.637 342.305 li674.426 341.092 li676.102 339.765 li677.719 338.378 li679.277 336.877 li680.778 335.319 li682.223 333.643 li683.553 331.852 li684.765 330.005 li685.977 328.04 li687.016 325.962 li688.055 323.826 li688.922 321.574 li689.73 319.208 li690.481 316.784 li691.057 314.244 li691.577 311.59 li691.98 308.879 li692.326 306.052 li692.5 303.111 li692.558 300.686 li692.5 298.262 li692.384 295.897 li692.154 293.646 li691.806 291.392 li691.345 289.199 li690.826 287.063 li690.191 285.044 li689.497 283.02 li688.632 281.115 li687.765 279.209 li686.723 277.416 li685.627 275.685 li684.472 274.067 li683.201 272.449 li681.814 270.947 li680.368 269.502 li678.868 268.174 li677.25 266.903 li675.518 265.69 li673.783 264.592 li671.878 263.61 li669.972 262.686 li667.951 261.82 li665.815 261.069 li663.679 260.433 li661.428 259.857 li659.117 259.395 li656.694 259.048 li654.215 258.818 li651.674 258.645 li649.076 258.587 li649.074 258.587 li649.076 258.695 licpf683.521 343.771 mo690.318 343.771 li690.318 344.634 li687.669 344.634 li687.669 350.279 li686.172 350.279 li686.172 344.634 li683.521 344.634 li683.521 343.771 licpef683.521 343.771 mo683.521 343.879 li690.21 343.879 li690.21 344.526 li687.561 344.526 li687.561 350.171 li686.28 350.171 li686.28 344.526 li683.629 344.526 li683.629 343.771 li683.521 343.771 li683.521 343.879 li683.521 343.771 li683.413 343.771 li683.413 344.634 li683.413 344.742 li686.064 344.742 li686.064 350.387 li687.777 350.387 li687.777 344.742 li690.426 344.742 li690.426 343.771 li690.426 343.663 li683.413 343.663 li683.413 343.771 li683.521 343.771 licpf691.183 343.771 mo693.256 343.771 li695.675 348.781 li698.037 343.771 li700.111 343.771 li700.111 350.279 li698.612 350.279 li698.612 345.268 li696.252 350.279 li695.042 350.279 li692.68 345.268 li692.68 350.279 li691.183 350.279 li691.183 343.771 licpef691.183 343.771 mo691.183 343.879 li693.188 343.879 li695.676 349.031 li698.106 343.879 li700.003 343.879 li700.003 350.171 li698.72 350.171 li698.72 345.268 li698.515 345.222 li696.183 350.171 li695.11 350.171 li692.777 345.222 li692.572 345.268 li692.572 350.171 li691.291 350.171 li691.291 343.771 li691.183 343.771 li691.183 343.879 li691.183 343.771 li691.075 343.771 li691.075 350.387 li692.788 350.387 li692.788 345.75 li694.973 350.387 li696.252 350.387 li696.32 350.387 li698.504 345.751 li698.504 350.387 li700.219 350.387 li700.219 343.663 li697.969 343.663 li695.674 348.53 li693.324 343.663 li691.075 343.663 li691.075 343.771 li691.183 343.771 licpf630.703 301.031 mo630.356 304.257 li630.185 307.252 li630.185 309.959 li630.356 312.494 li630.703 314.798 li631.221 316.814 li631.854 318.658 li632.661 320.328 li633.641 321.767 li634.734 322.976 li635.943 324.013 li637.269 324.82 li638.709 325.455 li640.322 325.914 li641.992 326.144 li643.778 326.26 li645.736 326.203 li647.638 325.972 li649.424 325.569 li651.15 324.935 li652.763 324.128 li654.318 323.092 li655.758 321.882 li657.141 320.443 li658.35 318.83 li659.502 316.987 li660.597 314.913 li661.519 312.667 li662.383 310.19 li663.131 307.482 li663.708 304.544 li664.225 301.376 li664.514 298.9 li664.686 296.539 li664.686 294.234 li664.514 292.046 li664.225 290.03 li663.766 288.071 li663.131 286.286 li662.383 284.615 li661.461 283.118 li660.424 281.851 li659.214 280.698 li657.889 279.777 li656.393 279.028 li654.779 278.567 li653.052 278.279 li651.15 278.279 li648.789 278.452 li646.6 278.855 li644.584 279.546 li642.683 280.411 li640.955 281.563 li639.342 282.83 li637.901 284.27 li636.635 285.882 li635.425 287.61 li634.389 289.454 li633.467 291.297 li632.719 293.255 li632.026 295.213 li631.451 297.171 li631.049 299.13 li630.703 301.031 licp0 1 0.91 0 cmykef%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 12.0.0%%For: (wdc) (rock)%%Title: (FreeVector-Maestro.eps)%%CreationDate: 5/4/11 2:17 PM%AI9_DataStream%Gb!R&ks??4OtM&fJ9R([ChuA>0rkXD+;!15Ch&+\;$[3."i?F)]@ZjuT)HYF&NL+'bj+V;GG!X%[l8\FjUdgt;at<CcE?le:Ck%7%8#uUg=K4g^T/'&SH"CT"B:j>(FG<`n*nST@1/o[*-Uh'5a_&;9IaU4sm0rjYc>^;En+?q'V:sY\Xjc!^ee.kW<VtG5p%n]gXnGrc%?Sf$Jc2@H.\(B<s%o-<'R]/fmddR+ugECu4TAsR82c&2Ao7P<uIG?j84J=tMnV?*cs1I)(NMqcb@SE=qHh$Y%gA,^;5N)qTeGma@%Ia^=B%S)0&W7sQ8HB63,2N9Q(gGs$U:6ipKF7dLVZZFb[mu=+r2.)5i*8RYm%J-u/B)m\aOWactA!-a\)_W4>s0ER&s*_/oTC?o"%95>D(Za8+K'8cYC7("SD^F!,J^81`gF:o;Cl^XL<>,)SRA!Y&UqRSHTU+"Ft^M8%_*%i2.8Nk>(Jng4MH=EVC<^`3<p`WG6=?c8U%T^u6oo<0I/qKDUTe/o_>NH_sNRJ=d0[+kOd1rHtl.U>V8rqPWgf,;4am>d!s$(so)IaLCDoG$:72L6rKGt9gl<sn<%#"P3r/`;*H%*:lOW7J`pKk9o#d^H5PkWAO,0XE1u)J&e*d/@1ee,O,h;L1W&qP?L6cX&E\f>/A-lQ)F\TgNnd2C7a7T[J=Ra4mJUk@5="A::QF?%qfL1JnE[MRC8LjG6`??fIk1D'kpm3i2!UV%>&S5sanN1Z^7HaQ^Y#BKf1uq.qBqX=g*a5-[-US&Dta#tni-;!s+NX$5Eg*Vn)%LG%WAMj>eN*5as&+='l(-:qSdtV[B:GfSrL(496%?XJgM)Y-BhrqJ%u0gnMTN%Zq1?u\mU%!NlE0L-]drF')dpo1eR%YCm'LJ^bphS#%g-+nb3e+;G[gb)%C9*!YiGi_<hs\,TNW7+C;di-mrdRBV48cqZX&G_aA4p+a@S='orl;E5V(Zb<rqJ^gp9dr)f0(%ZcAoO(Bamc3%]5(";p(&(:4[/*)n+g&^^XlSRJ"Q*%HemY;?]>)ldi+1Vm9XH"n):3do&n^t!g8KPaN!H?l!Kufs"*B06X$Am[J-f>fi;$^RLZs-%#IHjC5C50Z:X5VQe96mWB-$F.k]h_QmTsB@pKFJs6&fkc-.ia1?fG_Y/4hNsC&XY?A'"K^(U)tXs7h4=rW;=CqR]69b_,)VrI:C/%0=@XE\^.9lI(`U.n?R2bW@c=Vf^4jSmar^\mF@/\n%\(a2`"M24eM7*^k]\hQS&'m-UId4A[N>^cX3I$!MLUlbWook31+t6'Nq$,%4eQEOJ%:1g,2^'uNcCuI,K\En:@.>n>c)/-9>d/(m;&U_Za8p8Z$$!Y$>rdb+k\3^^]j]n;\_gn-eUJXk5S;G._5Ud;RuMO.RhV5%W&6C.rIOp<AeVq%gRq#On@/>piPkL`dW;;bEOe"%+"+a#qXYmcj$@nhI+0=5]7?W8_4^K$9bm[;o`q>Ia5,UgTQ;SoP1kO_U5\t"%rYbYD2LrQfh)QL)s/S!o0%9gPV:nL8(b>GaX*8I)!Zt`HmZdF2'[rW^a+!p#PWJ\I[aX5O&;Q'43o<RW_k/@lQ<s@\Nq'K+H<HTP%nb)bG?_)i8N6R[dDjp\*iooDQ7t7XdmC)_8Sa.j)5L/?)H)%k%K)\'Cec0RI@S;2VHZ1BZrMBFADB1>=>>SNHo8%NoG<,XEh\YXc%q&e(Ns$,kuiShQN#>=*,o/7HZ]']OPH1>@8euL2nCCf9D>.r,"qY,,Ep[<Sjo8W`+N;pE=,5l]rK,3Ta^OO3VpA6'IT%fgROglL:%1TJQ8rk3r+k6uj-Z@@!-7`X*uTGIJ"Nlkm44YFn<:STu=FH;Hc,HY4mrrI/4);]92I*h<NZ-g<ln<8+nGB`#A1MRql*qWh,8+g6U%a/oGd4BuMn"bdbiM5.>`[+jh.CQ4e]2YF70fPD&nYL?OC/%OJS[sG8,_m3^%4m5FMo`E$HCrUI3B@%N>#(Lc1H_(0Re^b8BUXjn'%f,ahWQon<)b;shT+*,l>>Gk!SXeSX.VgemeiO%"oqL-!5)b>h80qkr)_1?Aj\oc@=rjpJ"iE:YPTiA)EeW![5#'"V5Xh0]S2J\<D%;8;h%2'aAhs&\C#pH09S/%+fLO0cLQ5#,,QF<op0NQnI])RN7pB.[:NmD!F,KC2$BkUMREEim/k^Y]qLeClllPJ?9PQB[`%W?p&q%>ulG+H8Oj<(&Z+X")Ea_4AYRl9?'7&r`D#@^`Ub2%a9?Md5gE^T@Ef7iR_Jp9NtYG/Ctc\nf62m_rQtPr,p_3s6?5;W/H)9(?=2L%.-TWJcLBI<#s!5'4jp_UNIC?^HuqhX?N!UFTrN:e3hoF\]-ldTQ7q7Knup'q:2<+)U&'N5cI;!3^6iheXPiOB51*c5Il\L^6*8Hp%IpZ4E:3-M;;oru'gN>PXFT#abKCd:(DQi)89r=2'J)"l_?S!(8P,NQf-LK%JPl>$\_&46'_lH"8pUY"EE+%i-#;)GjKE13?pM4U3%MZM/Gia88MLfW8ZX4KCL:K\k"-aYp\h:#,97#^R!mb!]?d@gN?j%LkiRs':#coIKSFL;?,qkLD\a5O<`m<_a\\u.[?rfE1U\>n)^%XerA8[^fQ'9rdIYB,7i,P?2rlcTcgWkjEKW_noH#kLJSWb2DO+n^>hLNNJ0Z$ZgOD\ukhu[X%adh:u1;H2I7(MsSR6p6WBE<X.aS%@UhQH;9m0aFt8H)c(E7UL$86Qo!eJoQ%o`[_j03PjMB(,b4>7cJM"5d>!73*H@+a^f%F?p5'l"%f'@O@-CWXPpdjcec&LDQimZ@R%oB4`Um*jr\j.sFQCi&O"NoqLR>NZsMm.U>,T=ql*B4dWgdFS<Hb&/$G@I`dYk:_h.[JIMY)\'tBI9h-nCZFa'd]e0UhcuO3hjAb:%E&]Ys`7k"VrRH2bnE]s\[C=T]Y]RC$4Bag!5/h$mpi34bNjjMA4FD2D^!oDT*j0oQqUVR:megs?*c0\8>qCK^DX9"43gDmVBH<Vh%bZ6skk1f4hr:Sk!EV=hV@:M4/1V`d,iQ(l=g>04WCRt(oO5Fg13aQ^5>JKZ+GCKL0qcI$^UBdo1d(TBfWV^Pu@'qrjjR2#8rl]Rs%HhYg(o`*djo%%eA1M`<6I9gQW[dTg35C0U4TK)c<W*9rHL50JQd,'`EIkAXB`ccE=pl<Erh!GgEe*(2=]Cqmdo,GGh1q1!A=mZqc%-Sg:7gTrDGRh'GN?XKc&+jJ3mB63BYZ.Aq5s7"j\kG;_helT$Jn`_S6kcq[J$WHWL]Jm#i6)Vc(^[@LY?(13l[\NW`XV]4eXbV*Y%DTmSKTG<)DI,eD?aNSJ-IrdF+TB@;74OfuE^0c@B`RbmVIn4.ma(1C"mY>KTn`0:rV"s*8Ok0.'dDP'uT.dtL9Y(^4IBQ[mD1r>!%DRg7)oc8kO*kak5:<$CbA$u-'8_r_AT4I)Jq:TZP21Nn1%j*q6^#!M[]tJ1ShnFR7XSMg7A+-ojC@'_n^M)s[.F!=:q"jLrI<4ml%rPO[DkDhs9C<)Y)[pQkTZ<&,1ZP3&;h`T\"5@Ae8[B4fIO)HVbQPi-71UHE)j8!o"fnZ\hQ,2DRD79)rr=bcr1@G\]:#>i&q:0re%m34""#9M=LdRbc$<R&`?cTaI_gM$<?eS$I?U48b(?)d"lg$c*qmu;3Cp9mHRPGGiFP6'M,`.&WZ!4GCFm!$.t\4EOh2cXL#m`sM!%[:Agje,"Ocn:%]"(bA(GSO^l+,=2l1N:!O&moqNM[YKc*2R$,Pf:/6oMjE^XRF$!KpW<$HX)G$l2V&AIas__QJ$?2$E:T-ZkEIuO%]%Ss$hYXn/B`$2TeRs6<*aS!IbUiF]o;_WYf5-52HMnBp-B/M%hY/CEHa-hFITdRO4hJ73<V+Deb6o"ehAl5"f=Jl&!Ol>3]T_-_%[JA%-C:UZmkCe$LRsS7D0BO?nIG1ud*do1qQI9,Q\*lO%I6T]*m/GXP53QT;f;4):]?a/\mm[7ijk\d*CLb&*rF';]l,A#_<.R'N%X_<!dZ17eLNFVoJq@TinV9rjDq/G<QPGaE"gPoVdH@0&oEpNT552U8E/3N_Z4To8dR:XqhrdD'Gio.bVmYAg=hOT?cqS^e\q>/pr%S^21[:?L0cI<]?-b5FEH_a`>d35>>@c+a1*rOBBq\Gp(0l\2P)IJnH=4PUmCk173V]2*(3DIq58Q^&87m??lt3o=VX59J;X5PRrA%?@AX2o-F)]NFf*ZjsC0LF-X;F^:8-L2-4/?R<)&:Id+[VrC6>>lTmstG\)U.=^/p2fN]@)qbr'\Xuuut159YI'"8:aOco.M[5I\%%s0T]$\?B2K%JS3&#6&n#J"!f:;/n**lXNY/TqEHEV)_\4n%A\[;:G5.]!TJb81U`YR#bONFtG&+XgqJUVN@`r=ecLq2F9.J\FsJ"%lP9?r&[4d>MM<Xoii)WuN!)JnQ`cX/+%nRj=&&)T-fW!"81T-5SiU>_3UF#Gdl9?u<;tKL2r'B#I?7Lb>[A8j25Z&AQ(KtS)\%8X%<i.O/5;.r^Yu1=n19kH%PtQr[oNiO_7kj)]bD83n/(Z]W8tHlsrC26V<F"b4`e?;KGe?nVDaig-P@J*C<eY^4Y)hnroW9<Za(LIg%VN=fgiFcMt]f)jn\R(ZaO/8*^pPk[;i1"$LiI>;SnsXG!ZbPYVIcZ%4Fi3._^D']/amnk*jPFQso@:uk2#F/THTldt>[[1qP98)<%:FGHUV"Kig[.W@e5AR!qp"sOmp%OsC[C$ZG\lXBDi9fZXGnF+g?9DRPG=bZDpGu,Cp9r906]i1NHV7OLX-HJiP!X<UdAK7L3U;Hs%&"<PQ"W'^CIsO(4T]jtL]=W.&@@@G7mB7JRr)7X0Q"'R<p-p96H189<D!pprj8$aOe$6Zr^6lb&B=fZ)(Q4d-Xnc2sR)MS8,o!G#%%@55TO>*a48'T?Xp$K#H#0OqJ)'jRD)`sP`^,5T+#b=kER(o^Wccf#-?r,n%dl4>%>E7"oYNMOjC]1]QCt\Zgkd&Pe<LZEg];0kf%=rXSn3g`'&IQW#+'I<f!otqj^2k'b<jW(B^p"ZZG*h"RcnZsmnf'1ZXct\&IXN+iXm[>V^ir5LI353odRM^,'kslOA$a+5V<\)o_%WuDT$^XSh:;SUqu\up%,Wf!4tipG@CoB,#tiU2?dcKA3`1`1A(h#)Q-]m),Enbl6o#0<6X48V[A&E>+Sr7UY%NOcsiog\Rmmo+8q%p:#fXi="o"4BfDl6l*l0oQS(?r;DE*[!h(^q5i%IJiU?pW!GFNgAaX;fl=Y$NQqaWoDPFQ^B(?AS`aeH0J<pu2h$.(>W#Tl5Q7,"%;4&e&T/Z3*oTjdsH7OJZ.p8CS:p%2S]JUj5dK=?p&UdtM.,3XRX^A2CacGQ\48<TuFE#ZdLg.l'bdah0=*qp/o(.o$aeh)4iF[Rr%XJF_>P?3b"V[#G#NBJ1*.rT?*Z9]7D5PY.imQB`qH$/:HrnnPRgW8p%gfcRQp0G%VQ_PqO5L@R;]=$k,>2*$>_>2.)`iHGrB<0_]%C(r>6*P+E2[8),@o=%2sr-Zoj@F#jhO+.k_hYg3Vp$Cfr;7f$,]YAPnE6C&De(XfiDAc>Gg=@QqdE.Q!qK6T@preYnq8Z:GIik`'%rd=CjMtu-!O*;*4%U?jZHs?Q74M'MO0Ji#W+%`e[j7UUG?=u-%le_DaQWWP<lXk89\?Xoip%o6F7eLh!D/=S]>ednuGeHZWron4'%F/$T0mO3;YYdI)(d!kZG`LALie=;9-^<%,=Li(8+l'0>n\U0r#;CbcPraGh-]oE$MF`q]U&[gGo'kcXK:Y2340%RQ(XS4@&BFe.U%CWE(!BV1b15:3EOmJ,L!s7kX+q`6B-o(_qc0n?#</&.^`4*DP2Si=gjZ_MjEm+h`o_&ht8O3PT=NEk]CBPT;\2EsESkQKE3dT1.u%/faMgGo9IXHh5Q)IE@X,:N,gjbMC1pg8j%ArQW1<b0nI?>q`J\\eBSYSS)k)^aT2p^<h@LhP_Lfmea$6#mf:6ma^PC4=$O7Iup2S%InOpn'/-u*jD(;&aDUjLq>>MfH0rYUeVquao;]@SSpsJe?EC_g2SZJ>FM+kLlIjt;Ed.?Ge,'&rk_QU(r<Jt+9.u?l]Bf?@GCGT'%1.FB;HZsArDLB3AkKV$@S]1rLlM]t<5FVO>o2jb$p[]9Q\"9esMV%I<PJ)8eilF6P>8\tmkDe*fRtn&&9:`BsN@r33NL(UY544A#%H\r?h+1C>S4b%b(4?0;UI*4@\\N*i')iZrJBbN_T`r:)Spq^t5gCILW-ho4:hpWOO.hB@rr*GALM&iG%ee`8Sc,HBeE]!Ymo't.:%j8&:>$_bY=q>F\]R4-M<S_a)?MtZ/UkH-E'm3d,Kk4?h:]@G3nc]+4Kf(Mo4_((5.>X`GaS%"Ap_khM@_s5pl`O2Cp'G$4*hAs=9%`>"qug7_P9oCDNhEUQ1<J+e#+>Y!>$0>"9eoktekgW&R@pToD`XHQc227J<%VmNp-rTW[t0Ad_H:Z&T=*^5SHHrZo%IF^hg5?OnF%^GL8DM46.:Dt[4\LRP^GliAQ=g\2Z+QfYW?V>%a:`VVLZ2"hjdM'\ML^OEBKpC-<.NRMP7Ir@I)BFfa7o(\>=[9=9R$7>fLASdVo%fpocAbcRAaLX+;)l/2J*]CPW2h^k?OloB4R;;0ZLpZ0rK_oHCC)fHf\J%34B2nu`@3t_\jL6.)ua,WF-B=BeM)IJQhT>g7TZQ%/[%(Wg2&_hFBTincKF1s<oU\&G0gFb^$,/YAM>W0N/(q+Dq)j't=:`06h^XW?T"S`YPHBD5JWN_[/oh<uFs,U)"QfB;Ul_b`@kIhpAE%YC9]$GC)1;rM%tpo_caT[BoPjCG9-MiH2MV@Q^W\5CK"=DI[n_\_B6Zo;l$UKB;iT*4+Gr[W=QB^!I[M!8AcbF8sP*g1kaPWnL+o%lPbEKerS-uiInX@cC7>5^3h3dA$3N%2YS7NU;pIc(Y8S+kAAXbDS:;lJU$Fc79\04T+],_2UE'u@R\7NIs?60rI-dOh=AIEk16:a%=o\21s(h4Fn$MM``DO\i2D.Q4/8aY1(RYW%6`U)OQ2RX"YPRXml=KsCMl,S-%B5f^H]=bGF#:TIIu5.4592fh$PhIneOW4)RuKA)%0:M5(LYj1JCP<+,F4De(-.2&OpA:-GiZ=#4$_PY@2tpOPaP?_J9gY5:)_^Ve#1f5I2\)TU>00""^Uh(8a)A<W7fMIfHXlL>djhSl%Y1T_bltn7S/UZ`/s3t3;5'g,tM+;f"[<U_u.t!sgLuDfaEteDrK@O;7oC1L/i\3Ht5J8>EB_=eBoW#n;.0o<[X!s`tOe3Q(qe(\)%,a:FV]H-knE)o(m2O5.s3i>G9'%nap6C?b<DgN!)o\8]hcOLGQ3h]+&2?!Bp/c;:Y2JR+NXe+<!Ig5Vnb-SG3G#qjW6!JW,5&:tW%Y@$[YL@@*hAG,bk\TuUDDQIt]:T0%3Zgm(pCj!9nJ$nq<c-5P.MhCD$CG4;r`L#isA^u:W?Jk39>Ppk!]fY\tdUq@K\U$#\BBjrN%D=9T4q13.c>?p$uSV(ODc\/4;`K^"nqRr^AoBGGXhVRU7kI[r"BC4gWlQ\8&*j=I4NI"9/m,!N/GdgO&Cp'lkIsp']2(2)cce['C%K$f?,)sbb]=>f^)^?#d7jZd.U`*2n),Xakh4e:E]4'V*CoZM7)kAZmTj2SBGBDtcge_RFpMl,\GT52*M0jqjLGH1?u4[M&2Ds*I1%5M`VEI!l[.rDTqb2P7Vq=8bn"q9.@#*<4rAa3VqEOub6SmSY.q^Es]]m_\8Ko((3gd?gj.LK*Z][jq^lpj@X/k5=nA&#9HF?*HEW%EAuB"*^8t^G#kqV#7&EkXZPk#rS$f&a(35]/^W5/HUmE^3k?GES3H):K7egMT(&h'P^[qgnF=Q2e_XcJp[mM?ZQJ3Yb]5AW\=>Mn%Au0qn829]tY+FX70j=POlh!)=H/@?QYe)[Q+5HZkm/:%YHan%oV/%.P^;%>;IXU\4R#dDg4F=<[4E'.SngDn7Z+7IEpmq*ON6OOX%g?AN1Amsejo<fD,e!&O^ELj+q10u3o`THcoYJ6J]HBtLpG/(/qX3b!TH91nNYWq[P_85Flg-&f^<dE1W9%TY[]:!A,K5;U1cbFjU%LMY5TJb.5,OQlr7QbCE9k#$#6<kh[aDQaa5:Ysj.HfrBj..8M'#&1`a\_d><q7PL/huDAWYl8]eA%d9]/E"Y90_!hV=3mMHfS3pS%$0GAK&'e852>W;"F0Y5[/b@8j]9V&in+NaNFo0$3ZW)>N!9X.(NUMoITA`"\3mELUPq<sfK,`[F5+JSk2k5<2iCFW1p\*pbLTSJ3%c:.OAe5MU8qn!YTpK0S:T2m!s=ZtZP2qWL=Xb*j'o&pqtSi_'u)iGeP=-!+*%F2o\Y.)_qG*b7NDOn<-086jA8?p]#[#ML(O-EKo%,g3p`jhoqRZ<kZ,>5Lk6lg'_.k;ssXhQD8RDXr-3E-E\mUK]!bf5IjBq\:1d>MH[Bgc593U&"BFCZIO#QYUlV<dd(R1O<raNodNk%5M(;P@IJbH`dF:'oOkM:Oj8rIoHX.W$Qmm*ETcT[fmMi2NT6hFRD)4\[m)N7SJsYOnf)B=A(&Ah%6*_4>9M3eI-8EFb/8pce+M+Z%bstUk^1P9as'_Z_qK0@>VGC7SYIUi$DQ!O3Z&R.jPM0&ehqn-,CN<\So`@UH>%@0(+OMmIO3=[L^i3!M%,Z^=L(d!_C%1"t)#P1U%<bfqa'8DX,>XZFu+2!dK`RQY1E@`kF8j=?'%_@I,`JkB@Wd7ZaWdM150&SVtI)H'@(I*d1FR%Bk&XdWUI:md#pqsp>Z"oCqMZ;/a%a]JLUI+nN,"8kNRVJGdScgc8,5!'_5O8F]f_i>6jk@Q&5EG5./AUa@IlN`thpZStA(,7qZ+Er0>F$9M)O@+#k;6De3muC.HB3,n7%14otaopbAYq9q#?H]g5!62dU/n:qYDr[CRm#Qap+$lC9rnE`=k4M.?Si1SpK@%I7IgaID<4Q3e7pg4q9In;)LdgbW3Z<XoiU\aL<%b5=+/l@#qeYheSeCgDNApXdr**4F1>m0aNaP@`IG_lM?KPo4^k/i2MXn^/o\>%`>^K9j-Dmq5-<^Zq@g,d&-bU!sWtP?bM#\WgX?%q^lkX;-MhOm`=dtHBM&C#T#Yf*.h5ra`*SiP=G,`TsP('/%-lC3GTXX\u1>^585%>\&8-C;<2NZ[g'`#B$HBeQt!b\3?2>:n0f.%%T?7Xko%c/q99,i\UKh"#Uc%p)*:NPX$G0VOUMS<CCQo<U4`*\1SrW(@]rRR!PW9[&p.qmOS1$9Xhm[qoS[JTS7$kYL^!$:?-2'>\%iJM2'XIjZrBW_5U7A$PUqdRFcV<(7ZSR,T'05bikbCo;&U"o.IFjM"JY+QC7F[eq$32O>L6;4Lu]MpU[B)K\PI4Q=k]/He@i1dGe%[:rgdUPgEO.Au`Y/AL;(Eg#7!F\*4.=#S_rCL=o8\A7TkM<"^CkLWW/077uO!\u_P%0%kC\CBL5C&<cjQSN;jfU8Ag.k]O:4gk*C%=-O>;FG3s`$1t.+\+SR'm<rW>/=>"E'\>!Z]C0+oI(<>U/%L<uo_mGcck)E*D3.4Udc;n2O*W(>X*sR5<LT7-fH2,X#'NUk>M,hH%Zet(k=?dl`hBo6ENd;8FW/C75gVEGb;-JnRATC5eZNCcNGC&X/S/qO,:75KkE%9lkoANL2!+iN7<E!nLlW!:?,m-;`'E0X8(M:3Z%QPJfF1>kE4rh6!KR!C\t$G)CO]I_Omnm4rQ:gRJ&Zr,L2DK(Fu2m/u_B(^<GTS#d8Tl%=+19$Dlf<@\Z53)K#)6g>NYNaGr_O%kk%U.]?Ln#cA;=a[d=#6g?.hP2TE$Ao:BFjJ-242$5WT\+dZO28&QL'LeH"K,pm3n$X6e_eE\Pl\^ZU9`LuKV)u1V/G%7/t3ePDlEY`%.<a+r'\3iNhKCakk<<hXHKVAbpBS,+-<>rj:m\piE\ad(i2a`2lg`q/^Xp0Aij57942Xos]FripKPulWA*%.o%mJIfnZCjOjLa5F%lh$i-\:T?B%7gjNGoC3YmC,Q*DtK<er@ou#\fZp.#[cW(CLfJ5nb!W"c[jP^]RkX%pjVc!lR'GT3]kL7p4>pOXs=g5jP5!2+6:ke%5!be3j8WB].W!2nDSVg?NBJ]%)G$PdQeo@&jrGuKjq$H`]Z4*CY`<lXS2LTMPK%#&YQ!J3hNc[YV4YHsK40,kLT>p1bV/qCO74p>%Mu@a9colY?7eQXuJUI]_@!rTYm"JMC?2aj2]$2`g/[cqr`RWN]=:Q,n3K5(bUSJpfeZ;3o(V?,L.#"uX$GYesp=mVUnP4''`:NDr%ZIs&o&K6,Rm/QBNDC"<++r^@W^TKD9-QDb:>is;Gme=HQ8T(^+p?A7C2r7rpS[c,iZI/bn?D"_)2&^sZAL^Q@j:^>;5.d>`e%Gh3%^\oP@*<5T@K]JtYI7gNZnBX[On\a\@P/$n?'(`u\s+HgW55!aF;D=8)-*&(_?!LmRTE(&T]Q\aPZ@CTnp4iV"CN;]`e)*U]rM.(e%VITi[/T-K@>1QkiEbAAG.R0D&leW+5b_u4I,DE\AA#d1rHhp7QSXN`p[@oe';>\sbkHm-`rIlE&:2B(14a^jACZq+mee!?&3k`3G%W*Z5G;(ql0jNkiGrO[Pc4!R1o7VYXf#/m'o3fdJ#douL15H=rT?`6i.me]oqcF$Lkos?fg0&Q3IWqBQng#'<*W-*8Q>-B>M_t3RV%HFo$lj6k<oY=mT7ek#;$;igg2^,OkVmJQSmY.:`C5/gR7D\'ElIdp0S!/:"(_JMS?9ctm*B4mbc4Wq23?;ggtb<L5[`bcVL0b1dE%3e[E`)>'P7D=`:XkT4oNp+9"DT3d8]^!Y_J=04K0cMh[t54n:HN*gC^=(O"u,K!!qN')jUhrcGg>+Chb,gY_A*9d+qbhU42duf9.%ptTYcXnFDQMZo]ZI6,7^ac30&MY_M&8QP23YJ5j"MqoE4_&t4TcOSqrorEWK&cP6!1ur)!HBBRT7X_A-,0Te3nUC`!iMiQ]1Ap9$%<579O$Rg!Mj)2,t@EqP/SOHZAJ*HJ^gG=U@g\tI]-K<[!"[^cg+=fYj7J%kRdf0POIFfLfc5rn/[0XnsI_Y[:Q*cK5/a8%39@D$P%<Q6</Mc+4l<2O,nQ<@BH9s=A57?uD]36>on8Q8J!WpPHoW\CD(`auhWX0NLBBg"=n8Ou^6;^JU+H55P@"55PN=k6;Y49QcZX.669%dqB.]lBOpjrCer7Z6Ult'X%%dd&!J.k;9S[bsZ,nd!*tcRcP_E7GWu6l9JhD=[`2n;O.WNN67qbD/CVVU3`+A\]9"q=&lH0$?]AA%,V*PT<Ml?e"gs`G5k?Om5,:X+&bOlj=\O@bAQ$i0&0WLgBo7?'O^QBK,>t@LN\T_iWljk+'iDOtH-i-O0P6P)-7i0E#^Km"U4/6U%0Ks6i9kSgq'Os3M;,oO]FV&]WM90GjP:3IZ0dprpVAAidH^^j8&g2FFX3;5l+i)6H6jojRCJ'e:'[s/[p+/Pf;5^0?$a9aa0$hD'%4Q>+:R-U$<anP_mpss%8B&]Pbe)Vmh7X.YUE\F@??<diV77!3t;d*?]@o\=aor(E+]fRdAjW0Q!lmbW4>`!\"eguE`O6_p"o:Qf"%L,^qk:m"+sjud6;j_F?,^Gn953JhHIdgdNncj%TaSnVC+VW.QTfQN(=H<&B'(9GU#dUPGWEghe@iAF,!Q=u70==$jL9UgnNU4*\e%*hc`3!LId='M;:dhA.oaHn.e9Rp9,i#f'MDo0pm*`Sc)7>(H40@7@PQM,B8?QK@cj8HLHb$n\bafNM1K=b,G8^6EdFnHXhHGDT$*%%5M,CE?%bAkdr$2@Sk$P6uH>$kZ'5u.-h%6QB2a.=aEKUB2"nPV5WQk+ahbWBc82&n$1^#Aj#4%75Q[HCaqbu-c12nKih<PY3.oK%eCQP@!R9fHDIV&SX:,KaU`$C@)K8-'/3p/'):cAXj!!#%[i,G79j++H:N;WN;nN]uE]Nj/a\5^_1hW)/[V$_MZ:*8q+Uep=O'!3n%6?/7>PGhk,_ZEQ+JiRCm&P]#.T>n-RF,T^goSn2k"erYe=gDRm2U)P<[%e#cOX-uAO4#f/W_*C^9NGt'4H()k6YNgH&:mDTMIn@h%YRRi8/)mWq6tAR<jZ+)p9L$O.<-X?_9B25ILqTU],dE0USk#W]?0jNBJLe20\j5mB+VmSEYU=OM[SIY_WVatL(fsk'CnmGX!OY1O%JjtX[9U5kgI7I9O;'#t=5dD)%)+uTAE^m>i+E2Z7d<R3>8DfZ`3%Yu"R33oWR$1OW3/P`i)i9_UQ9EQ?N3/I4kZ``*VpX[!=b`c/%*a+Ztk3&!A+:u_QdI.dml`?o`+V#t/9:8&eT_?eBo3`/X=3tP-b-2S&4I'V586]OGX%LcIGiR2iB5,'?'ksoo@qf'k/4D>F:5C-[%#4($g.Crp0@Vk1@SIf'.%!9gj>aAl+Qm>)tO<$fd@VHl2i!`$ebc,A2R!J0m;l)c/oK60R6UN7=EB4NSBR=c_H04^WqGU!6P)T/q%9mn(6De'pD%PX?D.V2'`@"elp3%#bYG_)'3@oDC7iel51e<-9R*G?LY9']J.T2Epjnuc14=UVfU\O_d^8h6r/Us^;_JD"L+3[=L>%gXm\!!tneWEdfVDl'I-Oh?)WqA:X3=;(/)07U%`%P=mUU']#[N&5?b+b]Slae$.b/5A-S,:<Xs/Y+ZRJ'e9%f+us8%p4Z'NO+E+l%W3N]@o;i3/>->6H/"JQ:W.gW2$""?!r1)p,[:^*Jc<uF)=\u,k0r9.:eDq5!T#4g:>YVBa'B9b&28ZZ)oZ9O9V.H.,=ihh=!XpPf%'Ji5D9N78ulS2EeM&6[>l-ufF((mVC)=K$*/ZZC'J1.RGXSSD<;jgP,i*ftj;+Zf[[SA^resM5+%E&i_>P+I8Qn)-HO2TaU;@%3$%Tn8F=K8N]T6kjN:dS*Jp#"#Ut3,qO$QNr?5<=5;S6+k;`Tp)=N`HkHrN:iJK^J+2D,^c2A-K0kC`"=!qCTNQW['HD]nH@0rH<$?b%dF-B",p!nbRh-':E$\tV!WfRjG?T?-5\lE?;H"lA``flMg;#\l1Jbk-O%o45e;hi(f.o*Q:^0%O/Suf?#99-PjN6bEkG^R0:Cu1j%[:89i:2M1'N=+^R-3O5_)6XPg;?a*L$'h@henl<j"YAl9ng[R(-<)$tTuKK9.SX'+3JE;*%+EAh:ARXBLR!X.4=QIjBGtQs78S^E%bFSa8/%OQ.VIU:>-W(Ui<!E[@2,dIc+;\aNUe^)Qje5"*FuiO;emT?Z8.u+1eS/N^1)j.m$'HTIWErIIEE7=AQ:*!^Ag,\t3.$M_%K(gTifuI&F@>KsV*H%8n+4F+ZO(T8p,C1*P!/j)KJZkoMWfZEj*+#_$.n##NeTnquGJ?56>Jq/F3)<FOV'dZKP8$k8'"oJ1Q;k]=%<*8KYlA8i`1l]Nidg>k+5:O\Uk"SOlFj*7O/WnJj*[78=/P6!t,SHKDFIB^+q@bcVKqOSuBdGhk9;+Mt//SX&C+>!]#9Y4#V3XF1%-:Q/[m2;)R<K+?Faq-GO!/A9AUPu(f!HuA`c&gMAkK+PGoFPPU"r?DeS:gqZ!J)1);^)/a%9I)h,iZDn5FV`5\LlA^4@HP%r^&H`%`G9"@IrU&_J,S]K.BTA&'mAk-b0$Q9%#K1kFJ@^8U<I%Q_#%9rM$K]bWi*g&U_-S&8UW03d$A?6=X]#"_90.9_K(bUSSQ=KA@L=M%=NL0eehSs,%/Knu9O)@>e(9Oj+j6g`&uGXkaM\Om="P,=3P[LQLf9MG?NMSVrEdHNlk&X(AMH+Hn]E/.\0%p",[mOXXN,:-/]%Te%Z8W4nZ'Yja^7enVI]6a2F)-9M5\?i^(F!jW>%6#p\/h5Erf&\<Gc%Fs&[d:Q@Kgcr3[uc*ZrH3`PtBH3T47>jJfB4KE?nI`J;'Y;%GpIEoe<!QlU4k+09[5\,8H_I6E+qf2@Y8H"*A/#708RW2_SF6FRR<Q-&qIC5^JH7K'%&DSJ:QTTB<QV$JSf!U8pH/5fUjuk"4g'E%9kk#]U(:5,_5qm5_n:_+:[h)DQc,bWD)tlQV[7L\@q9S9M=_@IU*NoP*!3B6$U5:r!rB8REa]*pCLP$*7YJ0Cm%4Ch9L(A*;fT;c%aQsblYn.?eai.56eYO$$U^3LM)2g#L>f.L+JqoukPYu0$?UQ%e@n)BGCfHR?RCE6lU68[en4E>>ZbI@sc(s@Q_qIKrU8_h#A@NM!%2iSGIUWA%CAOn.CABEm].Y_M@-,E*^odjNKM;niDeOgUBaU6l-$%#+("G\1?78rq_^;DY+m*7nFlljES7j71/_bR4`^N".[ZJsEX%)^H/J5n$g'!APZT&<PrjC_>rM,[(;G".MKcmQf]t(Jn7FieU.c!qnAU4^0FY;'&S4JifWBYQ-m\M+hmp0LoT(4,EVQdB4ljWMQ8Y%?"6;aOfkK[DJ>FbdU?W@?HsF(^MmXp!`W/Ch.+L*ciHX*Hl>DBPkUdi7q#('cTiAG!^qmH<as$F.aF*f?j!:OifY)r4IG&4=Y>In%[+3*DP)ch'!b"_e,p#4<-MZ60IEGICV\(g+c>JFCo%lt!]IetnMZI4FfJ=CK%s_tB;p8d/O:K-=BEbE*0'C->3jEhlDcX+q!2`aC%M:/81?<Tp=BEiHu$SE3I1D+$9;WWOuH>H^*a^pMHOMm8B<G@XQ&/cq5V?h[97#=6US8cF^&!?q1^R"_#&J`_QOs8leZ[trun-U(1%_':3E<dea`Cm9#mq1rHiBSL`!&N5:oL#:?W=A/m4`SZn/bR@rJ0eEK7#"LJ[_'(%gNK"0p3FXE!H'F0I>%/gi'P1G"&ds;UOVikN%(]^mjoX9R$MD@(-'.ft0;2HMIAKcGb*KX:#Y!H6Q?trgjk<JY[KHQIOR2DGo(nV?qL33ir<!>G)q%\BI<%W2%cl3%L>j%AG55ls%%ATd(NpE<Y680Bp3M-4>N]`g8$9.DZB52aK"C-EBPR1bg#.GQmK%%7p%M_^j.[)3e'6m`<DClQAhLR'7ga!ERYOW(G9.i7\Q7_(jr%iA.C(?*Jql^F(^]_=\saj;V5D&`u4<1-&Ps0og)>]A%XZm)Ip2iGc/XH8BneR)s=n=JmjU>Z_/iWedNALmu;U7/n3+BrTjE=;o>N%=LO/#6,oha&4(gZS7N9IoJe)WSVMVuaG+;f0K5417B0$;j\_?jY881U<t#d3+pUSX`_?`n'0PJP^*,@#.)j%+5c/Xt"]4JSM+Y4`%,^KHH.oC@;L_*'pepEA(>:_s?<D^o<&+lug.:PJKZ5tCqE+62o[*(n_W?Pe)4XQ,=_ur"nR@'daQI'@r5"h_`DV/(OjV.0k!@l`!%)6pXZ5[5!)d&(<'F\`'J'U<B*@)[`ne,Di2jK-jG]b_Dn0d`>F9U.#)ktnWLY6<f7@J!RB6G/J0McbO`7>cq\P[LB3_Me8Tb3!,8%Q,B1/]qiTO(o2'c'jd#6]qd&$=o+6mTcL%fGR,g#RpZ<<HFdFO8gHW8]qUdla,p'440/eJ<uf=YW]Pj!]L][:qOX4e#Tk=_6[![t%Rj!A^9*PADQH63g&R?_]Q!X1d9g6db$0&4JPc0I^T#S&\$@#uT(_V<%6#"Wf"%m:%V37#9$&qVAj!7$#1B<:f%rp.^_XCo3Cbrcd%aX-(##!L]R[$OMfdI&Red8g=(.\o..[P@Ot8jp=#L`\qu?c+qM,BcI?^>ul4dm=KPB(q<;^fiT$!$_t"r09]/ZO)VJ_:^;5V2<<`%6sOL?3e7Ba80V(CT6[,AX*\nH'D?C&G0X_H>a_0gPV`^A#^UeD;NN1Bfp.CkEBpfS$NQP$]]C.JUIeWa.I8Uok_Rt=CeTm''81fr%;q:$ueNUX<3JX;s(p%EE[i.G6-%a$W`of5eD%i0!R3PB6kR*")(ncb(LV\PW#+59E01C!mCW!tb.8gjL:2dEWE;7eK5S&dsHG%)Z%$]`$<EBp&W*nq/Zg(/EOHoq7,Z/1`A324HCmHEI9\t1u3(pj+f@_Kn;K&Ms$IFD$;3+7c4+KuL(.3KVb`9I]QFu]IWNS$!@9/.O=%JjU,R'L8$k_k.2uP/%H.<Ja68=f)F^^(e#6Omgq<%AZTr8L,fWRcAoMdAdNU9ph#IeLXlEq%s["E,^UFFpNV!U\HLqN<+]Y04e8'%`b2Z`>g,K?nNaCiPU#/25S_3#/%)XlYP8ME:mn<66k$<8l"qmC7tu>/=<hW(C/i<',V74b@0K&@g9^8Wb?5+rPXm>/#_Zd-1<a/X%+:pn42%e:Q+e'?'46h@[4cfmT)`-\(D4F4'0;Lu)jHfA-&NbR+]Il^f$4'A34>UCh;s-MfXKmF*"Gb$[`5ZdJ"$Rs3/P4K.$T4c6%g6Sa&LHbg5'iEJ4"(KcN`9#VX0sK</FUq6+R7l(NkAUe#;:I>aL9\7*d-iq,_4!(DV9(8$oi"lq2G"5(<'<s7aRZJn[_nG`k:mQU%66rT<OtN%AE6)FVG8'l!AQkgkadXY=;9U4I!\"KR?bURuq[\45>7HdfoD$s@/j_P@m4QTq?=U5WhE2W0jC6LrGrtO&#O<I@`0=<d%ZXsDa[mY%!(9<].q-Cl''8rtqUfFGdaja]g!`j8<_:bOu#9V"i#^2]=<f]PgLeFnAPSmm4<Q5\UWYWU*:8rE#ogc5FSi!&38cq"T%RDOJ)*)SdcB;(:(9#4#d/+^^$(Ucs_gUn/)>rG[t.E<oJKNR3#WNZtgON.C]9sk;A)XuP)+I'8R'-S*)bXie8M%G_n&`URu,%RE3%(*WZm-UN2H-UJdeL_0;l+@7^3((Nk,B\?49BLs7$i[*HQ+a\g*+&cKt_7u,qN+LS$3XlJ22&a1`("9mUI6.Ub\P;5&3(EL2gq<n[%F?>9qg=V?t'J^lG$?.gW7^;1]j1%](C5*B(KQKVs'%Tf/dcS9@3V3'><$hta&sQ@C+E@n+85eYq`-&F$$rS3ZQ7E%:Uo+;+7*N(A%g0j5G*$pB3Z==Hg>/:I#B`q@:Q)cAXI\%ar:;ZoQf&Y7-<[ASX&6AcSpjFn`EpP8?Ze.7e>_j*2T%i6%leM-0X=(d6;Ka6RZM^-,%ShR$B&7P(AVI3Moll-37r14fdc0V=$Q9E6^*%Mq0Cno`_0P8g?C?TGJLiEHWPA)/N!8-1kg5$-D:X)kLet$A$,AEt:Nb#)RqAG,O%q2>H0PiC%bNfSm&5)*UB<K(@&Ylk>#ELr+6]JjB>=`3f8rSk(S>fGH+rDPDr-;p4fTqWDi_3['aGWOu6Jkqg3:W:i!)oE5QN]DtW%BgC\Fg!c;)LMQPG:JGD.L1M[5!VRY6ck<'T&@)9lVAb6h4/C-%926()Tu9DV`Ng1)(M2>S=>Gf?6?jPu2,>&%#95GmFFff9el!&J%5i`=o#!=k@HcBR^KB0_'W\hA@Cf./\eX-mh$%TP4YRu%gUEUYj#V>'IcnaeJ77L`PfS<l9I"nj?SOkCIaXPR\S,1&P'![<_q'^;e%Fu[cB`77oI#9`:Q.1j)XISWD^au:7#C0)2Je'b4WP=YI"WiC;)</Tc[QmiZ-.>-H8JaeMT,]V2j"!T0Cn;_%a*Ieg''kR1<'fpi=%1C64%koV4.7qCK)6:Ie&Q)0V/.eqrq_D2Eu:e&*j<7/a(I9Jt*f!NM2Ku@\U<+W5(T*3mmZdC":b<a'F=0`J*?8cHtQQqU)b[jXk%pcFQ]GFk`ifC-kp'LrVETGa_$M8Ebgb"*CQpS\S8P^FO-D)8'79\<E,BO+1fJ/eRiae5,')L*G\GJK/L'(OY#MBE$^mN[@@GSn[N%Nr=n=n.?Y_.Z'uqC0bb3"PD+ZQD5ofARdnD".%&AE6jk"Q]a`?FqS1q&Q6ap&A0[_c3=_OW<'_lD9iKA76<c)!e-1D%5:2c#pq,:%>7PFKGVq5m1=8hlBG7Ko7Lr[*J&UoX19NqqQg%NcJ`[>T9/$Yf1^9-&i/G'iGk-)ZUcG`YKTIbKdkl[^?cJBUk!),$l5sE$#qfd(%+4rgI>bei]"-Be>b$5a:*1UM)1BX9R^cseW&q_];2t@/#VCj?^YYaJk?]))fah<:S"G\1i:_jET>b!Mn`k#)e\%8t><@'=C*.m]q%`R-i<8eS(Q<h^kc4LWKbVTSQcRf.iN@bAp6k*RU7G*M%!1+9GsKGS:,D\JM<,(;tNJJ_N.+>VCY0BGhq@VB^TBpI9sa6^>D]UNH#%C#E:4=V,1IBTea%(:_C7B)@n#QpfD'!mY7gEcC1+3K$HTHGOY<")1bGA"3_*4JVN`c=2ktTVp#N=]!,0j''`[i+f#W,*oQSlulD6%S:tI^bCHkYRAfKrA'&cu0_(Y:+eJ7qEXfraEoa[l/9rE/@_N9<ZoBiBB?=T&g/rCW/3-DfJ?S#ng.85oYJ?8<AH<;R.V4n-Jlob(%o[Vk^Ah5bjPmCR:=U<Db?I)bfJn8RTerh74/IbB`%(Cb*-=e]RVHKY-'Kji`[oh4Ea0=XROL64DbsZ-Y=u%YOaonfb,G);fbd*Ns%ZI7@1(2>Ig\7WcbEmeHt1_*V\NnBXC&%DfQcK)s30+3tH<fm\]<NK\UehXL5*,D5pBYRPWX@89Vnpn+ZU:rn9>-M77gC.1W/rksR%ZX>p5'*k$2CF1V8`WE&]B(\E#/3+!=QBa.i*%o"-$<RLr,-&X"9:i2Jad;"NQRZAo'-k6,=:0_L)"4IOJeSLDb!YVT=_;u-&a4>6%dZg.26`B.7j#]+h(E)i(PD2L8'VQ=mU)SY(M*P+H#!D4PT^lY__"t(`\dC%TWtGk/$<UYhU^C\Z_YU93/Qg'ii'(Sc'X0d<&dd$k%X:H1f8Wj:ZYN!If@Z9ur&]qk2!UD7EnO@f>q?W3sE6%k6ZSkB4`r!n`U\,Yr@omliqVX)h1jr)$+'aMf.=s>%UG_j==C2BR:K-%"%lRT54o-@^mV,be]o.(F.*i3Aj&%!"8bqhR\3%>!3Wkop'Pm5I96N2obI9G]&;_/LpNqm[lH^"\M9hki>1$2!%'47go"lHtP-K25J%p-c\N^B.G=aSQ=6*U.g@7m-83R,rap.*B_`pYgoT;A$"CO*[$\RV4"[O&'!"1a\6=%M^R`9f[(\V6#F>R,>i*EQkW1oX#lOI_><9%,%,k2C.$l0o>?/;<B8(sW"m^6!q(gI+V$HSrNKu+/.'rN*7`%HX2=jL<2KElL&7-k(6:e9$,eNtN`kd?X.QNlTN$Z958/"NM'7q$%5MEViA&JDo-KGJ#*0\4$M,8bRA/qetJ\JL8JAa>N:,Z8k"f`]O-6PW5XFuD@Q*KL(Xuq;I%Q[Pi#"3TO4^4UoXW,gH@j@J<6pe0t%IQ7<-P)(QSaF+U#P1g?D!(.Gh.c4r7Lf;jm36E;?Ch42o-R5CP(jeDsP`f.H%T+9POp!C8&1&)FCJZKHp3k2^=TYNq-(H=,3PkmZ%9iHn-.cHfR3QX."+[PSu:L'p)3]T=6poL\c%#SmXQ6uGSa3S:8Xi>ZNag"/t@N>fVM5\Sf>3&,f:W\%%M5Oi6(gN<$fbj=[1ks"+%T;mtm#\IT5EQ2i.6Bhgs))@g%!j[LbF'L7-M$rEtZ4KRoftW;O\^uG6.J-;l;ZfQDUOGTLLFib3kRsk.U-Y%U%d:?"R+PQXK.GEt%2hIH\/66*`Z'pp^JfC;I>_;t-3<Pfohr1M3fUieZ&FUh;&cl6"F!_:g@=*$1HAs%7Y&fo/mnun8!mLHc8KT(+<aCHj'8m8*-62A-%'aq_jh./"rr85>W;_W]U&R]p>!CXGf4i>@niGE\OL^P.=B=k`2N!p<C@a<VC"t+5\(6@:1#TMpd,@:dLMQ/?!)$UY4&.6]:J0fK@%(sXgckTQCd@5p%;,7FhQ'+FNGJF>3P_Oq>gb)AF!aPc^PTOU.%!"`e2Lhf2k^a'\cl=Z/3r3Y0&Mu[if(r>:F,E0a`'J)()DTmfa%Z*Hb*%6?kQC'g\9"r476!XgR>d+p5_3CAPM$*a/s'J:"hP+\])jri@>ct2J`]88*)c(Nuq)UDfICP55n"0;SU(/*N9`6E7eOir#:%P!2C+q-H@85iTNH3L3=XL`N*Vn=?D-0;X>B'fg"5bor7L8kdU21kGUq"<I5m+.gM(&R8%j:_U0J25/4tJjGfa30GWK6oq+5\1(3i%WSr[>%-9T'O//Ln[:]Ol&ZmFZM5E=cnF5g6I-N!LMXs7/"ls'&:c'KRWKOUpVDATHMr6ZB%THr7;Fs[mC;POPNOI3r&lkoYT427.%6,+EQN6Yjl#-K:C-eFkd'AqJ<@9k"=fQZ,U+#gi_8NA!i;O1.nVMhd)6)fM.0ocY1Tg',?0@XcfK,c#=;?$_?j8_bMFX60:NlTp@%%TcYEmOk-mA6C+&MEAr],*!grPQOTW"0Lhr,V=U8)?>VN$]j5P88\q,V;Qq_R7o9d.0*-3od;b&MSL$nW9e4";K@5g4j+-CGFIPH%Dq#GAU]KYtFNiG(pf-g5Va9`=LH@#^d1[NAO!&bCK/&9$E[Nnub!`WJ51(MX,UU1U7kbJ)@T'$+LC-nINYe^S4UAoUcK'<AlNr'A%C`Ip*?No"YTneaGgCCH<7daJ&Rk\&Q+Dp&FMCn!iCP86P<>em`SA2-3E+4e<@dbmH@g(Z4]F&J;>dK*s/Wq@J:2^D7>9qCs2e!Gd%b&+f$g*.EIZGm(^ZgnIE,_7NK5lD7/MZejB706/"&RUZh,1;ibXJN?2GDX;$j7DKCbu,@LO[K#idP9#K-X.JnH=Z#m$Z:\",rLb'%)^@o(0/U[FX:]^Q.ZGSaCBUtCjC?18*9$8D%u_+h<4Bl'!>C?R^_gL8I;Ej!&ShN9&9-@#ZUW<@/.W5T0][o?7%eV:)d%j_OUSDf%a;AiTA9ibdYq37O8;!7F%;1Z2H)-9"ef4u-B9*1_)C271M:LBoK*:T+>u/`g6*Jd"X9JtX=XM=/>>2#SF4AI*j%r;8/X'':U&TH,%.i&GoB;i+XbT\2KQZ?#X2+cG7?Nq:&5M>NAai+/ep+Gd+/)kPC&bg\f=eOXe\I'K=+%7AnkM`KWO[pm-$8,<7F06igkTP2D.2jH@%,t5$mE1]L+!ZfA`?BK8ie[A^?:*Xh>"aZ[(P1/i(\"*Ta"rF4pNWd(\;TW!N8Js>i5FX)g26j)B+-MY2`/i2RQ3=?;8#;'AF(unA%<j"7eeAMD'-)$c`lX.dk<"hFS'e,2HFj&BI<ANI'e(Y4S1TO>H/5giPVc<^_k;XA]'+74(L8lK\a2bV\9p)e%1hUc_M$_^#GkiY;%c1]m:IWQX;2"3@_3k=CcRclfoPWRK:a/7\^!bUkVi(I3>q3iq]hRK#A8!-3@1U"S[_$OVJ,SV3VnTfdQ[F?8'P/%2uAu4@k`am7;%\MF:;2?dRkONS5O.CpQ3^13!uPpJp:R!=NK6RSnDPU>0Ph5TBF5qGuL5Kg+4K9luf*):gKL2lLM8M=O-GVtT2f\C+m9`S&&.?YW0%gAIM3iM-3W#$Fr>IQ<VrG$c@Ue](^hi`FI+>\0uiKtO<U[k`,9L5SrNm=6Il!m7i)<-p+M\"h06mm[Qo:d;8C#o8[)c@VjZNoAa"%9#n2=4SM*7Rd8W<ZDfWDP__1n+Q?N,-J."j)GrqT<Dq.gckmq=oSI_]EgC2>=+6jBOA^h3B?$u,OsM)+<Z9(3k:T'@"/76GZ)^Cr%=DAh2kcoXBLd">o`DeD>1o5'g2H"%7!eTeY)hg\L_lgd7JB/UPXI&lrHl*Sii)>jcdPG]I(TE,M=-h\F&XPNhEN7"_,G9?62h_C2%&png<eV).G+L4jRcZ(F/cKAMB)["J,&.=L`!)Q64.1TF$Ou(5&i*2LMkG*1$@]JA9"or[b'[CeUef?7cfue?/*c-h9d/7A1m8B/9%_nk$iG$h84,T*ZjlL-"qo'@rh'D9=k#AJ]Kmq%OF*\)="9Oc9bRe*29r"@5'$R<21j%D)h?OOT=JpA/HJ>nG`k?C%@W0CS`3BOfM%;5)N/RR=:%e/-%Ud[Zk8U%:'QL/aU<X8pF;</m6eb?.Oti$&?!R\=eb!g?F\ooS>&#dB#u$9T3=Mpu7n8"-ai;$1'OUcBs3H00ON%3Na;U2Oc6`Y;1GBL&+>]^)Orq_ELj^ZdqVb+O3IqbeNb3:9GtJq%?=C.!/Y@>/TG[2AMi!ef4^Y-Ht_qd>9,2.KMho^NECHAU6qE%WsPAo@SC"Lq3$c>oK$:'RIir7otCEGg0oN2%d@c7HDYK'/#0gS<b:t&[T]dTS_&9Q%9t>P-WcM,B$_SCoh6*6jEYM*S0%&ZmL_ZG%O'*[:RN/"JB$VsAkcNW`jd"_nIB4>Wa\#j!YhIOd?L\C7V]H&0.Zm"kWb;V(=`$"9[Rd1/Z^E&KW!^51\]sdRPi&!jBm#hX.HB7.%>*IA*4Pq,k'l-4EoEcCfI)gg([n$A[4D&<cCU/'QbrJY^4(VDmhf6\dh!b@tjbVhe3C:9F->)^unsd\b+8!YmA=opUDj)u-A?k3)%?k_Jm+u;NN;gTk,>]L%Q4=p]rj:&2\>pM<i"$J?.?g=sRJ0g>kr=\KfEq>Gec2]%ih>$%>@$t?Ha13&r6s5V@0ns@Z`Yc_+)$-JB%).SKbAmd%KGk-KB>i%m<jV5pS>WM4Aj/JN&"lCLleb]4l1#E^N8R%Fu-()m##VaNJ!)eYD:ieG`XH5LTK%pcBWZ5_j#5*[PL^A)X%0TG?gGI\U,EXlOa9,3UmU<+::M_\+Co$XC\]0s:oa!n].C9,Hu!Tk$bJo=p=hIM$GBu/CZ)D3FOh:`nWk0/8<S\5]E"]DZteZ=BA%$@,E!'q$>]Z=b/GBFY]ae,V_Im*$^4;7[kj(3HI17H'bo+Z1-b@gn:W/ub@no8Hcl1;O-'!S$7&jh;#[Tq96oAZJ'?g%2d?8OhFm%.tUDh$b;WR-tW#T'hC:=Yll=NX%VpE!i0Pu0ctZ@ORi^k]ul9WlHYaB/tQ=p,.'DN'[5;k3W$YBT/DIjnqb6XN:]#kO9]_a!%Ob:%[,Qo^;qOJp^&&dT/*0Z1?5l]UR9Xb_U3\U]dNf0M2U@^Ej]J4pg5SSi[[UN+_)?lgR-=9lAb?@>7?r^$`#b*^L0CV/N%bnG_Co.Z%4cNtY3%2cmEZdf)X,8\h'agmFiiH\G)"ea$hFVN<IW^3!=MEQ*4[h1Ohf]%gcf9l14M2L\8(MpZ1L)(3/4X(b>>NTr@>O*&Hdao@%@YrXZENaD_Y7#$;Lp$kfh(o;8.sl&7-$M=W6:s6?@"SSHO@C\YKRMr5Siq\ST3*Gg@6uKD8=@2ce]?"3V7m0XGOM4qI#U.5b&P;7%]e2ZJ3JJjuVSTQ(g3aS^@4A.,W>_!D`T5HdWaI9RE-q_=X-l^"ih.?Q@Ds-<q>N\QK!KF_&\UP.er4(ZrrLG!$dfl;\#7Z64B$,2%aYc&n>ad,!ab]BV21-D/(W-`Y+W>]P`<a1N`BOs!9'!]VcKE7)!5eKs8a_%<F=FFW`pC]!On27"!Qka*L8<hFPckeEq5bE`GS<@h%r.Q)r5mAWB0?QFM@gW!?NKSYU*1jYUM8tot,Qf9sb)8fo@b+Gs?33sE3R#F[N@TQ,egkV>&#eGc`Roo^co`/ZYTOZF%XUHl8Ar:7%J/Z-\89=OX"U[XMPI<)?_cJ<:moL=(Z.B@D(FULs&\((.`4A2Ob/R_[L@;;aGCb(a]0OCjG(CRG%5^\i$PZ-Dmt"IT-nnY^eHK]L%c"_0[AG:b.dUgF(TE_k]VP+CIaH`!)d(okm6p-4\#AR?I/h6;l"lere@NT963$5*>6967YC"rsY1%,2R0_Ktud6o#JJHF5D0^"at%cM/@)g%#0<[l94pdmU$=:@!;##/Q]S8V8cfDB01d0fE#SBZt^LKRKL=MJYmqX;*b2q*7(YciB+'`0feV(]='ZlMM<Wo7:pp/!7Fp%Oq">hVh#3i6]P*i?<%di0YSmQ\NiG2\J<Qhs-UTL<J^A^)Ea,qKe?1EqCJ&G5RfPoIWNN@5Rm-o/OL=&&E+Vo!X55,3p-S+Fd7_7%:a#TKOgmZ]eFR_)"c=<D#mf)cMHqGC$i+\,'E2:oV'^;8)I=[m;8g/^aM'c`,Gg)rYNA<Q=,Jo04RV0U8LD\m9fmig8J@)Coj0)b%f12]H.BqSW%>"RS@_>F<IM;l;5buM:ltlbIg5>RE"Gl[("IOLZHqi/ojP09T,2Xp::%CHV*[a09n!ETEn>.\4>YU6M6$nDBWf"#^%WQ(G&SpSD:cXW7JXsQZ<M>=L#LuD$.]mWiX;?hS%GmQt=/O51qYErb*,X@m_-G\-G'@`gATV+I6-j&K#[FgsZO;"4!bV+=5R*_hT%#5(V,2urQG$;3gXJDr*=gN2@6ClKN,[.9*d"IeCC*-Bp[IW-@7,k*Zo1AU&pHa%q(^*MTQlYl?Ho3NkA!aj*5ak(WSmOfn53@P!6%Z,u\Z\]:)N:5/iZJ.QYJ^b8+D!Kh^:I,pm>>iZr-<L(B@$mn?=T\_ZROaB?`JuFfY^eA2^n1sej.k2L\(CMEGG5K?DP82Yqj[pE\%l.a9B!$#VcK^Jl!$;G@!"#Mc]oVtn1\ecJAFO+HJ/42[21k$M21$=h;Vl]DaKj<g_pJrJh20=la,YFY_mU=H\\RS#$!'/`Oa"%Ag%%jY.oblU[oj=*0c"k0<Oo%6i*N!>3]>9+A--BJ6TQ:l:O`'K%&+$LFEM1Z"`>'e:.k7&>nBdAti)[*#rQ0&MoUX,gK]Km[>F_PXJ%+>C(PCu-9G:5j7>K8d`[E:F!aT'P@,cPm"aHC*b'!jTce$5e-]JP-q=#RnW$h(EOU80pAnEWQ^J=`NjC$1V#,DhHClGete+j+8/S%iMU_gE)-!/6#o.8F*WC',kB=E%0BrY.``Q>g5Y2,DU/TB,<;i5V%,FI)SJh$o*-pnI/@$-2i&=ea/7*#6q8a;3HOaQ0/ZQXORbr<%:;_/pOI'f`Rl>#$HhWHA)`7&"=0]hpc3,tLCsQ3?EA0X_ia@:NiZQj;7&hrIlL!FeF,>N[2<fNeYpKsTg\UoGV?C@IR8o/%E=gSJ%#840REm)ocCO1$530B]rI>^DNTWC;!'6<**iS8fT",EJh$e?ZLC>L'OdHFSs2olB$dYEiNS8l>STb5Qf,E[D%eE%,@Mb4G"'eKiV%YdoM*ZO9un&I"!W#T$F9V+eSL-NZ8GE,rl5";Rh/VIA&_JOdXJ&M"BG[9o6[<``/`/b(!]X<@9PO)C@J)lkPg=.7=$T'1oQ0H5]<%UuT+k;O<1!I74iQdo;_W#q)1J-k2Rd0HZ\ak#]>dE`_7Pq#O@EQt(T\,g4^n5=Qp"7n:coC@Ao=k#Wl%,eTXZ>9K[o;[KLGYoSl#%<G<";VTc6l<u!jh6].C^1l`Fm_D[S""8Ib@:m!(jRG`3Y@=D3bhllOnY:AYa@*e`^gQ?1IZ7s%nZp#\Sr'1@Rm\mco#cpfGK(i[`%$@>Ok]FT(]QT9BK7l)\>KoYn-0^+)jFUV>r=MXbE!L"7lJV.'n1A@:LO\dq>90"(HR#KHQi-`W5[5ZeIkOXMmHlfVa&(cc;8WY]e%k-@tbm)o.(fW-F;q5VrY1i.FUN@c5^H^1j;@Cm`WeQ9fb/oDBDof2,!*D;`b<EGIef;fP]3/;'l=K@_#0jNBQ6L'Fj8>4lU9Wh:!%C_,40P)F,/?=fbJ#hU1R8h96(A@>RmlZF48X.X[4aV`dmR(ACF<N4N&/DHX2ni5AK>D]H,9J'2b:gbj%5[7@8JET-YR\9^,Pma:%%M?<%]\GodN;.0n8&\?Z^K-H?*2sbT"MQ#OA"(*H+oh$R#U/8Xt@NQ#?'EpajUnp'Y5VgVG[lFcric5_79QLo"RP[T%RaZp<9i=6S%CbR?nZeXq%q#Fp:(k0C;i5_F;.=%N$ALN(lWYi;U"^hu8DDMt6IU+>K]Eu)_Ga@nm\udCg"eQ?m74h&-.+jdtMhT/"$:$HF;H"8:%S=s^hJn?DFll35@TB?%WTOmJUV\JJV*7MG`3f.p!L"M*Fq##dH[pFr0lLGUG#cV?\SIT`"!m/<A^<+[r#m'&V'*:l!'=]B)&TW=%%g.UhVI[ZmZ:.YeKbtm9nND3fLn9d]*OGtM!':%Nb>nO".jYP.W-od6\&eV5@#p=1)-UGm3-Ga!=`<cl6H(oPp"GOtbl1KVE]h[WU%!X$Zc$5ATlR>ET5>kh[BDiM(bG8fVYjno$5Es_!Gab"H/?p5hi^bd<u&UBIB6NRXE)FN,3L'.Q.X<%AQj&$:@MsOcfA`2R$niIJe%\?X]XJfatA1a!%#:;OF>B,4&GrD(j;)\E@/:Q/RITVmC&#kXLF#V>bt;"#UTLqnUL*mgsQq'_p:pN6_C$+^l9NRp'4Y[APC)IuS>%M7!qH!TG:)KB[RlJWn8+=DDR3m7[,c(:^Kk%ZH*BJ]mF_@s!&^c/_TWO@.r_8N%?4.:ONA&boZ?-pWVE,kVlfbV6@GD&S5?orZh#%5b)aJ^sn#$CU.8Ahk'RrqHd<cWUICjWqu72hlEZ,03.iXUGZ2##45uJG3+()F@bhNla]O`pcN/fi+d:sR[?=?&ohiL]`CiTY=2XI%B.MK2#\5J.`WOLHkoo_-#1]Z=1MG"D633oOAT*Tbn6)oNE7Ul.<&RU(i4DrD,^ggQ,%3@6op,B^@XDm]lVO\^!8hLG"=%uT)nrAp%;91WXr1LJkelV/5lo:%F=MUQan9l`Y,%&a:8\:YFE<`)LlU.2FN7f_sf]``2Y->6-=!2N4Mg)aYbW/u)_aL[VAu@-j8^+G7f)gM1%p-;TJY/#oG\1"<6463JU(@G-EnoC4D\eaY[[43_ob"D?sWm_[_5Gf)R?%Kt(4K?jF8<fBjdksC\e(%sbS1h0A_gSCjc;H=R*mVeY%7LL@%FQMA"=Gh74nph@R1;N.36&Q"h:=fQMd]<kIY!?OF3Gg%n33Z4l@5h.cNL,Mq]gY@25Ftt3IROtu<uo3hSlQNm2Cun$J38Qg%+l$e>*IMY-hN[j<6%c(1Z?5GpY:.N0a@pQo=7FBOTsKdgC&<Fc(GtWtjS;oW=Ogng;l&rFJY5<k>F('2e$s0a/W9:XB>bjtm+U"N%=Lr9$@/R0/:-?%X3t^Jl(C1pL"]riDb15S:)751"b0i"1;l6:Fqjr/QO3_=%$Eb^GWJUFlJd/n?e$28(@!\Z#AYV\*]fVP1HGhUM%O'/pYCU1%t\**O9iD)M;O=6&MeE+XT#[PFNK'tIA*OmU'"YQl(Q"qIn[Xobhm8.8%H!I6f&e*#nNW?4/7jQiX(H'ni-Qu`]SJ6&G%$Y559^+\RXBjFFLkO!l&WU-spbk"B'Uj7[OY1+8K8q-OUa]>[$<:[jh&<.)N-1H]dj"\S=iE`cm;AZ#pKh[B"Z.b9*H/UjVoi@.U%SehkFaWqW<%2uo_0?&!_,b*0bI\J5J&h[-+glXsB'Ym2B(FHa\V=#rY0mmsE0"b]ON'2X0G;eRma7Hg*TKp^?5Q69skRf-D6r$i_%%H3HC'#+8eF^[GKpbcMgr2_"P\VbnjR-3j>l"%poo\9ZshGo8k,tDTuaGgVl".ft?ON!,gOZ$"7"EaE:R153PeUL`T(E*$&\ZBmF%$[[^25:"74/?p#4bdC(e<\&pn)UkMoX"VoHEJ@[L-2iZFJ:P^.LU^8(mo,sM"ag'M2C,d<(dH'c>T[Poene=Lj"iZ4@i>V1,E51q%nKaRTQ732iM@kuNnF@;6f;PR47$JGa/<^9oE0O+K#I\)iEO(8K'HjA;d>[N6(<alt>a)kGUVMaPF*d=Qg)sdFMMq($_u#PNDu96d%8GamBb(\FR.MqR:8gQA2aG?mDEb@I?Ni>hImKe9fq1LK9^<]=Y'2Kd\bDunj@n8*3W_Tp/M<J_[;e@]S2S.=/iN@R+SBRsZ`/4Eu%gfo-)%L7aZ162$(8Adq`$`01AL!)>j7PM#Y+T.`Cqg[_t5A]gehIk7fVh/8GdKbI8ZZD181UF,>^p#c%r)$Ch\jR1Q^5_5[cs45D%ZM7+e\!D!#.<jQLCBD30iCT\n,&Lc.Z(>]D.GSl[]o0CTBl`da)1%/6_$bZ.7occ+*habc/G(]XZurESQ&#X/f5-ra<^ue?"CEY=%\2%ERg_O%G)FMV:,C0jEH3KC4]^;_G"GkN'!_i8(?^'#_I!]0EEh0LNPOGt\Xo.Cq!p44T8i\rCRN+2;k&@l'd9E?@;[=c\>ne@L%K6*-NJ?-[eBk$AoN^[%BU(aGQPt7IFP/)l*q4>=Icj^PaU'-i51-nX7lic]YN<kUR+(_RRN%/uA=hT]l*8:^R7JeRr^<\&UA]0cP%e<F`2J8['_03m12ndV7cLE]"]kWEHki+oW?o$'1caEPdA:;5ah]CNl23g_:H/*.&uC7:O'$X4B6Ph4pN1QoQ7i\C=h,`jS)VnMn"%#`*esh)gcGLm)'C.+0b@ADc$$,rt"jA5B7tVWpO3_"=cJ=":Za&,MA5&BS`Zgd@5N*i4e^I7\ZSZK)gRof<oE>S$tr^A!FI,g!Gr%pBr)7"-GAss,^d5Y<]-:7dM`gXd=(o6]r`c:,AMb%nW(Ci0GJtGt>6Z\r5X&RideEEO7?1O*aD1R$beb+it?_`-EsqZRd:&`'#C1%Yui*26qsX0,qt`%R$*M1F7Bb(6^$Z04$;V[,Vd!/$#cIhq9V#^4Va^P@1f81p;ZrhAB>3&($C7a,?Z@@i`L9j8-7/B0muP)Lb8u-%Nb$8<P6T[J@-XW,T#>^c)M6-"C339^P2.pW^c9;jS^hsS&lYb?e`m7!V4J4m7jKh"<N2tT=sdY_&upe!+[J!8K3(cL"<@mIoFddF%QHZ8Wh8jM*HGmQA3JOe.__l"O0abZ=akJDq]Pi3dOul\-!An./_*bJoP4Ko]]TnG8EttOSj:.k[54^"^R(AgF4L'r<@TFb^e">Na%.6MsFKP0f>"X9!Sfgd:i`'#:^@/>[)Y6'&04bn$N#F[>V+-ArM$i?S;59bqEQd\0s-GU^iO5IFh`(RD@;RgS;dejZ$0X3@,=Kb9B%7jP@5.]92bb[Cku'!.-b#)IUoEg!K'T*hc#8$rj41F@K33NBc]JYg-_!$'^GHQ_MW_]h;(#FgN<r0f)($8$*Tg`BTB"p'K6*8[O5%[RZEW*HT@R5<o^M3t4gD^jXtfD3<\oeq055F+(qia)+MOkOJHp+p2h"crTu<CMeVU?,ZRi^`=uA%una?TG@SbXE%YS^B]NM>2'V'%JmRu*>F\&Sb7Uuuqud:qSD_s.J313\oco0Lgc4G2aWqA523as27,7J^K47="GF_1D/5F"9J1NqfZ@d=3/6Q40Q?9haG@-$sL"RmJ%VsUPjgjgAT#OO"GA=8f0X3ff249JB4$TLd8R66X63CE`04MNHX',nUG(pAu^^j!U\RSW'\a`;eMf=$q&fNuWDO()Lmr9cRG(6]b/%mm\*"!cT^+MhHer0>m7n)QcG7UDLreg54JI!gh3KS^A5np`jpXK](tKB#3qbOZ5l:m4,AOE=H(!aV*a]nD5AWn%+Ee%!X&QO=WX=%fjVKJQ8#J-Mj&8ATbaETZ=&M3LDV\r+D=Q-?1?l0\A_9XMZG$WT'p=4)eliH4%?7a8fSm$6aelM>AP5\^s2kX^':=Hj+T^,93(+I%+E@_,9dU2WNjmZ$i44q^:\CQ#SdISHMTA5WM1T)#[6Q1]VYlE?Q,pe+075@>*dhmDMP(Dth)si?`OKOm^Es7*66tJ86rmgn5Uij\%2#PjZ"df@*&skm%49q1oI*)gN\Hk(nM33QuF3SX@N>2;.Jl-/D((.K5cJ<N2S"Td1a-!3tV@m!E4+IZ8VX\I,hPeYq6Cq2TTNn'q%J8!:aDtcXtVGhid(LP;siGBi"on5iU#X@7P.FVl:T*`B()%aD;g#^>?:\eE/\Es"1,Q/W9FDAUa/V3!K6o][RbN.Sj9-C!LqNl7Z%\0mb?"l'T==F(FZ"Ej5)]_f)NH],WM`3@t7($*4[pcpL;c59fd)sbA)f2-E"0UXT,<b"[3>dXu%K-0_BR0S!7P+LUS^d,(+0I6/h%aC?$S4qEL:?U+YN8.e))U&gbISDdOJADh@?[O8P'E.;PtY=*X*MQO^'TiNqsqN.%jXQ[lKH(j(f=6a/7mWV_8_)Y(,<"`t_S<jht%?oh<\J`R/T?S6R<WMFNakF<SkM</JLOldSQ;U9L*8k.E<.m*-S]QeROG"!rb>U>\X^*+bU'Y72hQQ1GF?+%GY_'i]HlTTLq\Mu\M%L/;(9AJPVR/75hDXT[VS>Nk6N`d#9tdm5Hc>qK*]\sBF*"^sCDcO*\uk7j'K65.;uTM$q?R3!ghUeIf?<*@&++Tdnmm0"s-1/H*A%$e?lV]C8e(qVV7%*+T:k.rf+)%=)sV3b(UQl`LtkDFe*<\m`3+Q8#J-Mj&8A.O=fLYq%D=4djEOSlC#JlQE)C]C-Hu:"C#3j!T.f%b:.*:`tIEipe!@s^7cCC8XW1,^0)$92"L$bi0`N@a$%B]'k/iB0jm4.\4$6I#&f(2M$K.3;!0nV>S3JW,sl7)_)7<[7O0KkZ;09k%H8*-3(W`sM#'1r`LS*E&*_AmIJ)_Y0rV>I2;Ihi'5`;[?pa%P'e5_[?jp2>R8M7^:-ebhIO<;G2A]DL>E,*=@MRLi4a)$Bq(%,W5%KI85]?,4bjB;JiuAR`pPan4F)jB_)H2d%<_rl?gNQ)@3*ZNG7">mK=f/k&5gcHhmTYcAiTZ*;I%0L-t^7W;o7pb^kd?-$L7<&9/r%X-1m59G_\#\2&cL3`&J#jL[`c)T,2PV*rFll?bd7+Nb+>?:;C]'aMNID?]a>Oa@Q,aD?BC1Qhto_!n0)_HFBp"8>SRVH4\3"0%%#%/i@0XQ)1d]JhmLKfko[KR7E8LE+Nu(U:*<2)9%b9cg45$`UHK=V%\B<#je=f'H;^r,9ak3ORYgNP"a(fF!YP#'@,dIOmfAf801C'%G9LKdZ;uoTF34.!o]fa`BdL.n8#rB)Yt#R44LbJRQ5'UTDf@?U'>'>VG6l9J6s+)l8.GlIW"M7L;_E$OZ7+e!4OWMF>b#4"N?YVi%b[WKJT2e6bV9gV(&c8EO*mT^Lh#UVP7^EY+V)+cV'InMn3D&L/^i*a($?0f*[u4Tmk,1?e\`0;8Sd@AK%I^5H/VS]=Ka8Gj`n6mD%Q(Eu$8GQ*\::q_ka_^MVi`abUSI,P7O$[?XVa15KgaX=IVnkgCo)4K[$Mk,l/.E<h'+_XjHq?u":IU4Qk&8RFI%T:q`4:FsH$"B7%n0><t9HsBQG*.hC4pcL)dDX-(T]6;\R8kpg-SlL'[gC1?&D9;&r0`5Y:4l.tD#<#k'"GNI9J6XBMYY)HGrc+K1^jRuVgEH3_:WaK%?%d'[V4nKm&8#uO@?i)`/E.Md=!^$SUj'f!!jJgT\JuoMA"KHS?("#BgN^O;#9ttkaG<IS94:%q%$,^CAAsEFK[YS]O^`]U_[,./%%ITQ;LQ)$9&"O9O[Mb!VJ)t]KN)#X0+aPSE(WY>GUF)>FBB_Gb,USW3;RdQ3PuGC<#U>Xg2N-M*<;bN;WDk\!+hnGsNn]_;d=_6I%kr."WAjMf0"A^pS4H]T[V[=In7=4_n,q%PS8Wi,W<KgOR;Jh.e#,HmAp5!:6LF4b_H.t0:,m$NT'dEE((HWfhA`Q74*>bQ8;-a[Q%'+uM3c(Ar8@&,n*OWlK8H-Vd%6bgcRU[tZ!*lYQ*9/?0Z6oe>&4-3RX9-j63F]E.OY(OT%G"j53"'C#G;kuS<s)38Q\oZVKA;<=a%H&(jL!"!VNkP`j-91!h&-)]]eEQ8->5[Z!<<rA(r:p_0fqlDNPC0%IM2eD+1"@t]_"O7ltmBu))en%f\0]+X6@_^T@0hb8rmgg/8%38V'i3;1JeC,HRH/^$VS+hSfQ"3YE5+qYb[!1%ns!]G^r_AA?J9GrDpHeapi"(W8KR>945mnAdq.ahdlL*&`ObW8a?%_^nAq<_5B%6g/Jg^b[Nm,=c#p1E<Aa"#i>K/#qNf"RDmoB&c'n1*a8V/Ju#oP>$W&At+s3qW<[F%tHlTKB+\kTa[QG*H)*m4O]=W>%k;ghRA-.%&NDH7;0n`me'$,q.6?jRH"N".%AmDd_pWKM2'?=h&#Qr6H'.@Rr\[X"1OWLcR(\'H("IAcn\"2N)(,8&'m._q/bUNY^>\H'T0:i@%kt0``af/XI<oQ%'[f`=B#<O/<0ChuGcaio=NA;O/)fBE#GL(DS*s@)9#0Piq3-BFfrL+,L_fD'\U41@'[2QX?#0r28a52uI*Cp=*%&T:S>W$Hs@ehmtg@@mYa1-m6unY\(-'WM<m#&#O'?6O#s;?J5P/Tun,Md$nt_ptuW^S'[-[`*>[mf8"\JP2P,c4SS?j_'HF;$5lJ%W_?6]H5aK'@p&M#*Asn`\1XmVNnZL4?n#m5c-F+,oQi2KPp*Vf<@eV2<$)8"ab]2""*VDO=D5[<JEbE]_uMPa!Cg*&_8-$P2_U7J%<.AC+lO?FdlH^10,1_McFYVK3&'a-lh!PmkXX$9kRIFDW>%gR8?86^:c1R*NQ,P"1VO0MUpardA!%VqTYYU&W-6e7QDHiIG7ad*j%jp(&ber@7XH-0-CPV*AI7@?9.hoP"JFsAOXTWMcPp"8hkB#t6(L%f8N^Wqs=2!Z-'HX-/-Y!8k.5<,g]e;_nPTH91>^(sQ"D[<\<%aR9gqpf`QfIB-I88h=0h[cD.O*AhhtWCme7(3ZnH*<8qFK/-)^K<r]`O8L7sd#A?bM'4[18J8)0aS8<(P-UH?MZi.G"]Umum,B4C%To.6A:j-:D\0:K;aR9hdV"K.r:_@!*M!3)PaP'$!>E&GVP\Ube8UelpbTUU'"Sde=:5fb?h+;_+Cfqq_MqGuh6]j3FQr_=X9Z1Hj%MQ9-9fBuWK\?GZh-@;&eG'RhZ_H)?a/r86?;lB46ZP]<@4@t.W"VXHKL7$2JM6![NN"`"*X`MD0?<pn`q(-2l8SIm^m$sS3a;I5g%7BRg/>o,-d_*/)T%Li)$H&_W[7Hm8t"ff;iR4_J_Sk)Dl,^-mG[c?PAHOb4;T,u#07LXs2Re=R]UZ%64'1Xd;;Gj4RFoTSU1:[d:%eJ.fZ':b4*3sjr*p0Hs:*lc]S,,,RQJ0Cdn-Yb$:mkEmahcm,=%TNPV.b,K[UM%JgkVI`9^2gucSjql6rELG1L>T*lH,+p$p3dks%k-K;]lEg9X[W(Y0A<(>3/A<DWU$(RocR9X>RWK2E*.X9b*0t>p]l\8t*Wu^4&96U-s#qYlGZ1N$3:&GaLm(;QSge#WP<'Xh!nh%M%cmc_\?JO%N$o&e`iKFj+."=3sr;6Ro7mGi^GtcK3&&\_giors[eDIF3INXC\6pEm4<SM[bL8,go?(U=2c^VP=j''uCAG<rO+nX^^%#9l>moCrEMi*1F$UCH9-#+pC\NedWQ$ctX4!X^Gn:6cnGAgS@=qZFGuAmt\cn"3a#:n>LGr(A]dc1B6bA=>PrI9\=E]'g`#574L[%Ru%^0R_prNTB_L$rm-3":V!%Gs*n<P_P96s!$J[^)(_f^%NH*H^k;p-pTTOBnGr>A-FPs'!&Wrg.fp@alU<59k2tiQ@8[m(!cW9m%26uIF6TMm##2lR6;0%p2!(^j;-li;Ofh)U!!)@HJ2aY=O^(4kn,-.Zt:7m178[I>#r$ghHM_fD<Mb`dLo:Kns*+)'A%A$q@_VB#K%>4M`9A+F\J_`2HG"'iE\kSR\`Ed!S%rsB.Y6q4C[a(m7*2At]<'m<@Fa4:F6,iU>AbpcI9Oa=R9aI18R-CN\#<+*BPX%$Jk0$W:'%SjI%`]u,bi4+"&B$Rr&J;B'6S->](cR$3O5R\+(Z7m(]F_P2H1E#PiIcCVC44+5Pg(AO)+!;n8bV":H>Pi6\O]0A+Y<`Z(u40<\E%qf]2"!p<!bPb)LT&1MZT9:[jf1X,B,0IaAXc<sZ[88-&[N(^/=3E4/mXi$u'c7DFL*&8haW%46nA;'+JRhE8Gc-7_[9)'0cq,M2R%P/NE0N(TI68`jDM,p;B`Jl*rs@J(VaqL;gn`oqe&dOM@rcE"=,40d5F(RUIG#6'\nds9?i[,!V7JqSqa=^a/R?djn^5GZmKp,QUF%:ah`s);@qp;b4q'Xib=\YpD\s\)4p8r6Y!mq`4N.O)Q)TMQqaXle;\jdp]-d>OW"OHl`JG4/JOQn69KHg@H[G4%GoH(E2.nAcVF\%d'<1e_4T/8(E];kknS5#`_U%B;crJaCFJiMr:1TbQX4@I$S5!0;dUaOIqto_GH2KA[cW"V*A]opJPoX1\GZ[R7r%h\$d;nUBSke$%H\qPhF=lPG'(^\INh,;$eCQAa89$?5n>/US9CE#@a,O$uV#7S;WIW4+j:5$3e[8N(+s]W-!4o>_8-ME#cXWaP-<UAo8-S'8iI[3W%L8^4a?tuLsRu.jYBqtgIP'+T3Kr0cL=D_#k.6j,]AIH4Z1^E!E;;iB=TW4!/,ES1g7iN0S-.<hQ'cYM!.&W&^K@7bY)q>Bp)ca\t%7MR&R;%X\G(XPXjnP-%/W/Z\e=M[JGOj!$<UQ#V::n:j^\RDr'TZHQ,T.j\$X,RIB'_=1$'p5AnQeJAF'VFJ&.fR+q^]c;hJs7$&%<5`I=F:/hg4M0@HJ4qu7eOB_<.j-/g+P2noWte?."_u<m(+K<<7;CUE<D[E]X%oZ1.`]E1JAX7uG`DNBKt;/d>huPrr$m#c_a9(9%;kL^+W1LKc&ZWKla$LNF@uWh4,i-oigWL0=;4HhhfN]gs?ju`X:2\H<d6:R-$D5@&F[K,8$^fYGpnlbtI1"jNfpjBuT44k`dUO1"%.Loq8X-.m#:QCK+/QC%@F14s\,_AQ9-n.+_\+'V"8oX-ersL2MXfim4rr&0:Y]0ND/qJ_[Z*<n]p#6/;CWnk`f%<o._j.GWT=`Qf%M6/@]^9#+]<<nIj>EJiY)KALh[_Q(,'\fp%k#Oi+$+)rsAN1siK%)GJ"5!1EXG+lXB6tZ,>$'%,[_VTs9\ZjmU.on?<8.BmY3cZC%'*:_mO_p"XYIaB4&cO8aT!t45jP'`E]gO+#(37:AY,.(]oN9piLNACDgg)XrEr[U179R)'2$1TY%(+c@]'ppB.IS$C\%i7^DZb$I%[fKFmXh6+)X\\L>^;l&]^qN7<>#r?>l*m2B)>Uc**j_CB!\VNi7g:S83;#hY"i?51JV.0g`$RteDV7i*1kLT9>U"3b+!*$N_Mm,[%_<Q3G%"O)jl!;>AmW'Q4@Kr7#pTSXg84%Zug7lcsW&7`R\=DYC"!P--iCRS@!hg)?34W9#VO3O)",)qO%kIC/-nY1JOdF6MV'-a(%M7NO*UVNFgb6csdRL;Lg:C4V\^Zl4p).BCG#o$[hi$AD[Mh;usb[7O<#U)dK0UGV,DpHeM";X!48^bT8HSqXLhiL4S%?U.&I:X6m%(Z1C_XbWm6-;&[hV<Xcs''H.s=Nmr=.a1F6':7O:bAFJa]`f>sRq5PF"UeZR>DfCRN3E[TEc;t-2^!m]qg8D@iHu*2Q688BN=#ld%:tLE*;3>K[HjNEaW5urp6tT3H.%A&?J_'?O@,XF<])M=Eg`5Zc1AJd'-_NgAF?%$Z!([/4,AaSG9t.SE2JPRhQ5USZ5d&:8Fr/C`%!BH*uJ14tqhULWmjaMOp4qjD>Aom9-<5qC=aT[[d,\$qtFZ]fI(V22t^Oi-;,C9QQJ/rf&phdgl(DI7Z:rYt<lX=UKXB-!mN"$nA%UF'Co!lEQ.7-PWK/P=W>*g_XIg<:tu-o9D\4U,&#Mh%4GKO:UXLWgERjJ24f(RWB9q!Fp'je'=Nc4br_;V,^.fC%miM+g].%@^6&%(r$6CEb22URVSlD<YhGeQO2YrOW8MC[9I=e'k,93Xmcap^*Goe9t<lV0=+65V@9P#F\57s0QMQ-.C(gFb13eH#F][E%MgA-.nplu%m>Qgt$q.aP7T3nT[o2j_V@6/k$)K(P,[X\'OHOCajDRdlY,q9BDbjX@PuPJQ,ZIpk[)k@/RPMnWRT[%uK;MnUJA^=p#=OEk!E#^L%hnufu``2*PAl\H":mK]Z>""=MN+U\;_Ck'hd^b1lG<"d0jsj/,NTDt%1'_k8=j4``k(mXZkG*6]Z][/:*I^(F*OG/n>FAFF<;';"%1,(^rNNLD.e<5^??n5`L#m&*"b'\[sFTXQ_g0'bWp%4]GG<,E5ig#Y;A;L!pZFT$>DrP>gm3:s\V^kh\e#=84%(\2*>qG!]%)APe%#>FC)I$$kbUG#E4dgrZUHdF%Za,1fY5J3(?3jnc%$cbdq+9!cAr0GI$mT/+nSHJ&[FlC,MaI4f#@?soFW:,Mt_>I\&5P5OM]e+\I%+ne%=+i6iDXkd<@P!4(o;8q4mme4fWOM&3UgJ>_LB+WK(V6(5^,&M^@7qgmQ(5;1#&5%;GHILUNFtT:nH(A;.Ic'oR?XVj,)(_K9%IKK+L\CUVdH,j^Ea2'i\VWt.a@2rn2n.'Z)<gZ9f@,>7r1TXV#S=maSPk'5=:FN.lGYRLSVAf'T!(jehkguj@FpuTAr*=@?R"*Hp%pMg@1I?!qAF[l5*ggfRX1;B\Fg3fOL2><4/!;KJR7fFSNaRH`3IAqL]OMH'0[r+IDCBlp'E*dVjl"T"7:^U.oeF7[)OKu9."QhiY%\\cQZ(m*+-K;jdYhdfJ[s.25BJZ+2eSYXjXknZ;U5@p'`+QLWHR\FSiVl\UJGtBLf/W34>l6YPnY$s4982?"<c+5m-9EcQ?TS(o/%S/7`)3hLK&V)QPeS)/+*J9ptF9Bq/f:YA#/RiWsG6#p9;d-8$'FWo:p7MRVdgLk!MEomd0NX(<Up[T./blL/.R;k;P(0F5iG-Wa1%1c6888Q>p575`H`JI/B?I\Fqp>H<SUgL(k$pS44$_Y^G@%<oh1=OOPi\k=CVY\&0<]#Z1L0gpt]NN+!^Y(ZC-V!r_ml/rIUF?)H*%7m*<40_a[5/8U#gU"oR5F`5g;=Yt>_)g39<d,E]<YO55#iSIqc#AIUN$>Kk(0`=Bj5%i,_Ds(%869Z*:j0a9`dTRQl;sR-j0Y7f6%#UOM$^OXUH(k28^o@jg.)'[bJ_G1=Ti_.>7Y;%,"n!Hi?F'lgE0VIaWa9SSQ9lY>7VC:8@g!JCY7']%hZP/]?]2iPl!7cqUg"D6/%^NO6;0X9W,ZP/-oIl(g$%8gbN^sq&Z2mELK3BPoGQ>__0?qc<!]UeCq$]KHAJ<[`0hG-1sPXn+#,"Ebi9Gt6@+<tZ2$$CEs!>ZG=%B.&dH/Gd$2H:QK<))-,T#"Y;U6mS'jSXi0W#$It4P@IAbN]B0]:0VFJFETPX]c,;M)'N4$#R?mu#tet)USedHA>M3UF:p%FLf7(s%0IbIc^.ok@;[Un'.EKca8LUR6TWZS[,(P$MWtU:/YNG*Q;OZ`-&76fXPcK*V@%;&Whn+KHZQWOW]s7)HbG*8>s83k@0JFB7mC?P5%@CL.G?_#qeH,YiJ'?a5tACT6,]PC<[+E-0-FU%4-2&jHCmqhpa"pDn)8<PJl]q$-7$&1V":/5bgCj[?VQ$Bs42ak?M!E3p7]LgQq%d+c\2Z'Krf45$WBGndKi3K,Bum/``!=_`S:*h'^IZVfo3Wc-oSa&+hHAnBWXLkU7rIX>t)kP'[?pX5=FVW$i>aS8eRieg+^C-[?P%P3,PJhP0Uqd%\RaL'D&nApD5D+IrEAg8\Z>8Gf6ei5^&\cQF=OP^$WE$T8inL@,(&8\<RH1n.j)9KCU..sAaEI6oCmO)uuEC1]aS%H_js?Jqe$k:"/E!XsoSlh`G@%BW"\9Rg%QCg.M;G2[][;CPD*Y5a2>QB#-t"8=!o</-npL!u_=^]H^^K1X1>5;U\(<7R7H6/s#T<%67nI5$)8VnbRc6_$=[s#p:uW=NT]+'aU80E7_sVR;3:6T0cr1YnnWuY;6Wo(mbNkSCc2ZnR(6!RB9Bi9']]g)FTUf+e\\ZC.*/+K%Rc./'JfJ]gjJ>S4;o2]dC(o[@M&H3C"?F6-"me%MSnH,P!(?5[ZO()(8H>+3"S$rcH_WJb1fI#"S"5'M[XD\3oILWoT>H#^1aa,W%K%MSO&^>0E%4Cbu0GW:EJZo-Mf`VCrCk;[dRii7k?XcL@kH4!k=[R"&^@OT.;X[_0P=`rX*RT*?bGY(9Ells`q#Upo*R,_+rrhHh%<F6r:^;Ts=nrB9il`%)HpjuBacff-]/mVROdJ-@I=)O\s7#luA/hOEeZkJ3]X/B9a2[i],/4*@$,0.QAVnM%%GjIf]hPF=I3ZP'.%!+Y+5A%;TL,S&W[@(?9"E[8qN\^&iC-`4\"!OA+3bkN]*<R"J2/=-S6Q7%_XFe.%,$k"b;[UnM(B=S#kG:C_3Xl53^YZq6K==uOk%S#*A@P'IJ/^#7F=QbZ`VNMVe1a=>5BM@(a_(BBWXifID)"EWBi/f[!YX9luPJE/pRP09\8C$'Rd\QkWW&h>HR"UN9d*Kj&\%`p#)%8oim[ZKA,5abAW9P^/&FJl\/Se&1"#cIA9aaT_8r/Wr[s/rcs4<T6s5\/\+]_3!!CbZQ7&1mAUcgR+./g0.i/V1=Zf6D/$b$DFtK%'i_kaQ/Vj]mZ>Zp!"0&QM@1BV1kg``>_&fBW"^%CBISMZJe!""_C<HXF)65GIB#hDY![10,&q%HiI^S_.B0kQ\ac!ZKaa:eU(!A-%7YV<.eCB(FL'p54q^qO^B<V!DDujDSl:>k#]eb6JL9;m3pFeSA6SuPFDuh0UC5h)&fi5S`&R7;BUP(aO5W#7I;Ht2%'UJeK`T=0/%A%:H,.Q&0_"YJ0(,JnEYrpAAF/a08=fH#^)baWotj;Eq-4:E%oPh^0c([NNCL`+/8LbP9ViY%>?EHs`qA+j4?ht#$ae%kW,G91A3%c=MnpF0i%$OPdJFb849jC\KS3kUXkq*cN%\h=]ot?[1G4F8nGse]4A]AGL_dP_]83_Q)0Q2XGM'(B8]0L6A1TDo!50FnO)<j!n<L%4F+"-p>!"#mgK*8af'qa%I,?GA9A]e#'F)MX6V_cq9,)dp(K<^Z]ofTi>F0=B6mD#9.T/7*n4?)78GAt5sT&0o_-deLp/XhlTlP&%=LsZ]<=]-XQ0D!R!lFfGV?X;j]A/RZ!L&]<V?h=?qO0\\!g&0!Gu6^1@o.'h+;-,M#.Mn%CNDut#\0p7]i>I"B]m0iE'SOg#?1ld%987`rGkpr0j$nr7F%g+u!n<WH/d6BQ]olKJUB%Rb-h4E'eMW,R.6nk@<Dc0aiAd_V;Rcaiif'l;EPgG>V/YJ5eqe`$VC@@%!TLDY%&_%L;/?MhBZr7-an'@G_K;Ur&=d=M3bm&U>C#@oE0h`ckSqk)f<Z.Ka5PBmm23.CZdrm=&g(+a#+eno<i+P=U;sf>nR[Wu94aGnH%Y5S!e.08FGKb[`-rjH$6B5`IZMNV8Ahf^NM?a3)TH"LbWrNf^*r4TN8DCt'rNOopnab7$9]+rDYpYAG7e[fTu']/.JB9USDVUVg>%h24fIin*bW$IVW4EOV\)O+t]t:'<:%QhtYhD(ZiAIAj0"^p\%+C7oRYZA>49S`=mI[9X2+[U1&[%I8i;=F)70IYGu'YUFV2U@M+j%q\?K4UMb#uZ=!:=?d\Z`0b.$[EPGs"[17lX<t'5@EPGsDl3R8%;muCJ^G68S]'i]O$-I[/^LH.u?p4D[>$McPj*nuE9n_JKA]:tj%Fs=M5Bm=L,U-e#-nY)Z\_9[:Y8\37&G(jMAn$lXh,g.KM<sO,b3bI-3Sq%H_ldM..gU1A.<,NI+]m5`1N(tiH9<\%GYKm5H)C1bE%N=FN;Fr.e(]pa2oeS>:ukrD<85MKOYWZce$lV3E$EpZBtgV-*8rUlpt8U!3fj'd$^Ub3ZQ)P[?8+%I:H]4sW8e00A'<5j5d(:IN)%6JDK,99;&0(s?==\'1G&X]`mbAeY-p>_%^QQmft5$l"Tg9?@O!_Oaidnb+NSiKVP95[)R^.Am'.2GiSt^.(@7gKo$#;f)k4Q[2ud%kC^%^(_B7e:S)Hnr8+eG![0JF0I14?Jg8NPDO!P5;5,Qjp*fJH]2rke#%:Yg,rmrh<4X-#S6Hl2VD;-PEuBN!k+mGQJZPi<Gn]+;%f1B(D'dNET0Zf%%,teN*<jagu=(Gq\ogrc-oMne/Zo+QNF;>r9)Uj:<%Rg*c:".,BGJd0`2$'ADWG%PGg2Eg/WlXXFgI4+TW7IGK%1c;k=LqSAo`GuV*d:LZ^7C>7#:$3'r;!UXGVT'o[OL!Z>/UKfk<X%hD1YAM0/9X:id!bDqK+2+hXaD9+iZUfC?EF>h&4H/#-P9?K%=u%3Hl`*H(8$mU.'3[L7cX_q?+ia8HqAc^GnlsjB5'lE[6E"Y=jk'PNP-AXVB9EA04D;//(h5Sf.7lL%,T/e[7eSp/es`qR;SiUL%f!"%]>"[+kp<._saTF_;\s9.(cToj]jD;JL;9E.H]OK!!\<ceAUt$PP51td4X:m&-O79>Z*:#n_U9-itgm[Yco:md,a`KJ^>^,es%]'f:a^@88]h!MtH]tQquPO;3"Lk'/8R*#R560&2.qLLnc_`Rfc?*7-+)T\"/<c;n?=ZlM,Y<o`\'*07e.dKVQ$c=<Jm.;/Q<;Kgl%qG1BHp+8,PE[J+Yf.n+GfkL%D]OMFSn'?@+#bA0P39#/9,T6^t\o3Qdf=1Lu&9Q1.mn_UJq3rG'c!9E+L,(Nj"A=/9CtQ-+[03*:%Z2EDACe.d>HQS/.=[9P\<E-*o2jH$I)[sJ.mE\pplj`k%+N;u[1kGj@l$;=qltog:rB3Yg[Z<_aL5B6jW/<dkAK2V(osrmRhngCY%7_kYE61PiF8B/t%9oJIW9#f"7m68VUgHeU7m6*X&O7W'AG@tU&;Kp\snq`H-NWlGXA4Et:7@Z5qq.'$c*hK'ER%S'6]Q7WQ;)R\[%B8pEk3GWOmL`ZF)c64t@`\%-&0]E!M-2A1G6+IEgTDG(,%[_W.]>epg;pA6Fl'n\P2%?)25)YkcNO]Ebig!9DX+Q(O=H6P+XRdbb%'DprZfr`^Oj!B&iNOnK4F+U_/_KkDTe9TL\cLAMYC#uHo$a%W1[+c2]h8.ARS/7`9HCDNg*5Ouu2%Q?8SCq0$h2SuRUeE?o5^I?6%6;%fc$tk'R0qA2h`c/q:.8<2Jc9V$#;=62o\Y`Iq'>GLOYkG!%9"Yb+!N6Oj&=bb]9C"ZsFb;\9QK>8a&I<19?oA)L7;%k1kF?L=%g179qDmhBe]lVJ;p*&q'Cmb,pO&PdT#n2cTm'.V!fjW1FF0=kGp-Cp*%Mg*Ia8[q0:)0Q;3!MF_i!q2..CTuT@.?6mD`Ek#q[cLJ%KJ?[l1suZ5rb^_0$d`OA@$\Wtr#C0"f_^T9Kkb6+'9sIra!*H?&PL'IaGg=*[KlqMgSLfRg1L&'6duVb>/pA#F3=3V71RDI>X<+e%)os!W21$Fs/<E`9c4qpO7)Z<Q/99>oC!f,b,R7"]82\Ki;;.S0jNpRpp3]PS^s7+u8T(?i"fmAc6M+ACcGq7:9_166VlF@D;5;p>%O$dD'eL64Cm8=0d063)_H(/K3$]#__!hr.E^1TpA*5?*ARcW0IQ7"K+ggGQ$'KAGGS8gjE0ZP=R]>ph(ece"M*9WjR4-!m4,G$b@%Kj"t!-#&GAFEgQOYbI1iN`4^Wp6f#uRR3%#3A-u%2^^1u5ZGrlQ8u[o=Lfpto1Hno<-g'iGGi`ChVB"tn`]jK`@DNl7B_sCh8_Q8%'#^\Vjt9d!^tUg)/?Nt'\96(O[Ee;2(?Wcb4E""[#=mVt+W[fkQr;%*fGLP&dq\@iN'+HSE9K>tiU";=;q2Q<l^NbX*BG#(J1%7/%$5Qsg5gn(3MnH>9nLGtpHN!`1<'p*#\JX:b11A'>D?>Z=cc$YA"FnPub26aI)86?iY[t[aUM)52+YYDhhReE20fUiWEI+-<'3bY\%8?n2_9WOBp[/1\r>-[_F%S.H!K;mA[D_e<RI*RD25qcj]@9FG]Z:]+V6jC1jR:Xai<d&khR<M>Y(*LJ\GG,1]Wi80]BGmo-Zoolh%!24053s/kDnj0S-\J4"^10ML6DXtm5SI7#5"TFJlPJ?<iipJSFW50#m1<ZUDhmA4?%_;3c.`+aEg%ueBBsWq^&?mc,$pg-!9(j`s%Te9o]9F.G^g\Gc>=>`V(iAZGh$7teNQXjc1R6lM9@3%pe])VI)P:lnjP-MBGLrJjT;ZTH9;!SXS>!ei%d?1]k4Z9^J"7Hue'2frS%Nd?>D17c8'72#(`kLg;"(9G=u6ucKG%r0J)-D3`"3>e97O'ZiX9Y=jn#XlnZc%.(5M4/NCBlU=raGF")0W-3@2XtI&\VJ:dAsL$g%)I8r0d3_%d]!O<SHrtj6`+<]ud-P`q0<=GZ(AgCFiXZfoL$IM*UO'/K'=T^HI?(TLosKX+SD>mh*G+0s#ttOKV0,a(P&^V9bbDp'%`h@/3%6DG%nB2W8'8t5#6HA7^/Bm+"LinN@O+VZ#a@=L(%HG5R[-JJG#>?]\&fM!_N=eM;#)X$P:#E+IEPUk^+qVRj!^J3*)B&ik%>+HlIN<?U?e<lqL6Yc1Hd't$hTlC+^coAaf.LV`>EGRqp\'R*B;?Xg&j4HNRp./j:J<Fp]N<<]@*a+>E9c>O8`pq#hha6@R2.j%u%co<ptcO_"=6SpVP?ksXs+:X;LX?J^5BH.WS0q?TMN_8.O%k'qq=J!gWGld)/*Sh>H(Em""."U4>I`.JtVm1508e/+G5h,LH@cN9,%`+lPs5U6WX@cIS'l]K3,&[KZUZ#R^:jTm@Vj),L*`l8J;L=Vle&fM!cXDC;K2#*$lV:;HQJRZ<,2Fm6u3(l(kM8mOq('^XSjeKQ,%I(N],eP1+nlSs>/NK"%76)SJoJ)7V(7.p8EfXQI&3&pP)U/<,cN:!\`7ql`_?,jm(,[7t$`c3cs%^C"Y.XQj$\/V0IE<0#75Mp#A%(6"75pP*!H)B/otQ5sGpfQ%^0fP,G'.qbF*\EBQra2SQV3K-qoU;:E4-m^[Z0M?H\\?.KTD@8D5^tPY?)"It+?k76]",/9W][,pr%8-s$kHP*_QTbZhKln+E(F`)2'G^GUX$b*Sf*U$0?D@=Nf28j>4Br57)]k,'%XpH)dhD1-"hCL*H.8ePGEXSX/cVJec)WaTY/P)I@%ko.h'Jm>O*"NLfqiT)*qH]'+\DfN_^/U1(E+`[t31rS`4PBkJ@j;+4J,/m,7=)O.)*.i4;b$^SfD3:o<<jnDNEf2/+Ah^]%;S#aD%Bl:c2V/_FKig`XqW1."q1:D15\DXW@Fq9^>>[qR),.@d*ORs*pKruCE6ECJe&<^pn>F`<)DbjqgZ&#po8V:Zj7;`-9'"VRj).VE)%&T^SFNk$HDAo9n0Q^0u!f(8#4k*B#DEg=[f%_*S"h+I%$+2@MB5CFX2'kF/K^+e!?l3]UW:=AaRh'HGRHl(IFgHEOj^Qd(\UW]De%&4kAs`6q$GPtUBrU=HMN5ITsc>mCca:u`QbAncCMlU3J?';7<V0[HC1^VBR2_g/eJ<Culb=\m2hJR#p[0QTFrr!"^2P'nMGo^T!=%W(C1&j\]G=a,,u+-SOqr+=BdJLc1sk05#0C[=olo';XfU"84`_hS<paBXR_=fP)HlENTS"XBq2ZCh_<jT)-*A-f:(t!h3DPPu*d8%H(?o6>)aL].5Dpl%%2@b8t$9SVp3]CR6Z=Xeua.sB#k+@:%P06KHB"1c@JMM4hlQcYaudn?mcn*q!AMP!WL#(.l9V*B^<d%aaoa=%lC&k0aAOo73C4=>%%3,hL<T-&c&h``/pEf5"RF_tGh"K\.2jW$RTR@!SX`4XVj>OsjQMccG;$2)Y>>R.:@;2N03b;>8G+k&ldi[Z%8*4kg_j2RA.G:_uIL0h$<@=JI!]VX-WF&EQ#$R<_<5/Q*CU`Pp!/0BDqBZ\13?S24fWN=ab%j(5b68@*df,tEV>O=.9)Ooj4piT#%R@5ZR<@EFKW_+TQ9(jVMiO:WFj`'+%`<+KIeuDU,4aAH"MP;HTD!Hd(P^p>k0;q[P79`Kee0f0jlB;6)I54'f:NH*5#-Ups,gpVr%,f_/\n!E;b#Is)b8Tf'*D`Ta.=nTlUB$1PbbW;=L>2bN/8L,gYN=$sC#rZmZP#tS"',=+^+gda[*3*;S7S1fdB<"fAUES2Fb"9mN%em"q>#pbB)a&L2Q*i^!FTLq5F9"IMq]G)\Ggo)^aXQ>?U19u9k80!rf`P[.)`-3Q<Z86%VH=o`1h$-ZW$<p"2bd-CPH;8p)f23e(%E`>O#B@l^)Fn<6r`f\pt_[8o;C47AW+ut:^#^)S>,hL)f,57>-Dhr.j!E1RJhPBuk[7GbM)f&QO:,GSl(9&(kL6#I,Phk*!G/RHX%_f?QN-:^pIDAlgkCfco!A^GGfbsT_$JfHFu`g6eV"@=#65+u8Qik:Eh-4[>]*#jkj#:=0"r@)8%:qI%obCLKL<Q!!-k/.$LZqsP]%J1Ve\[;c7e_TQj7-$g[cBp^ltbCN3!h\0:U#,i24UW_?3Y1aF^a[rTna_@[3jW":uCeo:9a"CLAq+FK"JEu$miT67KCA#A6FSR2e%fr32P/tX^eREH7L*g#e!5F=p,o1_gA(Qdk,YK<q,_<#?oB0q+OMIp3S[\g%b`Bi@Zeje0IEf<UbC*D$'%P:8)b9u_GWY_T<QVUXG%ZapX>j%g%C51/JuS`G5I]UZ$q7-l_7lPN^(5Fd@>eHl[mHo]qqG$L"[7t4:(39/1BV:h#$i]b/2mU>5O,efe49FI[]<Q-5(ilbsr%`MlU_3A?F#eGsZ.]kN_dZlTbf0Y_$)0UF_$MJN\+^R(2FW<).O_5`H?qUQu^&PWd.;g7Gt7@8/c,kK6:0V=SEMrm(9abC+d@L*l[%%R?fH/ARbhfJU<q!TlY3*i$(/a9aO2O9V*Lg9:j(I#ZEiO"a'CQc2gEXug0c<o+S;9,tcZPQSuDXZ=9D7E<URbdgr@EV1Wn**=sg%3"I<O].lX"\H=4lr;#gkOsoUe:X-SMS.&fI1ipg*ZVLl.3gPg7[<+LN5'!bVo.lo81oqt8WG(l5M.#=Jm2@<E+_O,0gH%9h,<4Zm%omeL!_;D'TL\!B989g>W8)_]NY(_)F)&YU@rfdkU^W?[9HuC:Tb@bZ1=mcQ6[NjY>K:O/F0CiOtS@^#@THne5JOf2]1$*=%gAnui%T8t`?!YU7`?qSQ12]3pZ^Ls&F%$r=@:eh3+hH#DL+iE)QUl=!=Z/j2/bu49a.:Y-bQ51!2;?j!ul_l3\",L-;Kp31"d(+e"+g;dY%0\PWZ-K0q>/ql7>p_M^LB4^i\pes(Irhd`XHVgC@CiR:-Em<tOZ*iHL?5O^%/Tn"fNePN2h-nW+&?AY4HTgR<FC6PC6`HlA`TO>9%DQ\<N6TC4j1bnZF&'X,mDXBpA%R(UkKJXUE!$*U^J3pI]?J:42%#e"aYorrYFWPo%]"^Hgc7FkJ#K^b(%#Xhe?C&W.39Tk>^1pJl%qWWXr]T*rQa(&jFJhS5M"ae6I?c,MfN0/N3FS,+(@=n4Do26KK>tLp'f[BlTP(GT$37Qlo"d2%)nti/_d@uVWnZlNlB2ZF7jmVL-%9Ta[\]*M`nQ)Y%J.=bb_97D1.\i+DD286#G?kYb:<SG,T3+Z!EXZ",o-GNL'LL=:@V&'\l\],)2p41MG7DA#nE8Z^/%O5*kPLP02%N.>Umd'1n%WBI1XKb'*`*>lse&>e:c;J4Ao35,P%V=X1.bkYH-lX>^!'j.NS]$S0>ot4=Q)(d,e89^>\R!;D+,m5uD%k8_6;,COE%>e*sc5#ho?-j*2/]p5YKdlf2>Jrs9[p78*(,0unpY'^9WN_TjRhk`Bm@QogF'*dCYKK"iN+^UsnA(:m:$k;W$eI%C-%]`@G<c61[%#G#fgd=tie<@>]rCl:>RSIgFOo!IV6.pi\!7\()]gGb\mReSP=o6n5G#iq.LK2*8FUD!i*F[Ef6fEA2gnoLU!\5J,`Ahe&$;TK.c%3@KTKc7sqM-aP71Wr>i(,g`P)@L@jcS3B!m6BRLs>pTWH=YNf$,Vng<+W%u)X+\D`<!e+hke!jJD!&C2KYZ(\UFIDu)WQj`LE:Xa%/?)7_3AuZ,5#jH->W"hJ8P6*,NKCbepRi*"d6&YR&`+)L#]COj:3fbE)BllImM[7HDsj81/gj;m7O[*)BnRJ<HIiEWJJs39)Bk35%K1:[=3q:[n&T[ko$QA!Hf6S7bT'CQ\*/uX;WY,*U0TC#l(X^V9dA"3GRc(2u?+mfNLs@X5`otN\'6bM>3bG6$EiZRZ7YhMMeaZT`%"JX9O.c(<hk_.9[D`F/CP+:;rZf".fl'Ciq@-3PRE6+j&?:2aV'7T`YF(#4];8VWLlj,;G=9=:[Qs[S*?Y0Unl=h5kXUYu)/&,]C%jUR7Z%p8W#q<\cmT&6I'qWCMo95hTDrMT2Zo3]0/p>:Arr2WUXqrP$Yn,DjhhgbXrcX6_A2h*'%s4,_Npu?Qd/r<O+O'h%Y94cao%"U;D`rOi=2r4d^Wq>^Bc=$M06_qXACs7#t?hEHG`l"@d.gL'sLj$3J3WuqB:rHDWJnE79q"8(>tqY\[SreIttHdh/--dVhkgWtBF%l^WEJrSm\:?bH?,le0%frjs*GbNlq#rp(q&VuQH(^5j\Kl^RoGrke^8p<V>trql!ls4[_UlW\`5Vml]q^SJ?r?S2<FDjY!C@uY+t%Pp-,ub^KVs/Mg8P`q1Bm)s57Y*:7qVj2JIM75sd!6V<bj2qK=o$Jl["a?qjqIZTKkfG6MAXuL:M@&VbCZjW9n@4DShWJgP:>E\cM%GI$r\(S'Gr)b_S;OIHGb\I8iWNeqs8Xf8I91/N-?di-`D#u!KDmpm\"Pt$M&?feaVRp\b-bX4JeND$Ba9pTVgU#3uEU)u?j"KZSO%5^fDE2)G!j7Mm/e5)^/beu-H)]os0gEA(VllZN5%@L--@O/>0QQDQ2QC=fI<\;K7YH7)"1SEPR/!E<-G-a/.pE[`Kl]F2+JS%@*!%p5)G5\AV.AU>)u@%,OQm?ojJQ\N1295jZ;`qN;K_^m:bs.:AsgN-8XNfnBl>OB`Sq&7AYXn5.Du-g*SIkfctX6DlM,$cHN,.-=WX%I&Q&G]tPCl`WCC!`,F4BNp3>JD*r0FL;9)$#Lr[G$U"%rKsJel%V&BADT=_WW4PEOGo0tSE7suB5iJ*=nr=Aa2bI&p(?^r_=mE`G%5O+BT/JDa^UufaP:gl@=]fm/'Yj@J-??bU9SulV(k89M)X/&,O\D/$ES(r0UUM5.sc-n)\n(T1QSF3Muc$8'%;Ref)g4oBKf[@\"%DWG]E*=m]ZR!!bo_ZC^H)3GRBQ%iuE`!pi!+!bIDUPC(o9mCB^k0?O&Cj.MCF5e@fF'^t,OH5=*Is_aR:/'1ZhNsG]N8^fDX7Hs,%6fT(78Ae+93l0%Yn</IMim#]G'a=huTk2Aon<efs8W\@^-,]P,1)daIZ7%nN%IS2t'0^Ja8bT6[iX5b0#ROkT1;R_#I6/u-/BUpp%j5hi(`jf0;kr?km@8%G;p0#@W%gr#=XeSK%HtQk\TY(pamBC_0;ej.n*k#0>co7u(qbBPaZKq"OEPnLh<X$>0ChqPS)A$o+k-(Gs%6\>c%6m__Wh[Yj--&3n6E9Q6!/3iT9drd4XIaR0f#)pL2F3pJUr%pP)$A[d>AiO$kgVP+]q@F/&e(8Q;T+MBbru&@d8XoekQcYYO%E9Wl!$^[(%X']9nq;J&09-dbuB.8Omo.7Fk_4IJ@/n/&$iP)a3*j51B)8c&r2GF_rcK5Jn`7]f0lo:IlLaQh6#;P@WrZLX!6R%CV%G*k\faj-D)B%biO`A'HlU=Al^h7^hBq#o0a)m]B,B"Y#5&g:D@)B*3!%4a9QNkt:I<*#^X/N0J,NH#;bY"12MFYRtJeMA.RAATHg%Ws'+?l]T]$1g:r!XQ9U0G8P^,;Bu,h9G0t4nPBUWM:uOBFqQ/c'iC%Oi]n>@N6uVWjZuTe/i=%<o]t7h>`uuTY2"oA%G*hb'ol^R%]-H_HoH7rc>,4XC;Cneuq"Cr^=BP[6:"Z,*0Hj,hY`Wq[OKof`4DlJ%j5FC]mDTe^%ZiT<R.nH`K,("-4o0`Z(f52M,TL%u$"-$7%%gO(pE0F8dk9-F#9Cp'l4;<h*o.iOUcSr`BIG,GHo$`A5i1I`<MrBW:\N\<[KhLQeYhql^,/TUf-7iD=B3rIja;jPq8Y4Jk=6WjU%n]%uU(2mehPd_T:eo&.aD2AL;^ik=Q$tmH\dGeuD+G-*m(dsXq;1hD\2KTLYcGgA=dQ&G%.!6#_+EF"Ta!J'5/d2:DS6nS/46Ki[%#Re4*.Hm>cXtb\8WQ4`J`\a@XdJ7UpWke`DXh2ksg^,5!U3*N^&UIYh3ol+nW0E0i<;b<;YJB^\CHRPr5nQ*/i59@F//f4+$F<dk%Wu.p\A!;6k&fdQ#/:kHNc?uJL`OpUXOYAGa4b]j#$SNa]#a'mNJR4*Pr(SE;isaTF1.ta;)?+GK@)J#GW:#;]3:*0ZZ:FkjG@d4+%GM%Zg9TInDgo_Md?rPGE1'iXee[Y3jo<<CD3$E6.on$QI8V3Fj[nJc$EWHp53fs8I!gHR\,+N#M(pAWnr009=q,)Cn'i*!Ec#Bt[%[Y5CioHBaSVm#&I[fHd?ru&:b6.kCUHfRje\8TZ'KmW&XWaB+Gm_^W#Q:SLkcVb)dk#l``@Qd@?>ejtYLPu#1oPgFp%2&%,ZZ1SE%E&Lg[,L/aeo#B@e5qY/:430)<!!mVj3@KJAF:ONX2k>";aB.PP$?FcZa.g6?,hK`L^:@G^Yp3u6BWuoO,%ZUs<ol+'4^]ZVQpm1J%,l?n"h[t3aheVQt(?N5q'<Y7cl4LaXYjc5:L>d*GN*M6*^0sh+H]<Hkg=0R8JtSb(+''e=G9S)bG7#U]1%l'&Gh5UP)ldoe#=Rs*%7S(O[)A^*A@FjW2+lWqi?@\X(p)<g_W[?CW[3,mSceEXQMr2K^18_"Q7pQVWj83.mhh^9MCBlAWeG\muK7ttF9:m3&\.CL_)ts'@%f@W#upF$]TFH\O.n]Q[+0-_6PUnW8\bP$ZR^@*q6Pm-=&2=uSg5H3MRCfpUU*tf7ecD'<HoR4WKhY.rcL(YC<+.&^IDr[/nMdNVj%EDK73f4iZOf[K_(A(R&+C6)YiTcdJR4N?p7L;bgPb(uF*Q6+HdH[=Rbm$m>==VAcG;/ci.gpaA%`FtQi]a*nM%:c>VFsT^PG/GBY%pDWp`d@*b%R?:$YG7"4a'&Iki:ib@-5hmY$%MrS]@W+\<1_aNBTR9l6k9YL@0#C>k[Q"oN&t<T$Z(!"6P+<jCHSLi.42X0:A92.[%QO'Zbp?C=Q?%SA\mi*Gk`:$lhT\)Gui+r'k59S-dg3QMDB1dL/fXRm)*RW1D=Bu*fm1Pou$r#a$fBjj$LHgA7K$Q3"=LtcVkH]bT%!N_./Li1^&FTb68"#NHd3[8e5D3Bjkn[YJ23lC:7&rpT%.V`CgF__s"QGg'":7t&pk^g"BODb^g'Z]9K9teQ\@Ja1!jgP!qVYghd%0,MP9WtOAb/Ea#M3=<QHONW_@$jmhWmC-Nt'u%:N2!>rIg;?Mb`bb3t0kgnI<r>cfVECpgV-,oi[%F#m=>kacfBVaO]'=iHOl_/!%K[HnR<MEVU,IQ0F/1>RDOe@Y/l,RW+5,8Z72))^q_Gi]og1s@l(T(B\ZmAJ8hRF-4Ac&G1o4h]VaZffbbWiod;q`&E?[VN(G$BEh%I4op@C(qYg,4=?sjUDlECW%^?A02q7It4q-S#p;d"i,Fkk<)/XCg]*el3\Fj#THHsLXjF-EBgiT?`i+i_OI@V'F`\<5FY/?LriDB%dI2>76t,F(8,5%9%1cC/2/th(d2D-F`BjFe^qO<aepn46hI:8l^AAiGknVI%@8uH2lLu$Q0FTsPm8dLHBZWtlDUl.jN^CBY.1,9"%DR\n/Q<LduJYeoS]/F`tO.(!r.^7Lkk`k*R5%[;jI%=QCiNq]F%F$u$C?W[J<5#nP5&=38FI^2E5;>Sjn@i/5eEi!8o\(L:KfaT4%.>f28BFpu!aC'46m&aP7R&SX5m?1eE>k^/Gr<nb[r/M8JSNAmFmTe3728DjG[-h2ITblmT%\<96dg*k;c*1g[>FhSA+$,:r`)H7B%[QuNZpI-#U48RrTOmZmH?rbA=4T&4`"&853o8#^IKN?5&OmE>^@3=qc*=39(*r<Wta<fq2rMNHYg*5Tcf1a?\@(jiWAmil&>`*T?%C[u1If6'>YPBZoj`+l(:e'N>CoeW=s`T4hp\lE4k3gS3^7;CCSk--9)N@\WV/(pto$J%t8@B:[KKt88N-/<+J(qqXq$2N&caF&B%%;Q@ec%ZJLYe]A(1:Sg'Hg:XH(?/De:[#=]`k3mkR3d_%7)'Eq)/ZFYd"UsaHlNUfSTNoJ[5hl\q4(1Z_)8!t+N4.!s`.3;EQgD]c%R8:5BCL+OH?Df'aX!HkGKeh;H0^6ngXD#,JCd;^j=eX95\;jV8a8`P,n-LtimMKWb]A)Y]Rqk?noP>Qk-H`p&9'e$C$;'qK+VB5u%3/Uc[^nE)g^ruXI$QZ76DRrK(Oil9Ae\hm?Tb.5<'E6S$![(JjK/V,'*T#D!P',3_:C?Lkgat:l$nqf2<rggj5Uk!af5UgDc//f5%a]?IT;JJ4NL,?Ka>%RpLfVIaRPC5]bA_C4H6J4"2eZ0$:4]Q*(:FSX6P=mN2ei]B$@gL6Rf%q-O(7tYTDHH#24U9ll[+@0g^qq.]%PSg_aVc?$W2Z'Hh5eOOdfPkDk16/F-D28#AOp/BILFdB!'sq;B!mm5N660V?q\=c7-6;1p"]u-6&\<3/=[IKEg=H-^]BYj>_GX7e%2AOd/!c$</6[')[-t#UT\(E8Q-R<LeI8*pYg]aNgFU__</%7X-eO`nSqP"i6-?t2IhQSVtftpNfMb8GDSB?]gaDZqs$cgX;,I(s%%%,I6/70LUU$,EQG*l(7/"1)Q11fS.8]X^#Lr@B9X&2hDNN*(n<c?%@]8%oEQm8/]cS7Ii"APp#I3YS7&P6jRD^X1phdoA%5M1,u4%3huMRPqDWd_Sd^8lMF\P/hT6J=h_U2QAKHtatb,%0\)-0@/;d3fa=bn8&R830Z)ti!$H=nQti%k,rp@(n[&K))s3UKj]VFb'<;eN%Ne"9V10UWp(ES#nQ<XmO-^;(oZ!!5'!LpZ3],Jr(T4CVV&e/8CR/'QP^jRrF/tjKHK]@[/#S7CMgp#U6Y/W\4RfaM.#_q@Qc".Z'%3BlW[RGDf&<$THHDHM)65;r2#j&/15#\Jhu393Wl58T^)Fb_-YP8mR*<0j5%'U'59;N5Yk"_39"fQ8Rg.$c7:D7e"0Y;`t"P"7\,%llt^*f[ep)/4HRYZ8'?a>0I\1"Vo0mZ>6[p(6QOD+0LZ?-m]'mXra2*^_kQRj!cJo7Rt/$7tVa":;]^Ub1Y&C<mWB30D2k,no1:@%:#=L26ko`l>HYH<ac?d&##tjA!O\GiE4-u&(Y'n.aWC7rE,AmM8^^2Q_P:>:>Z*Gc+28&8$VoV,UWfj$Et!XuR9>Rl&ta.;W&pn3%b),ji&YVq-73bYI.X%uhj+mm\iL4"UWo9Btn3b>R6X`12JI9pL=Vn"bQmj'Nm7Zo>3cK9VOs^TG_L@GJT*g<^M)Y/kUeE&H7aN&!%ODF*ag\[(NXAA`]R!X^P1N+iOdLid35Tkgr[>LO`g5@@MK)(la$Z2lC-lAMr'ibHq0Nsk:$9Z?QnJq\YN)<H)<Z""kJO,^*@':98%$&6i/O9(*+'o^4c+G<(oifq:\7Jd/A5eNE"V#j`pSjHc#5qgH#/.Ymka:*W!>.#QE==tl[YCs,diUDs+P6$kd8/7!*eADae=Y#Xj%aj&2;bQYRQb\9_>oHWjAB"'?G;8F""lG^2(K6CL^6V3V+[M2-3b"PHSj<8Zd[0tq4bB$Y=U.eSoXK0,rjIE%S9paL7@W)>0+LQ:9%d!SZX(.lgi'd/$4j(FPOKV.<pHs./M'JX8'd^=T_+b0*39;WZbAN7Qe2ddi/p"#@uPc]ijDiql@06\#si2,H?7Cl%pX4U\pL/X4s%\l;*VL&7#XH:I2RQfLI5W_G^_R9g[@X7q3=R3\UHYXI"CoLajM@X<3e7_*%B;da&hkbsJnooD\g?(OAX>u8^@8Q2It-h[$f#*ng>%7kOZ]5/@=bhZ!0WM'B)cpeQ_)q9=]#qYm1iIOM6=b3JkZZML8rIOM6=b3FbfqOt!>.'"H4lA)\ATre5XVl]kh;b<>e<DuA#Z3VpX%:rYO_&,'J<Lo`m?L*=K3cVL]%+W-tn4g^^b[3aqD_Y6-gPu=Q>?#='sFr@$$?H9(Oli8at0!7nqdZ)o3P+=<+P]q4*N(JAIV-TEs%9`9_s>fg=YW2s-S.eLpf`m!W)qX7uerYAl]$=I(i4"7?a:4$Wq_jQ.id][/33NL<d7e,_#b>p3ZQ=WOdj\A(G+n:_*UdS\n-9"lD%.00?7i#6f3S[cK[L+Q#K/RV3e9Df!s"5`BX?fkt9KTeA2]"s:R[p*d=T/K9*ZBC`.O\#gP\OO@o0uQKHn4tb.>8l30b$`#p<<Qg4%69%WQjAW>n+?iRE[%_?k5npXo-ih8>YV:9L[UBaK"_kQFV[FW@(^Y5O:>=_*$]&MiA<^6'#ae*H?oFBX4Qm->2,Oe:PfeV6]:p,t%5JMY*900\X;Y@'cJZ-$<Q?D^p=:6Sh(9&^?Y!64DJD@4<ZgA`3[%=mEJO^+5aG,A)NnlrsZDfrE.VVHqkW$_!#Y-Yq>13&5cps#8%XW=fL-5@L'W65MLK0-nYJCH`'ANfF*<>?d+&5aA`If_YnCMF-@WI7#Qm+m+`WsSH6$5riqFVcNaMQc'W)"jCuajRK)G49kr^;g.5%oA@U9qJilk*3C;Qlc7ELJ)G#=Mo$s\J=6*CQ2jr8rq=3jT5[7E6Cf#3$)7W]*=0[-EAV?BiY3dRLn&T\87`>Z%!n8?_QoSm32Koa%\M-/R,oBJFf<YjI>U#s\`WUq>i*b0%7>!1N@F]`@73\ki4B.G\\aeUfG2\N>1lLM!b&^YE2\7^_#\omAo45`%cqAWMb#:An5pi27%7C)7G+t=tdQRnPM@%(3.7g!"-E6"nsl72Fs2+B^Z&4+;62S.9m:PJmZ@a.J8auS&_)A:@5c>04+a:eeW0]!t*@TJD\P4fK#:=VEG%P0A@T&hC36`I\.5P$DL7]L/Eoat(JKTquM$RqpYjML.QZB+"%`@].3tL.mY^<]j6n$PJ<Ia^*S`->Y(k4"po<6=)Jb19`l0_7uF*%4$IgO9<Gi_rsdG"L%D_6WKH1hC7r1DpsC^b[6AH7?Y?LJ8i*s1+-;;\V0+SLB<\Ggc"`97CJE,BZgo@*>.YfER+je!eRQ;5$G[F9%:f9qtLg`^.0N<50@9m`S&Z]s1"`FBMJ!m2X1_/KX=b#/+r:K&(o'Y+`Md!;#4X_*:]1tAe8$QS@9.fgGd'(Yc10_C8H,B(?7P`FF%Rs6,ADO#iXPE.Lo"ue:-*Gb']Ms/.=c!;uJSZWn]oC1T\-m>CQf+rd#@[1Ta.8h_Un8:h8JIumRqisVpaeQ`V-M.IY3=@+6Q92i8%l]DT'cM$)4=#IpT>*0rB9Ta.UpK^o@]XK<1<SFF<GTeo2$jZTNQ#1C\%3ItJ#"_mK8uQgRF&JV4Vl)RE/+YR5g5=p6aCu(KD8s.k%HG9Qoc?.PM^k'f7X>arf7M`fU6sWo5.7hVY\5GS%(B_*q(;V!()TMUdE)&%_`-(br75CsMQAZ0J$]oNB^<W]$n48jAeTY3hX%d=6%_GIk1,Tc8WWWt7N^InX'NgPSGDVV;51Cc0F^hHKcW?T>DG82np][/3fD!q%SK^lKcjDrl5i@s.qf:+=k,c<70Me^AYY1'Z(HHRO7%f@4?6Zm5qo1gkXIj^3o7#%W_!oe=qAXeFI;`u9\8ojK'*q%B^*(hQ^O]tnZg8hK"tRRn/eVFFB5n3/#e.kIin!nic2_Z5nd[Do98%h%'02m&S`S2SG='\=$E<s,Kjd,ds.PW<'m;#(F&)<I/;EfFb<FD!K!n"td@*NekT3].01B:Ds@Df*uMNj)s+C4!rLIUW&KI2DdJp%)Gdn!]B2P6;mI34gIM910NBGOrZ,jj3:`K2+P;K!Zmo[rA0a;k2!VNe83d5oG\)Ee+c]7#;%i#R_Ra&P9+#?B0"@eOg)IE9B%[]8%4jp_ONTm:^?H7Ftp-kAD8WiOcJX]hbhiPpP9Y!<kc?S0[1QN/IFi.":1gOSDEh5]9"8)h.F1N99kpbW%c'#S#dT<G\pVqA2G8Z]O%k&W'tC//-tO_!r"RUUAg@dB>mc,%SR[`I<EX<*ERIS4056GfV\I_n#t^P03X28)s$.Ldd>.a0hda^f.^'AQpQqItr+1lJ]]rY#f\%`"7UBo?>GH3U,tDA#t<7(12ha^10](-r.":Un/dC;,$F&X-Cg3N(R-%#g)J-^qrGro;jF0O?2M&.@c8a3&oM.WO`K4YGCGWh,Hb&%'r:lUeTObe6[;U5'""$pbDe@^'aci#@'b^eS[%n[`_3Ur!b%cfDO(A\*27e;j@X6"PC8gRl\6SW%/+mmT,ffW;QG``*'82SE(of%%$Jg6$co0X&(+k38_W7%3:Y[7c#Mc:TR`">T'?QdQq2@(^WIhE*Qjh1;Z>e'i,.+5<9Yt6JGt]ecHT?U&Ro4jH=b^D;Xk^Dm=P2+l%0jKj-HsmSM;",sb4IJu;iG7e`1YR8UQldg?LPko$@Xb8C+"HE.MYWrTI]/VU.cuMDq4V8HW0eYVk'pCMr6*AYP^[*p@+0HTbn:>/%pK]$r&FE)>`0fbO`OJKs#'=,uU'^H9gSfWZK%L9j:M"VTP20RT6K1hD%)p"!BEPN5-Gr4sleR/-J;k$V$DO1u@g2E,BFc7^V15o]%56Dae2bKRa\C4PYWt/nOK6i'QPNsR/6>g3+!,8hbBV8tU*YMJX6t\o)7?ag^-E0[3M]R-h$UpWb+O;D@LX[1QWkcoWC]PeK-5NS(%/UjR$B:4qtfmJ?b;H_.g+<hA\9Y95<PL7gC;i5,"$oVo!K#ZPrW]mDK>5;f=:!-NAJchfI-8d93Un@bnS&/uI!e/SU&g6ulJe#f,%/k1r<VGJ50[Rcfp?qiFP1P`YS0>E0Q*"A9=c-+>pV^`i^)LVc[ZsaJV,1C4(CX/5DLuS6s64@N?[m5q^ll1K\QqS"ll=Sn1>oH^l%$Sa<Q+=ls#.4rLk;0=["K'>_aG7bc;4:&;)@K?NMaPN8$:t)->7nuIdV.!0)4Kh$%P%Ft;WZP7^iCf]2]]YG'8Ae,c6:IQ;Tqbn*%B`rtQ@g##X9#Y=lP!s[+h4KL(PJ(78E*3eSTILW+'*F5]WKJ3NQZ&1G4A$!m3Yu9-Z4X#)$`ULp;"@r`=mmpgbl`^P,e\p+&<dU\%gm]#LP&.WV(7_et9s,[O?[o_Kh,jsg+pEl$<g$1q`!'^9bH\'e6>'p4)njD;VSlLi*cX`IOL.HHp-8k!r_(aXPQd3cY!I^eQ?OWX%>'b^&<kMO4'q..e-@'6TeL$.cC12:29[,T-`\&jDh6Es=H,Q#J@fb>YUdhFnZ*rCgoj#6tH8`eJQR\0k%;TDfHb`U.X&e6]6>E]J%BS`cB%MM`sP78Tg/G(Cnih^uT`>E.XJ;Jl$a)Ln2TVWgB=<'uP"-g<o+P]=^R`1k.9(kk4P[o8e$njUXU[`q(kO4$/fWnqEKYd4M%;N1l4VYHc\]6[S;RH]s0]2`_cN(WB0h--5HU(mu>$HF!)70@%uM+e)PI9]lKX=0IA7YIc4j2>E/%?Wj^#uuZ@kh27.U'=!3ppjc7%o+S0"&u0f(3+K$uEradhHiaMsSSo+hki)mo5L1Ju8#*25QLtR<g8m"]*Kqi_0gQYp[[bDGmKu2F\Y\-AYArc'TD&9ECok/)3)3bN%](Z**2q]+IY=<TN@]ZKi&oeu4&339/,;4RPs3,P6Fci0?iChWAHJrmW\e,#lF^&',JP2EQH@Im!4W0%i.WI#?c<\DH&t98Pm[?d;%K^5cTX`fpkoWY4@)b^;mnS,*,en$9Rj9l/U=p^ME=?=@c8iNVu^4p;^^hKg"0;>UZ\*VX6Wuk>qYTajH&GLc"US[d@JR#bZ%7Bi=%>)sk^pnlb_h`sSq`9Ib0/U_D\+:YaNU<uR^8HG9;PeH`ZOCeVi@R&.gf"1Jt68V]+,G?8c.BPRD[:uW'B\J$-L>3,I$bI,"']UXf%L;%6p6i:cI9<m_M\u:Q8PgHf'NFHUT8r'"3^dL-A,;%mugB,Q^N8\Oh5`r/O%9l<Db^puG^p>Z`)Z)%5?6>WXLM$+NR=&Zp+.C<,%B(DX`HtXiKR`U=sntDJ!BI<`g2%t+t4I7J1qb40,0_,hQKnPe2M-[F\/Z$Y$?[uub3sLY6")P_';@'UabUo1dc;Bp!/BE'1P"P46%LOm5c/.T?="2^MWORWB/Q,;LZA^5-%lk4EL?Ksiu@eGLeMSq("0;bu#oe5mp"J[X9fuM\E;aD>2M?NP)36?WD^FPUDUO,p4Y`6?_%g]S&mcuhl2h41;q6d@AXR4BedQ8"$U?lRk>;@$4Q_(=\"R5IgdKM8ZZ>^BQk*HE)kFGGN73)>2C(*m7_Q:pRIVN`DT&ar0pc.>S3%MNK+iJ_/30WtXP3HLdgUKgJf]Ef'mmT:FV+9j*O'\nS.'#hoU:b2hcO04['@Vaq7sLLD,Z6HK:&ee/:fp!@CEMhTO\d?%]/Wc=7$%8@9(PlGQ69A4)cIb&>3lX?H!4/ZDkjG9YV[X?qQhoN1[-:M/':+iRQAU9&Wu9b7b*_O0eI[7<A)((Lpb/32`&4,&*:VBd68WYe&'%b"[fk-6XC,Od#]m^(D`5!Y*WNGprpQau?S$(pM7#K*#YS*L@oR!6HN]R&[fN,l&#N-;!X.PuQ<6CEb?2S-1nEF?qf?XAq>=99V\,%>gl:Y/565O4eWTc0MXW.XJAbNj%8t`Mo@A*PhW(b8hE#iRgPt-8<Z@$Kh`THCf)?UDUEuc#I0Ul34A>:$F96\</AkO\;V.6Z+duo%GM<[dVQt)]`*bR(8Q[n&WBnYc]"*KM&28&/>.k)NUCrK$R>?FY=N)JZV\cQAAe<[lH+#I[*3<FpBec+*&1YJW,RMWbU83B-0iCIs%+YBRW6_7213XF-30dEt(Q3!h-QE/j&"eAti'"/>'F_$LoFr`NJk!t@mbQk6Bp@MRgds8tpCf_3q=tHk^^WpBbZ1L5GhZ)t9mk6&g%,,;f2\DfPiOeHr!9[gdN_RLUL@k9=UaQVb<?rXOR40)qsUC9"?f1>'NG<@S1%&7ngai!ttP!h*nL\fFeDj5d*fA0M.?6BqZblJ$6%DASunM#jk7@p32?G0<l,Rj-6GN9`i/5sW9.W;K&G]OLtcYncoJpj`i<q^A0Y?L*T1JD;@5RubG=;=Y*/b%QJA/U0P1?kU4A_&>"s%[IjgQOrdTNOYk.1=H`N6jQQ:,LbVJ>A\hIDW<PB<)U^kr'?XUHin_C>g?f1c1YP(o0o[D99H04#`\mH`1[/X9+Ot^ug0/6$6G=0<%#?BEP0N]7Q(SL.gno5*#?,gh!A3Q7cK:"UY_gi2N28"KWc1U4H;IG[RX[#M?jqt<=11rG,#Ki/`Z>qCf)JXHV6+mZ^F^?UQiIAG1%5-j]>SU3H(k)^%PCNqI>7;YCghF66#7R8CMoOskm_a_5L/Z$:VQIKqb0!fIj51,+4!a:%N1:(`M_!52+a2lT/b.G@SXGbFdRW1u[%H1;*_3Kgf>N!^=_j/OeZRZt@8H;ERd-XXf(@A!utISLsLI;>J`=iGE3GEr:V:E'q?Ch"#&Oh6jHqUVd^/c4TA6Td').SM@!P8ld0%Lt0dWmn7^.;C(Xm=p:/qMmA45ePiM@raN0ja4U5m8ZN^A8<'Vu`dOq[:Y"(L?^^HLj,EssUHd&fO#-XmN;e=cN;eapo0BOR/L=0M%\"?.APi6M5+#*;`]A\,/ToRGQVqpW\KGBH%/t5ciR6%?[<N]'=B`m[1h;^+Z!_jh1d%K7WD-PGZdlb?Y%3*o)_L-qYdIO]S`,(<6%^8@(.Sa&$(8KMs<$0-?RV6fCf7X._kWB6DWm=g$fMa/NE3R\`g,e#:)[JWN\fi'IiX>V4WAQkAn_$.kmN,8nPC=!G>MK0mj:o[RY%_CLbAUb+AYd\W:+eSn*flqn@n"tT@-i*>'E#bSE51]p@iq#N(5lK#?oY=W&Xc'6/5\qZM<04J^,r=>r6>pNo>YMH1S?aUq9Y32%H%rDqA(TmlVXD'V5f8-jU8YT-ES%^]f`9Zl?M1?1p3%Z;9"C76o*n4q4@ZH4rNJha\Od<Je(r$?XS@-LUF"m\BG3<&TZapd&BGYQGT%7>mH<@Vl8%0SNhcM.Fj5(.8_C2C=r,H\a/l_I0;Ofd09$e.iVZ?2ZFfctIu#XDB@aYBXemG!TBp4:@MM+NQ4)Q[GH!=;ZV@1o;V,%#&iX=2g=0/8jJ)En>0[c9[#I;BMAS?,]LhZZ4d=p?T=lKZH.SrQ`Ns/[[<A3'e(OOU;[A3Iu?d'gSA+<P-D,'\37ph@\uPg3q;tW%^=!R\j.3*49Mk'Gq0/EBPj*^4.=shu<K:%VlT2@gPd!cAlnFN?T#E>AF3)\+T<Qqt8P(1VQ2.qj:nm1J!*4g7<gZfl3ehI8<CL5R%.N\p$[#C/?SJhb[Cf<<%9go>4\*+"d./cI+SX'FV3n5W]Wb6CuQ<sAkp+fco71N_f=N!Yee@#C='U)TX"`D[E4nEM^;$=N`49u[3%l2o3W)bH"GFX8`f]Eel`bDf?WVW*pZr/i@)0*d1.QW7OQ#Ddd:\b'DG'Fn81#jLQbM&DK8'p7pI;ui*IOJ3Rl$6G#e+_>:5I.nhH%JJ?$p.II9>Q<<OoH!#]B\1+7+.+8GK\JBG1bB4$K;-,:HR+_ppc@[;=I2d<#FB%V=:jPNGnb04?d:kE66'qJ9emF`c#Ws%BeL<X7%PHC#s6D25<KqnuW@Zc6jbCs^8cW>tP/$b"o[p_uS9$j=\o.Mi#E;\4+A7Gp)7%Bod'P]Nn0#tDrX(4GF"p)JdX0Q-F(8M;C4"),^%oZAk")\tMnerUt0AAK$5>(]J>2_;0WdHVm`HPEU-!L_op9'!HKkV/)MW)*Iu(:.7@Z$=3o8i[(AI(Ak\,>3Fe!T.&JQ"lR):;mDW%.;XDDpo[KB:ui8l4rUTbI[?a4@h.<CC,[Y$k0i"JOS9[jla6HuOmteLr"'`17)fb"nO$jb&/d]#`Xe4%s2Q>D?T'Ngmt<N(-WT!3%EkT?A'%5A8lr9uE;TqcBVt!g0AdJG:,o1uWg@>UB[_0ET9"F`s,JF'!;[W@\$T?""<iP\7lXZ@!I(7Dea9*<DgeN?:,"j#9RCpC'%-P9H+eO!SM6*L@^P(c$8@oeO55XjrShL90@I*R'8$B)TG`r=+Lo.chdj`oLbb\tR.qI4$aRtG0"Q=B;e@[-tanF&n6,%0$j'4//)%2NF?h;uU!6*W%dW%7gYjRYABoZ3Lj\r8<uKiq6,FM>>4pJ*Bd,#AO46Vh3j12aA&VDW$3Xeci-AM_.:A,8<()\/>F9-HW^!]B]i8%P:`m"/XL$A<qOHJOR$(Ha_4<bG$q90\S@(2*0=Up:s=T!d!Y".F"&^G/S;B7<t8A;.Mj8h;:6p'"<!">FkFBhe)`FY'"F]PNQAs<%P)@*;Y"W08h(HgS2H"R8iR76#CB>4OPa#FI7ZF4?Ld;W7m'n`':q=L)%M`4Q]VSHJ+H\7^3H0@.RM$1LJ"[TM,VkUPJeW3U[K*D(%^+4Hc&tK&ZiF.E]I$(`EK79?EGo_D"&THn@TmeL2Jo%`'jX3n7XM'nYPr;aV7J]=-;nLAP)A8KIQoKqb0n:78\Ou@Yk2aBI/;+h$%poX-KPS\<GF&t.ls,t$Q#Ra9\!mhrL_q7_`ZEm:Mes=:LS\hWaUNd\3Lbap+KV2CW`gRYW%b+$c!G8*:-q+mR_%DtE8tg#*H5beu%(e0h`'S(b2$(&PqijB^E\J=$9$ruM["C7+/?aB':<isA0mN^RCM"eic![1^;dB#_5n^T*$ZeTpcN:Gk/:q8GF[dHZBC[@Nds8;+o%^\cbmrp\r4r:-g0s7lP:?iKQX\%fPJCZ56ZDnc5ArU&d_r:PO9osatlr=;-,rTa:[r8$iAo_/+HDgqW'gV::j.Yp=akm)_2rJs0l%s/eD@U&GF\rk%Y!7@lkEc(BCK2h1bCJ(.9o*7kMrpPZMqrL\Q:iK)mpiU,gCqUI76qW^:pqj[&(r"=F?#QOf"n'ca_q(LTRqsQat%rmdp=rUSS=GQ7Homlu<tkHBC1S%ndkZ_.2W?iK$MJ+pjIIsh:mLJNEpe!L*rlaJO^q[W)iqHpCTH2GJi?iTB2msk-/m8*cPqgSci%rPTcWg!BZfhu7hlrc_aJ``<~>%AI9_PrivateDataEnd